{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1524642640927},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1524642640931},{"_id":"themes/maupassant/_config.yml","hash":"20753699e93313041fb3d5ab9d1c53cb73f60bf0","modified":1524643935400},{"_id":"themes/maupassant/README.md","hash":"3c16d9aa7cc1cae86847408f77704f93a80cd1fa","modified":1524642640935},{"_id":"themes/maupassant/package.json","hash":"5328c4c435cd4a5fe47caae31b9975013cdca5bb","modified":1524642641044},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1524642640892},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1524642634909},{"_id":"themes/maupassant/.git/config","hash":"3dbf80769093e21ccab51f5f2b02a6d764498803","modified":1524642640912},{"_id":"themes/maupassant/.git/packed-refs","hash":"4f3f2ea07e30292c8971a61c0b4c45cefcb2f318","modified":1524642640874},{"_id":"themes/maupassant/.git/index","hash":"129cfcb8ad35d0a3afbf42ed89f86a180de4b5dc","modified":1524642641183},{"_id":"themes/maupassant/languages/en.yml","hash":"8574e8c36f4c72118f27f7ff7353b2a9ceda2a9b","modified":1524642640943},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1524642640947},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1524642640941},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1524642640946},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1524642640951},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"fc32c57220ecc58cb1920623105ed8901bc4cbcf","modified":1524642640952},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"34dba7ac67aeb316f629ca73e546fa143cc362d5","modified":1524642640954},{"_id":"themes/maupassant/layout/archive.pug","hash":"e749f047da5eb6449060a724a543ce84e80a2b8b","modified":1524642641016},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1524642640949},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"b0a0ec63ee0225eaa0996d72164202bc9a28a225","modified":1524642641019},{"_id":"themes/maupassant/layout/index.pug","hash":"d1d56fa62f1293cd0cbefe96dbbde2d35b557a0a","modified":1524642641027},{"_id":"themes/maupassant/layout/base.pug","hash":"7451a590db6943edc099dc0e13b317c38686e8fc","modified":1524642641023},{"_id":"themes/maupassant/layout/post.pug","hash":"c8300cff3e8cbfd70511658dcfb0a56845a1538d","modified":1524642641034},{"_id":"themes/maupassant/layout/timeline.pug","hash":"04f7efdc45acda1faff409d0f80fa5a0dd2309d0","modified":1524642641041},{"_id":"themes/maupassant/layout/single-column.pug","hash":"8b4b731cdf86379d526821a1fa950bf15ed61f15","modified":1524642641038},{"_id":"source/_posts/20180416.md","hash":"0f294a2ed67c5bd948b2d79a5554d8518b87d4cb","modified":1524452773491},{"_id":"source/_posts/心经.md","hash":"973a964aaec0529e5f79f8edc1c427a228d75eb0","modified":1524640646139},{"_id":"source/about/index.md","hash":"253c2dd871906f8669639eb5da8fce0a491814db","modified":1524460589757},{"_id":"source/categories/index.md","hash":"ac71b64a0fedf6bbc2a94c4c062944e93a246b7e","modified":1524452773500},{"_id":"source/images/avatar.png","hash":"8d6f1b5274be426223cae5fd9eb3dda8e35f83cb","modified":1524452773505},{"_id":"themes/maupassant/layout/page.pug","hash":"a21e638d5459120d88e45e8f18a23dc072d9ca07","modified":1524642641031},{"_id":"source/tags/index.md","hash":"5ed2f6020b27cf2391797cc99e6ab071a1d84250","modified":1524452773508},{"_id":"source/images/alipay.jpg","hash":"2ba1881fc184831c6cc809f04b26e9cf598af865","modified":1524640646152},{"_id":"source/images/wechatpay.jpg","hash":"fdfb221debbefd78a67085a58948d04e483d6600","modified":1524640646169},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1524642634915},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1524642634921},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1524642634927},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1524642634932},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1524642634943},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1524642634957},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1524642634963},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1524642634951},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"0257f69b8b37eb9e91610f39e5580e98bc03f83a","modified":1524642640904},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1524642634937},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1524642634969},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1524642640999},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"7bc7c17cfd498c3e0c3371cef78f08f1dc25db36","modified":1524642641002},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"68bae3eb2f80e6127e03faa7ee1b78fb2e70aafc","modified":1524642641005},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1524642641007},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6aa743486f282545f553a4fad6aae037afe26108","modified":1524642641010},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1524642641013},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"a6e49060fad643899256ad10c9fa976336086cae","modified":1524642640957},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"b32f8585ee32f453cf53c7d1ba7e5647d6dec263","modified":1524642640962},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"aee266e0a9438ecd843f2ac674f8395f0de1dfdf","modified":1524643749728},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1524642640976},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"2074eb18448143d34ff104e580f8fd4324626553","modified":1524642640978},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"e34f7f52ae2a8dcbb7d6b53339b2fc4127f66851","modified":1524642640971},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"44a932d09ed74104eda6c244fb47455d0cb94888","modified":1524642640982},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1524642640988},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1524642640985},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1524642640995},{"_id":"themes/maupassant/source/css/default.css","hash":"b41d95120f9e64fd4530ae00ceaef09c7ea20818","modified":1524642641052},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1524642640991},{"_id":"themes/maupassant/source/css/style.scss","hash":"2fd9aa5c41d77ad007fd7bb08610b20dfea09581","modified":1524642641068},{"_id":"themes/maupassant/source/css/donate.css","hash":"b41342b45a1fabd35c84001f82bc7caf6583152a","modified":1524642641059},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1524642641082},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1524642641085},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1524642641086},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1524642641088},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1524642641098},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1524642641110},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1524642641103},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1524642641115},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1524642641121},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1524642641136},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1524642641127},{"_id":"themes/maupassant/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1524642641158},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1524642641166},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1524642641172},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1524642641178},{"_id":"themes/maupassant/source/donate/index.html","hash":"d429fbe0ff24a079fb419e454c015eee52107efe","modified":1524642641078},{"_id":"source/_posts/20180416/openresty_phases.png","hash":"da95f6c82ae4ec3f5666fd78b03f8f326d9e7337","modified":1524452773494},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1524642641093},{"_id":"themes/maupassant/.git/objects/pack/pack-94ba4166f722e1b801a6bb863a70407a11647f30.idx","hash":"27be889bcff5b2615c1c15a2a648c82762d34692","modified":1524642640825},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"e97388a286553a3d9a253875dc4c19748d63e4c8","modified":1524642640897},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"b15998a45d5f386d30905cfbfbb1658336acbb5b","modified":1524642641143},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"0257f69b8b37eb9e91610f39e5580e98bc03f83a","modified":1524642640900},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1524642640888},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"0257f69b8b37eb9e91610f39e5580e98bc03f83a","modified":1524642640886},{"_id":"themes/maupassant/.git/objects/pack/pack-94ba4166f722e1b801a6bb863a70407a11647f30.pack","hash":"329b5433f4d3905d6f7b1e451e5514936194acda","modified":1524642640835},{"_id":"public/about/index.html","hash":"cce5210fa5d12379c8c3606283b1835d190dfded","modified":1524643942720},{"_id":"public/categories/index.html","hash":"0970ca8291baee64166082d3d1db7781a207114a","modified":1524643942721},{"_id":"public/tags/index.html","hash":"0970ca8291baee64166082d3d1db7781a207114a","modified":1524643942721},{"_id":"public/archives/index.html","hash":"482fa0a78786ac64790451a2a17f07c914e1d8a8","modified":1524643942721},{"_id":"public/2018/04/16/20180416/index.html","hash":"c1d4b827c72c990f453fcf15d52a7e2ef5447913","modified":1524643942722},{"_id":"public/archives/2018/index.html","hash":"482fa0a78786ac64790451a2a17f07c914e1d8a8","modified":1524643942721},{"_id":"public/archives/2018/04/index.html","hash":"482fa0a78786ac64790451a2a17f07c914e1d8a8","modified":1524643942721},{"_id":"public/categories/技术文章/index.html","hash":"75657bf0ddedc0ea4948faaa9d560ca5601d36fb","modified":1524643942721},{"_id":"public/categories/佛学/index.html","hash":"911ed9092d70c08a86aef28fdb68952d4c859048","modified":1524643942721},{"_id":"public/index.html","hash":"06db4921bc357ae066233f10b9ccab472425a681","modified":1524643942721},{"_id":"public/tags/nginx/index.html","hash":"26863b9e384611921eee339b789364cfc034de9e","modified":1524643942721},{"_id":"public/tags/API网关/index.html","hash":"8ea7403062f5fc993699bc442293145daea2f723","modified":1524643942721},{"_id":"public/tags/kong/index.html","hash":"0e5b7e9e936c78ec139a8573c7ff97263ae8c232","modified":1524643942721},{"_id":"public/tags/佛学/index.html","hash":"911ed9092d70c08a86aef28fdb68952d4c859048","modified":1524643942722},{"_id":"public/tags/openresty/index.html","hash":"978d850ce9104b82cb756b50ae94038b6d6c1bee","modified":1524643942721},{"_id":"public/baidu_urls.txt","hash":"1ca882df7cd237b0f1a0a73dca66cc1db123befa","modified":1524643001129},{"_id":"public/baidusitemap.xml","hash":"465ecc25af20adf915954c6949a0f963dfccb526","modified":1524643001129},{"_id":"public/atom.xml","hash":"5614c6a5760619929690f999123745272d32575b","modified":1524643001129},{"_id":"public/content.json","hash":"286fe2074a8b650f64abdfd18992fa1d62ada8c3","modified":1524643001130},{"_id":"public/sitemap.xml","hash":"e95619b01ff68c49bd7b44ed454f159d626381dc","modified":1524643001130},{"_id":"public/search.xml","hash":"e9a99fd4b244bc757ca5ba257c95003c205dbe12","modified":1524643001130},{"_id":"public/2018/04/26/心经/index.html","hash":"2eb8aec440aecb09b3cf504aed0f2458c4e61172","modified":1524643942721},{"_id":"public/tags/lua/index.html","hash":"ea90697d063039b422d487af008e5623ac1e89cc","modified":1524643942721},{"_id":"public/images/wechatpay.jpg","hash":"fdfb221debbefd78a67085a58948d04e483d6600","modified":1524643001136},{"_id":"public/images/avatar.png","hash":"8d6f1b5274be426223cae5fd9eb3dda8e35f83cb","modified":1524643001136},{"_id":"public/images/alipay.jpg","hash":"2ba1881fc184831c6cc809f04b26e9cf598af865","modified":1524643001136},{"_id":"public/css/style.scss","hash":"2fd9aa5c41d77ad007fd7bb08610b20dfea09581","modified":1524643001136},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1524643001136},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1524643001136},{"_id":"public/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1524643001136},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1524643001136},{"_id":"public/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1524643001136},{"_id":"public/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1524643001136},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1524643001136},{"_id":"public/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1524643001136},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1524643001137},{"_id":"public/2018/04/16/20180416/openresty_phases.png","hash":"da95f6c82ae4ec3f5666fd78b03f8f326d9e7337","modified":1524643001137},{"_id":"public/css/donate.css","hash":"d0079ba8202d925a93ab1cb44f2087b81f476755","modified":1524643001157},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1524643001157},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1524643001157},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1524643001157},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1524643001157},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1524643001157},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1524643001157},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1524643001157},{"_id":"public/donate/index.html","hash":"88cc1b52c1d8ce455d7e819c356a50554e6d90bc","modified":1524643001157},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1524643001158},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1524643001158},{"_id":"public/css/style.css","hash":"bec4cd8e3a4c354f5841226683a2acfac0c000f3","modified":1524643262803}],"Category":[{"name":"技术文章","_id":"cjget2se5000150litgyj2u5g"},{"name":"佛学","_id":"cjget2sem000g50licww7ul5j"}],"Data":[],"Page":[{"date":"2018-01-15T10:02:44.000Z","type":"about","webtitle":"关于","_content":"\n个人介绍\n===\n</br>\n本人目前在拍拍贷负责网关微服务和容器调度系统的设计和研发。\n\n如果你酷爱技术，喜欢钻研，愿意去帮助业务系统的发展，骨子里认为编程是上天赋予你的一种天赋，内心充满不灭的技术情怀和工匠精神，欢迎与我交流，一起开拓我们的星辰大海。\n\n\n\n\n\n","source":"about/index.md","raw":"---\ndate: 2018-01-15 18:02:44\ntype: \"about\"\nwebtitle: \"关于\"\n---\n\n个人介绍\n===\n</br>\n本人目前在拍拍贷负责网关微服务和容器调度系统的设计和研发。\n\n如果你酷爱技术，喜欢钻研，愿意去帮助业务系统的发展，骨子里认为编程是上天赋予你的一种天赋，内心充满不灭的技术情怀和工匠精神，欢迎与我交流，一起开拓我们的星辰大海。\n\n\n\n\n\n","updated":"2018-04-23T05:16:29.757Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjget2sej000e50linnj30gro","content":"<h1 id=\"个人介绍\"><a href=\"#个人介绍\" class=\"headerlink\" title=\"个人介绍\"></a>个人介绍</h1><p><br><br>本人目前在拍拍贷负责网关微服务和容器调度系统的设计和研发。</p>\n<p>如果你酷爱技术，喜欢钻研，愿意去帮助业务系统的发展，骨子里认为编程是上天赋予你的一种天赋，内心充满不灭的技术情怀和工匠精神，欢迎与我交流，一起开拓我们的星辰大海。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"个人介绍\"><a href=\"#个人介绍\" class=\"headerlink\" title=\"个人介绍\"></a>个人介绍</h1><p><br><br>本人目前在拍拍贷负责网关微服务和容器调度系统的设计和研发。</p>\n<p>如果你酷爱技术，喜欢钻研，愿意去帮助业务系统的发展，骨子里认为编程是上天赋予你的一种天赋，内心充满不灭的技术情怀和工匠精神，欢迎与我交流，一起开拓我们的星辰大海。</p>\n"},{"date":"2018-01-15T09:59:33.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ndate: 2018-01-15 17:59:33\ntype: \"categories\"\n---\n","updated":"2018-04-23T03:06:13.500Z","path":"categories/index.html","title":"","comments":1,"layout":"page","_id":"cjget2sel000f50li6cbjdmus","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2018-01-15T09:56:40.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ndate: 2018-01-15 17:56:40\ntype: \"tags\"\n---\n","updated":"2018-04-23T03:06:13.508Z","path":"tags/index.html","title":"","comments":1,"layout":"page","_id":"cjget2sen000i50li25uuzw9n","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"kong源码导读","date":"2018-04-16T07:24:37.000Z","author":"张轶丛","_content":"## 概览\n&emsp;&emsp;kong是一个基于nginx和OpenResty模块构建的API网关服务。提供http请求路由，后端服务负载均衡以及通过丰富的插件提供认证鉴权、流量调控、日志监控等功能。该网关目前应用在全球著名的API管理站点[mashape](https://market.mashape.com/explore?page=1)上。  \n&emsp;&emsp;nginx是一个采用异步I/O，事件驱动的高性能Web服务器，也可以作为在企业内部提供基于http rpc的反向代理和负载均衡器。由于nginx的配置都是以静态文件的方式提供，而且nginx一般都是多台部署，导致nginx的运维管理变得比较复杂。许多运维的小伙伴都会写一些运维脚本，自动通过ssh命令远程连接到服务器去做一些配置更新的操作。  \n&emsp;&emsp;笔者所在公司也开发过一个基于nginx的软负载中心。用户可以在平台上为自己的服务配置反向代理以及负载均衡策略。用户所有的操作都会打包成一次对nginx配置的修改。修改指令会发送到每台nginx部署的一个agent上，最后由agent完成nginx配置文件的更新。  \n&emsp;&emsp;这些方法虽然可以达到自动化的管理nginx，但是本质上还是通过配置文件的方式去改变nginx的一些固定行为。在企业里面，特别是互联网公司常常需要定制一些功能。虽然可以为nginx开发一些模块，但是门槛较高，需要对nginx源码级的掌握。OpenResty为nginx引入的LuaJIT和lua-nginx-module，使我们可以在nginx的各个执行阶段编写一些lua脚本，极大地扩展了nginx的功能。OpenResty的作者已经用lua开发了许多工具库，使得我们可以在nginx中访问MySQL、Memcached、Redis。kong在此基础上实现了一个API网关服务。\n\n<!--more-->\n\n## 导读\n\n### 如何阅读源码\n&emsp;&emsp;想必看这边文章的许多朋友之前对nginx都略有了解，但是可能是头一次接触lua语言，笔者当时也是头一次。这种情况笔者一般不会一上来就去阅读源码，而是先阅读下官方文档，把环境搭建起来之后试用下功能，然后看下日志。这样会对这个系统有个整体的感觉，之后就可以去翻翻源码了。笔者所使用的编辑器是IntelljIDEA，它可以自动识别出lua语言，然后提示你去下载支持该语言的插件，很是方便。笔者全程是在ubuntu环境下开发的，使用linux系统的好处是改完代码后执行下make命令，然后reload下nginx就可以看到效果。使用windows的童鞋建议装个linux的虚拟机。由于调试kong比较麻烦，所以笔者都是通过加日志的方式学习代码的。选取一些关键的流程打印一些数据会对源码的学习起到事半功倍的效果。有时候在troubleshooting的时候更加需要打印许多日志才能把问题定位到。  \n&emsp;&emsp;笔者使用的kong的版本为0.12.1\n\n### 如何使用该文档\n&emsp;&emsp;本文档作为源码导读，在阅读本文档时手头最好有一份kong的源码以便随时进入源码深入阅读。读者不必从头到尾进行通读，可以根据目录选择自己感兴趣的章节进行阅读。\n\n### 源码结构\n|-- kong  \n&emsp;&emsp;|-- api [admin管理接口的代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...   \n&emsp;&emsp;|-- cluster_events [集群事件的数据访问层代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- cmd [kong命令行的代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- core [请求处理、路由、负载均衡等核心代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- dao [数据库访问层代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- plugins [插件的代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- templates [nginx配置文件模板]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- tools [工具类代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- vendor [这里提供了用于lua面向对象编程的基类]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- cache.lua [缓存实现类，封装了mlcache]  \n&emsp;&emsp;|-- cluster_events.lua [集群事件同步代码]  \n&emsp;&emsp;|-- conf_loader.lua [配置加载]  \n&emsp;&emsp;|-- constants.lua [常量定义]  \n&emsp;&emsp;|-- init.lua [kong的入口，可以从这里开始阅读代码]  \n&emsp;&emsp;|-- meta.lua [定义版本号之类]  \n&emsp;&emsp;|-- mlcache.lua [封装了lua-resty-mlcache]  \n&emsp;&emsp;|-- singletons.lua [单例模式，存放公共对象]  \n\n### 执行入口\n&emsp;&emsp;以下是kong的nginx配置文件，笔者把一些和本章主题无关的先去掉了。  \n\n{% codeblock lang:lua %}\ninit_by_lua_block {\n    kong = require 'kong'\n    kong.init()\n}\ninit_worker_by_lua_block {\n    kong.init_worker()\n}\nupstream kong_upstream {\n    server 0.0.0.1;\n    balancer_by_lua_block {\n        kong.balancer()\n    }\n    keepalive 60;\n}\nserver {\n    server_name kong;\n    listen 0.0.0.0:8000;\n    location / {     \n        rewrite_by_lua_block {\n            kong.rewrite()\n        }\n        access_by_lua_block {\n            kong.access()\n        }\n        header_filter_by_lua_block {\n            kong.header_filter()\n        }\n        body_filter_by_lua_block {\n            kong.body_filter()\n        }\n        log_by_lua_block {\n            kong.log()\n        }\n    }\n    location = /kong_error_handler {\n        internal;\n        content_by_lua_block {\n            kong.handle_error()\n        }\n    }\n}\n{% endcodeblock %}\n\n&emsp;&emsp;可以看到kong的代码执行入口在init_by_lua_block块中，该块中的代码会在nginx的master加载配置的时候被执行。通过require 'kong'得到的实例是一个全局对象，在Lua虚拟机里面执行的代码都可以访问到。\n该实例通过master的fork进程方法共享给worker，如果worker修改该实例会触发操作系统进程的copy-on-write，worker进程就会拥有该实例的一个副本。  \n&emsp;&emsp;后缀是by_lua_block的都代表nginx处理请求的一个执行阶段，每个阶段都会执行相应的kong代码。nginx执行阶段流程如下如所示:  \n\n![](20180416/openresty_phases.png)\n\n- init_by_lua*  \n&emsp;&emsp;发生在master进程启动阶段。这里会对数据访问层进行初始化，加载插件的代码，构造路由规则表。  \n- init_worker_by_lua*  \n&emsp;&emsp;发生在worker进程启动阶段。这里会开启数据同步机制，执行每个插件的init_worker方法。  \n- set_by_lua*  \n&emsp;&emsp;处理请求第一个执行阶段。这里可以做一些流程分支处理判断变量初始化。kong没有使用该阶段。\n- rewrite_by_lua*  \n&emsp;&emsp;这里可以对请求做一些修改。kong在这里会把处理代理给插件的rewrite方法。  \n- access_by_lua*  \n&emsp;&emsp;kong在这里对请求进行路由匹配，找到后端的upstream服务的节点。  \n- balancer_by_lua*  \n&emsp;&emsp;kong在这里会把上一阶段找到的服务节点设置给nginx的load balancer。如果设置了重试次数，此阶段可能会被执行多次。  \n- header_filter_by_lua*  \n&emsp;&emsp;这里可以对响应头做一些处理。kong在这里会把处理代理给插件的header_filter方法。  \n- body_filter_by_lua*  \n&emsp;&emsp;这里可以对响应体做一些处理。kong在这里会把处理代理给插件的body_filter方法。  \n- log_by_lua*  \n&emsp;&emsp;kong在这里会通过插件异步记录日志和一些metrics数据。  \n\n### 核心模块\n&emsp;&emsp;kong有三大核心模块：请求路由(Router)、负载均衡(Balancer)和集群数据同步。这3个模块加上插件就组成了kong的所有功能。\n&emsp;&emsp;路由和负载均衡模块完全接管了nginx本身的策略，也是作为一个网关的核心功能。集群数据同步则弥补了nginx集群管理的缺点，可以使得路由规则和负载均衡策略的修改可以动态进行，省去了修改配置文件和重启的流程。       \n        \n## Router\n\n### 概览\n&emsp;&emsp;路由是Kong的核心功能之一。Kong会代理HTTP请求，根据HTTP主机头、请求URI和请求方式(GET/POST等)匹配路由规则，找到实际处理请求的后端服务。\n\n&emsp;&emsp;Kong的路由规则由HTTP主机头、请求URI和请求方式组成。规则匹配发生在Nginx的Rewrite/Access阶段中，access_by_lua_block指令块里面的kong.access()方法的前置handler中。见[kong-nginx.conf:85](https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L85)  \n\n&emsp;&emsp;路由规则的原始数据存储在数据库apis表中。HTTP主机头由表字段hosts描述、请求URI由表字段uris描述、请求方式由表字段methods描述。在MySQL中，这3个字段的数据存储格式都是JSON序列化之后字符串数组。apis的表结构描述如下： \n \n{% codeblock lang:SQL %}\nCREATE TABLE `apis` (\n  -- guid\n  `id` varchar(64) NOT NULL,\n  -- 名称\n  `name` varchar(255) NOT NULL,\n  -- upstream标识\n  `upstream_url` varchar(1023) NOT NULL,\n  -- 是否保留主机头\n  `preserve_host` tinyint(1) NOT NULL,\n  -- 主机头匹配\n  `hosts` varchar(1023) DEFAULT NULL,\n  -- uri匹配\n  `uris` varchar(1023) DEFAULT NULL,\n  -- 请求方法匹配\n  `methods` varchar(1023) DEFAULT NULL,\n  -- 是否只接受https的请求\n  `https_only` tinyint(1) DEFAULT '0',\n  -- 如果接受https的请求并且客户端IP不在授信IP中，是否终止请求\n  `http_if_terminated` tinyint(1) DEFAULT '0',\n  -- 由于链路问题(connection timeouts, connection resets等或者5xx错误)导致请求转发失败重试次数\n  `retries` smallint(6) DEFAULT '5',\n  -- 如果是uri前缀匹配，是否剥离掉uri前缀\n  `strip_uri` tinyint(1) DEFAULT '1',\n  -- 一些超时时间\n  `upstream_connect_timeout` int(11) DEFAULT '60000',\n  `upstream_send_timeout` int(11) DEFAULT '60000',\n  `upstream_read_timeout` int(11) DEFAULT '60000',\n  `created_at` timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `name` (`name`),\n  KEY `apis_name_idx` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;\n{% endcodeblock %}\n\n&emsp;&emsp;路由规则的创建在Nginx的初始化阶段，init_by_lua_block指令块中的kong.init()方法里。见[kong-nginx.conf:26](https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L26)  \n\n&emsp;&emsp;在kong.init()的末尾调用core.build_router(dao, \"init\")方法构造路由表。见[init.lua:174](https://github.com/Kong/kong/blob/master/kong/init.lua#L174)。  \n\n&emsp;&emsp;build_router方法的第一个参数是一个数据库操作对象，会使用它查询出数据库apis表中的数据。第二个参数是一个路由表在缓存中的版本号。如果apis表的数据发生变化，会触发缓存的invalidate操作，生成出一个新的version。此时在kong.access()方法中会再次调用build_router对路由表进行重建。见[handler.lua:336](https://github.com/Kong/kong/blob/master/kong/core/handler.lua#L336)。  \n\n&emsp;&emsp;build_router会对从apis表中查询出来的数据按创建时间created_at从小到大进行排序。见[handler.lua:54](https://github.com/Kong/kong/blob/master/kong/core/handler.lua#L54)。这样如果2条规则相同的话较早的规则会优先匹配。接着会构造一个Router对象，它会负责路由表的创建、路由规则的匹配操作。  \n\n### 生成规则\n\n&emsp;&emsp;Router对象的第一个核心功能就是把数据库中的apis数据转化为适合进行匹配的规则。规则类型有3种：HOST、URI和METHOD，见[router.lua:56](https://github.com/Kong/kong/blob/master/kong/core/router.lua#L56)。这3种类型分别由位标识0x01、0x02和0x04表示。3种类型组成7种匹配方式：  \n+ HOST and URI and METHOD，位标识为(0x01 | 0x02 | 0x04) == 0x07\n+ HOST and URI，位标识为(0x01 | 0x02) == 0x03\n+ HOST and METHOD，位标识为(0x01 | 0x04) == 0x05\n+ METHOD and URI，位标识为(0x04 | 0x02) == 0x06\n+ HOST，位标识为0x01\n+ URI，位标识为0x02\n+ METHOD， 位标识为0x04  \n\n&emsp;&emsp;创建规则前会先把数据库里存储的apis对象格式化成api_t对象，api_t格式如下：  \n\n{% codeblock lang:lua %}\napi_t      = {\n    -- 数据库里面的apis对象\n    api            = api,\n    -- 是否对URI按前缀进行剥离\n    strip_uri      = api.strip_uri,\n    -- 请求转发的时候是否保留原始主机头\n    preserve_host  = api.preserve_host,\n    -- 7种匹配方式的位标识\n    match_rules    = 0x00,\n    -- 主机头匹配规则，当作数组使用\n    hosts          = {},\n    -- uri匹配规则，当作数组使用\n    uris           = {},\n    -- method匹配规则，当作词典使用\n    methods        = {},\n    -- upstream信息\n    upstream_url_t = {},\n  }\n{% endcodeblock %}\n\n&emsp;&emsp;如果主机头匹配里面包含通配符，如：*.example.com，则把通配表达式转成正则表达式：.+\\\\\\\\.example\\\\\\\\.com$，然后hosts字段里面存储的对象格式为： \n \n{% codeblock lang:lua %}\n{\n    wildcard = true,\n    value    = '*.example.com',\n    regex    = '.+\\\\.example\\\\.com$',\n}\n{% endcodeblock %}\n\n&emsp;&emsp;如果主机头匹配里面是普通的字符串，如：abc.example.com，那么hosts字段里面存储的对象格式为：  \n\n{% codeblock lang:lua %}\n{\n    value    = abc.example.com,\n}\n{% endcodeblock %}\n\n&emsp;&emsp;使用正则表达式：^[a-zA-Z0-9\\.\\-_~/%]*$ 判断uri匹配是否是一个普通的uri前缀。如果是，如：/prefix/some，则uris字段里面存储的对象格式为：\n\n{% codeblock lang:lua %}\n{\n    is_prefix = true,\n    value    = '/prefix/some',\n}\n{% endcodeblock %} \n\n&emsp;&emsp;如果uri匹配是包含正则字符串，如：/users/\\d+/profile，则uris字段里面存储的对象格式为：  \n\n{% codeblock lang:lua %}\n{\n    is_regex     = true,\n    value        = '/users/\\d+/profile',\n    regex        = '/users/\\d+/profile',\n    has_captures = false,\n    strip_regex  = '/users/\\d+/profile/?(?<stripped_uri>.*)',\n}\n{% endcodeblock %}  \n\n&emsp;&emsp;如果method匹配是get方式，则会把get转成大写，如：GET，以此作为key放入methods词典中。\n\n&emsp;&emsp;使用一个词典数据结构categories对api_t对象以7种匹配方式进行归类。词典的key为7种匹配方式的位标识：0x01、0x02、0x03、0x04、0x05、0x06、0x07，value里面会按host、uri和method对规则进行分组。value定义如下：  \n\n{% codeblock lang:lua %}\n{\n    -- 按host分组的规则，词典类型\n    apis_by_hosts   = {},\n    -- 按uri分组的规则，词典类型\n    apis_by_uris    = {},\n    -- 按method分组的规则，词典类型\n    apis_by_methods = {},\n    -- 该匹配模式下所有规则，数组类型\n    all             = {},\n}\n{% endcodeblock %} \n\n&emsp;&emsp;如果一个匹配规则是hosts=[abc.com]、uris=[/path]、method=[GET]，那么categories会包含此规则的api_t对象。如下所示：  \n\n{% codeblock lang:lua %}\n{\n    7 = {\n      apis_by_hosts   = {\n        abc.com = [api_t对象]\n        },\n      apis_by_uris    = {\n        /path = [api_t对象]\n        },\n      apis_by_methods = {\n        GET = [api_t对象]\n        },\n      all             = [api_t对象],  \n    }\n}\n{% endcodeblock %} \n\n&emsp;&emsp;如果另一个匹配规则是hosts=[abc.com]、uris=[/version]，那么categories会包含此规则的api_t对象2。如下所示：  \n\n{% codeblock lang:lua %}\n{\n    3 = {\n      apis_by_hosts   = {\n        abc.com = [api_t对象2]\n        },\n      apis_by_uris    = {\n        /version = [api_t对象2]\n        },\n      all             = [api_t对象2],  \n    },\n    7 = {\n      apis_by_hosts   = {\n        abc.com = [api_t对象]\n        },\n      apis_by_uris    = {\n        /path = [api_t对象]\n        },\n      apis_by_methods = {\n        GET = [api_t对象]\n        },\n      all             = [api_t对象],  \n    }\n}\n{% endcodeblock %} \n\n&emsp;&emsp;另外使用一个词典数据结构plain_indexes和3个数组结构uris_prefixes、uris_regexes、和wildcard_hosts决定优先使用哪种匹配模式。它们的创建方式见[router.lua:252](https://github.com/Kong/kong/blob/master/kong/core/router.lua#L252)。首先会使用plain_indexes匹配主机头、uri和请求方法，因为它的构造是一个词典结构，可直接根据主机头、uri和请求方法进行查询，效率比较高。plain_indexes的内容如下： \n  \n{% codeblock lang:lua %}\n{\n    hosts = {\n      abc.com   = true,\n    },\n    uris = {\n      /foo = true,\n    },\n    methods = {\n     GET = true\n    }\n}\n{% endcodeblock %}  \n\n&emsp;&emsp;如果在plain_indexes里面没有查询到的话，则使用uris_prefixes、uris_regexes、和wildcard_hosts里面的规则一个一个进行匹配，直到匹配成功为止。\n\n### 匹配流程\n\n&emsp;&emsp;规则的匹配在kong.access方法里面，调用router.exec方法进行匹配。见[handler.lua:354](https://github.com/Kong/kong/blob/master/kong/core/handler.lua#L354)。  \n\n&emsp;&emsp;router.exec方法从http请求里面获取主机头信息、HTTP请求方法和请求URI。然后调用find_api方法进行实际地匹配。见[router.lua:594](https://github.com/Kong/kong/blob/master/kong/core/router.lua#L594)。   \n\n&emsp;&emsp;find_api首先从缓存里面查询匹配结果。如果缓存里面没有数据，则是第一次匹配。先把请求中的主机头放入ctx.req_host，请求uri放入ctx.req_uri，请求方法放入ctx.req_method。然后使用plain_indexes、uris_prefixes、uris_regexes、和wildcard_hosts选择匹配模式。这里如果是根据uri前缀、uri正则表达式或主机头通配符匹配到的话，则会把uri前缀或uri正则表达式放入ctx.hits.uri中，把主机头通配符放入ctx.hits.host中。后续就使用ctx去和规则进行匹配。匹配模式按照CATEGORIES定义的顺序进行降级匹配。如果匹配模式是0x07，则使用0x07里面的规则去匹配。如果匹配失败，则使用0x03的规则进行匹配。如果还是失败，则继续按0x05 -> 0x06 -> 0x01 -> 0x02 -> 0x04的降级顺序进行匹配，直到成功为止。  \n\n&emsp;&emsp;确定匹配模式之后，先使用reduce方法对候选的规则进行筛选。前面说到每一种匹配模式包含的规则会按host、uri和method进行分组。reduce方法就是选取数量最少的那个分组。如果那个分组下的规则匹配失败，则使用all下面的规则进行匹配。  \n\n&emsp;&emsp;现在举例说明。假设现在根据如下json创建了一个apis对象。  \n\n{% codeblock lang:json %}\n{\n    \"name\": \"my-api\",\n    \"upstream_url\": \"http://my-api.com\",\n    \"hosts\": [\"example.com\", \"service.com\"],\n    \"uris\": [\"/foo\", \"/bar\"],\n    \"methods\": [\"GET\"]\n}\n{% endcodeblock %} \n\n&emsp;&emsp;对应的api_t内容是：  \n\n{% codeblock lang:lua %}\napi_t      = {\n    api            = 数据库中的api对象,\n    strip_uri      = false,\n    preserve_host  = false,\n    match_rules    = 0x07,\n    hosts          = [\n                      {\n                                value    = example.com,\n                      },\n                      {\n                                value    = service.com,\n                      }\n    ],\n    uris           = [\n                      {\n                                is_prefix = true,\n                                value    = '/foo',  \n                      },\n                      {\n                                is_prefix = true,\n                                value    = '/bar',  \n                      }\n    ],\n    methods        = {GET = true},\n    upstream_url_t = {\n                         scheme             = http,\n                         host               = my-api.com,\n                         port               = 80,\n    }\n  }\n{% endcodeblock %}  \n\n&emsp;&emsp;categories内容如下：  \n\n{% codeblock lang:lua %}\n{\n    7 = {\n      apis_by_hosts   = {\n        example.com = [api_t],\n        service.com = [api_t]\n        },\n      apis_by_uris    = {\n        /foo = [api_t],\n        /bar = [api_t],\n        },\n      apis_by_methods = {\n        GET = [api_t]\n        },\n      all             = [api_t],  \n    }\n}\n{% endcodeblock %} \n\n&emsp;&emsp;plain_indexes的内容如下：  \n\n{% codeblock lang:lua %}\n{\n    hosts = {\n      example.com   = true,\n      service.com   = true\n    },\n    uris = {\n      /foo = true,\n      /bar = true\n    },\n    methods = {\n     GET = true\n    }\n}\n{% endcodeblock %} \n\n&emsp;&emsp;uris_prefixes的内容如下：  \n\n{% codeblock lang:lua %}\n[\n    {\n      is_prefix = true,\n      value    = '/foo',  \n    },\n    {\n      is_prefix = true,\n      value    = '/bar',  \n    }\n]\n{% endcodeblock %} \n\n&emsp;&emsp;由于host匹配没有通配符以及uri匹配没有正则表达式，所以uris_regexes和wildcard_hosts为空。  \n\n&emsp;&emsp;假设现在有如下请求：  \n\n{% codeblock lang:lua %}\nGET /foo HTTP/1.1\nHost: example.com\n{% endcodeblock %} \n\n&emsp;&emsp;此请求的主机头是example.com，请求uri是/foo，请求方法是GET。首先使用plain_indexes确定匹配模式为0x07，因为plain_indexes.hosts包含example.com，位标识是0x01。plain_indexes.uris包含/foo，位标识是0x02。plain_indexes.methods包含GET，位标识是0x04。把0x01，0x02和0x04通过位或运算得到0x07。  \n   \n&emsp;&emsp;根据0x07从categories里选择key为7的规则。reduce方法等价于:  \n`min(#categories[7].apis_by_hosts[example.com], #categories[7].apis_by_uris[/foo], #categories[7].apis_by_methods[GET])`  \n&emsp;&emsp;#号是取数组的长度。此处这3个数组的长度都是1，所以优先选择apis_by_hosts中的api_t规则进行匹配。  api_t里面的hosts、uris和methods匹配上了这个请求，此次匹配成功。  \n\n## Balancer\n\n### 概览\n&emsp;&emsp;Balancer对请求做负载均衡，使请求分散地转发到后端服务。从而可以优化资源利用率、提升吞吐量、减少延时以及提高容错等。Kong使用了DNS-Balancer和Ring-Balancer两种均衡模式。DNS-Balancer适合对外部的第三方服务进行负载均衡。候选服务器列表添加在A记录或SRV记录中。A记录中只包含IP地址，而且没有权重信息，适合简单的round-robin。SRV记录中包含IP地址和端口，并含有权重信息，可以按权重调拨流量以及IP地址复用。Ring-Balancer适合对内部服务进行负载运行。因为这种模式的控制性强，可以灵活地支持机器上下线操作、带权重的负载均衡以及可以进行蓝绿部署和金丝雀发布。本章着重分析Ring模式。  \n\n### Ring-Balancer\n&emsp;&emsp;在Kong里面，Ring-Balancer通过upstream和target对象描述。upstream对象用于调节负载均衡的行为，如权重分配、健康检查以及是否通过一致性hash绑定请求到对应的机器上。target存储进行负载均衡的机器列表。  \n\n&emsp;&emsp;upstream对象数据库表结构描述如下：  \n\n{% codeblock lang:SQL %}\nCREATE TABLE upstreams (\n  id varchar(64) NOT NULL,\n  name varchar(255) DEFAULT NULL,\n  \n  -- 槽位大小，用于调节权重\n  slots int(11) NOT NULL,\n  -- json格式存储的健康检查配置\n  healthchecks varchar(10000) DEFAULT NULL,\n  -- 首选hash输入值：none,consumer,ip,header\n  hash_on varchar(31) DEFAULT NULL,\n  -- 此选hash输入值\n  hash_fallback varchar(31) DEFAULT NULL,\n  -- 根据http header进行hash时，首选的header\n  hash_on_header varchar(255) DEFAULT NULL,\n  -- 此选的header\n  hash_fallback_header varchar(255) DEFAULT NULL,\n  \n  created_at timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n  PRIMARY KEY (id),\n  UNIQUE KEY name (name),\n  KEY upstreams_name_idx (name)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;\n{% endcodeblock %} \n\n&emsp;&emsp;target对象数据库表结构描述如下：  \n\n{% codeblock lang:SQL %}\nCREATE TABLE targets (\n  id varchar(64) NOT NULL,\n  \n  -- ip:port\n  target varchar(500) NOT NULL,\n  -- 权重值\n  weight int(11) NOT NULL,\n  -- 所属upstream\n  upstream_id varchar(64) DEFAULT NULL,\n  \n  created_at timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n  PRIMARY KEY (id),\n  KEY tragets_upstreamid_fk (upstream_id),\n  KEY targets_target_idx (target),\n  CONSTRAINT tragets_upstreamid_fk FOREIGN KEY (upstream_id) REFERENCES upstreams (id) ON DELETE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;\n{% endcodeblock %} \n\n#### 构造balancer\n\n&emsp;&emsp;Ring-Balancer的初始化发生在nginx工作进程的初始化阶段中，init_worker_by_lua_block指令块的kong.init_worker()方法里，见[nginx-kong.conf:30](https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L30)。init_worker里面调用了balancer.init()方法做了实际的初始化工作。  \n\n&emsp;&emsp;balancer.init首先使用get_all_upstreams方法从数据库upstreams表加载所有数据到缓存中。调用create_balancer方法对每个查询出来的upstream对象，创建一个负载均衡器ring_balancer。均衡器的实现在resty.dns.balancer模块中，这个模块在Kong的lua-resty-dns-client项目里，代码见[github](https://github.com/Kong/lua-resty-dns-client)，文档见[resty.dns.balancer](https://kong.github.io/lua-resty-dns-client/modules/resty.dns.balancer.html)。  \n\n&emsp;&emsp;均衡器初始化使用了3个参数：wheelSize,order和dns，见[balancer.lua:295](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L295)。在0.12.1版本中，实际使用的就wheelSize这一个参数。如果wheelSize越大，目标机器的分布就越离散。这样在选择的时候既可以保证权重，连续选到相同的机器的概率也比较小。当然wheelSize越大，占用的内存就越多，重建的开销比较大。可以根据后端机器的数量选择的一个值，它的默认值是1000。  \n\n#### 加载target\n&emsp;&emsp;fetch_target_history方法会从key为balancer:targets:${upstreamId}的缓存中选择upstream下面的target，如果缓存中没有就调用load_targets_into_memory方法从数据库中查询出来再放入缓存。  \n&emsp;&emsp;Kong的api没有对target按ip和端口进行修改的操作。(这是因为如果只是做添加操作的话，可以不重建balancer，减少开销，见[balancer.lua:364](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L364)。但是在check_target_history方法中有一个bug，导致即使只是添加target，还是会重建balancer，bug见[balancer.lua:357](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L357)，这里把old_history和new_history写反了。)  \n&emsp;&emsp;由于只做添加，数据库表targets中可能会出现多条target相同的数据(ip和port相同)，但是权重是不同的数据。如果出现这种情况该决定使用哪个target记录呢?fetch_target_history方法会对查询出来的target记录按创建时间进行从老到新的排序，见[balancer.lua:116](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L116)。之后apply_history方法会按这个顺序把target添加到均衡器ring_balancer中，如果ip和端口相同，ring_balancer中后添加的记录会覆盖之前的，见[balancer.lua:314](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L314)。 \n\n&emsp;&emsp;无论是Ring-Balancer或DNS-Balancer，都是使用resty.dns.balancer这个负载均衡器做的负载均衡。这是因为在调用resty.dns.balancer的addHost方式时。如果hostname传的是域名的话，会做dns解析，把解析出来的节点添加进去。但如果hostname是ip地址的话，直接把添加参数所表示的节点。文档见[addHost](https://kong.github.io/lua-resty-dns-client/modules/resty.dns.balancer.html#addHost)\n\n#### target健康检查\n&emsp;&emsp;create_healthchecker方法为每个负载均衡器ring_balancer添加健康检查。\n健康检查的实现在resty.healthcheck模块中，这个模块在Kong的lua-resty-healthcheck项目里，代码见[github](https://github.com/Kong/lua-resty-healthcheck)，文档见[resty.healthcheck](https://kong.github.io/lua-resty-healthcheck/modules/resty.healthcheck.html)。\n&emsp;&emsp;create_healthchecker使用如下代码构造健康检查器：  \n\n{% codeblock lang:lua %}\nlocal healthchecker, err = healthcheck.new({\n   name = upstream.name,\n   shm_name = \"kong_healthchecks\",\n   checks = upstream.healthchecks,\n })\n{% endcodeblock %} \n\n&emsp;&emsp;shm_name传递的是lua-resty-healthcheck需要的nginx中的共享内存名，用于存储当前哪些节点的失败或成功次数。定义见[nginx-conf:21](https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L21)。\n\n&emsp;&emsp;checks传递的是健康检查的json配置。健康检查有主动检查和被动检查2种。  \n   \n&emsp;&emsp;主动检查需要设置检查url、超时时间、检查间隔、失败判断码、失败判断次数、成功判断码、成功判断次数、超时判断次数等。  \n&emsp;&emsp;kong默认的主动检查配置如下(这个配置不会启用主动检查，因为tcp_failures、timeouts、http_failures、interval和successes都被设成了0)：\n\n{% codeblock lang:json %}\n\"active\":{\n    \"unhealthy\":{\n        \"http_statuses\":[\n            429,\n            404,\n            500,\n            501,\n            502,\n            503,\n            504,\n            505\n        ],\n        \"tcp_failures\":0,\n        \"timeouts\":0,\n        \"http_failures\":0,\n        \"interval\":0\n    },\n    \"http_path\":\"/\",\n    \"timeout\":1,\n    \"healthy\":{\n        \"http_statuses\":[\n            200,\n            302\n        ],\n        \"interval\":0,\n        \"successes\":0\n    },\n    \"concurrency\":10\n}\n{% endcodeblock %} \n\n&emsp;&emsp;kong会根据配置定期对后端服务节点机器调用检查url进行检查，如果检查超时或HTTP返回码满足失败条件的次数超过限制，负载均衡器会把该节点标记为不可用。 \n\n&emsp;&emsp;被动检查需要设置失败判断码、失败判断次数、成功判断码、成功判断次数、超时判断次数等。  \n&emsp;&emsp;kong默认的被动检查配置如下(这个配置不会启用被动检查，因为tcp_failures、timeouts、http_failures和successes都被设成了0)：  \n\n{% codeblock lang:json %}\n\"passive\":{\n    \"unhealthy\":{\n        \"http_failures\":0,\n        \"http_statuses\":[\n            429,\n            500,\n            503\n        ],\n        \"tcp_failures\":0,\n        \"timeouts\":0\n    },\n    \"healthy\":{\n        \"http_statuses\":[\n            200,\n            201,\n            202,\n            203,\n            204,\n            205,\n            206,\n            207,\n            208,\n            226,\n            300,\n            301,\n            302,\n            303,\n            304,\n            305,\n            306,\n            307,\n            308\n        ],\n        \"successes\":0\n    }\n}\n{% endcodeblock %} \n\n&emsp;&emsp;kong在跟后端机器进行通信的过程中，判断其返回码，有无超时。然后根据配置决定是否对节点进行标记。     \n\n&emsp;&emsp;由于被动检查的操作是在负载均衡器里面进行，attach_healthchecker_to_balancer里面对负载均衡器设置了report_http_status和report_tcp_failure方法，这2个方法会在转发请求的时候被调用，把请求结果通知给健康检查器，见[balancer.lua:249](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L249)。\n&emsp;&emsp;这里要注意下如果被动检查把一个节点标记为不可用的话，即使该节点已经恢复了，kong也不会自动地把该节点添加进balancer中。需要用户手动调用一个管理接口进行恢复，见[文档](https://getkong.org/docs/0.12.x/health-checks-circuit-breakers/#passive-health-checks-circuit-breakers)。  \n\n&emsp;&emsp;构造完健康检查器后，调用populate_healthchecker方法把负载均衡器中节点添加到健康检查器中。然后调用attach_healthchecker_to_balancer监听健康检查器的事件：healthchecker.events.healthy和healthchecker.events.unhealthy，并设置回调方法。回调方法就是根据健康检查器的事件类型，在负载均衡器中把后端节点标记为可用或不可用，见[balancer.lua:229](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L229)。 \n\n#### 选择target\n&emsp;&emsp;当请求匹配出一条路由规则之后，就会在该规则下面的target中选一个目标实例进行转发。目标实例的选择发生在kong.access()的后置handler中，调用balancer.execute方式进行选择。target的选择全权委托给了resty.dns.balancer对象，见[balancer.lua:689](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L689)。  \n&emsp;&emsp;选择target的算法是带权重的round-robins。普通的round-robins算法把所有候选的target放入一个数组中，确定一个数组的起始元素(一般取第一个)。之后每次选择的时候按顺序往后选一个，到末尾时再从头开始遍历。带权重的round-robins算法相似，也是遍历数组。只不过数组的大小会远远超过target的数量，resty.dns.balancer初始化的时候wheelSize就是指定这个数组的大小。wheelSize和每个target的权重值确定一个target在数组中分配的数量，然后随机选择数组的位置进行放入。\n\n## 集群间数据同步\n\n### 概览\n&emsp;&emsp;kong的代码运行于nginx的worker进程中。kong对数据的修改会在一个worker中进行，数据被修改后需要通知给本地的其他worker进程和其他机器上的worker进程。kong使用的进程间通信主要方式有：1. 本机间通信-共享内存 2. 跨机器通信-数据库。  \n\n### 数据共享\n&emsp;&emsp;kong的数据存储在数据库中，同时在缓存中保留一份。当数据库的中的数据被修改时，需要发出相应的事件通知其他worker。其他worker接收事件后，删除缓存中对应的数据。下次从缓存读数据时发现没有的话，就从数据库加载出来。  \n&emsp;&emsp;事件分为本地事件和集群事件。本地事件用于通知在一台机器上的worker，集群事件用于通知在多台机器上的worker。\n\n#### 共享内存\n&emsp;&emsp;本地事件通过共享内存实现。kong实现了一套基于nginx共享内存的事件发布-订阅机制，源码见仓库[lua-resty-worker-events](https://github.com/Kong/lua-resty-worker-events)。该包提供post_local方法在worker进程内进行事件发布，提供post方法在同属于一台机器上的worker进程间进行事件发布。这2个方法需要指定source和event来确定事件源。  \n&emsp;&emsp;kong的数据访问层[dao.lua](https://github.com/Kong/kong/blob/0.12.1/kong/dao/dao.lua)封装了insert、update和delete三个对数据操作的方法。这三个方法分别会使用post_local发出source为dao:crud，event为insert、delete、update的数据增、删、改的事件。事件的数据格式如下:  \n\n{% codeblock lang:lua %}\n{\n   schema    = self.schema, --表名\n   operation = \"create\", --操作类型\n   entity    = res, --数据\n}\n{% endcodeblock %} \n\n&emsp;&emsp;worker进程启动的时候会在init_worker阶段注册这些事件的订阅方法，见[handler.lua:97](https://github.com/Kong/kong/blob/0.12.1/kong/core/handler.lua#L97)。订阅方法中把所有的dao:crud事件按表名称使用post_local再进行分发。所以从dao:crud分发的事件如下:  \n- source=crud, event=apis  \n这个事件会通知所有的worker(包含不同机器)apis数据的修改。这里对缓存中对key为router:version进行invalidate操作会发送一条channel=invalidations集群事件。  \n- source=crud, event=targets  \n这个事件会通知所有的worker(包含不同机器)targets数据的修改。使用cluster_events:broadcast方法发送一条channel=balancer:targets集群事件。\n- source=crud, event=upstreams  \n这个事件会通知所有的worker(包含不同机器)upstreams数据的修改。使用cluster_events:broadcast方法发送一条channel=balancer:upstreams集群事件。\n\n#### 数据库\n\n&emsp;&emsp;集群事件通过数据库实现。数据库表cluster_events存放用于集群间分发的事件。cluster_events表结构如下:  \n\n{% codeblock lang:SQL %}\nCREATE TABLE cluster_events (\n  id varchar(64) NOT NULL,\n  -- 标识生成事件的节点id\n  node_id varchar(64) NOT NULL,\n  -- 事件产生时间，精确到毫秒 \n  at timestamp(3) NOT NULL,\n  -- 事件生效时间，精确到毫秒\n  nbf timestamp(3) NULL DEFAULT NULL,\n  -- 事件过期时间，精确到毫秒\n  expire_at timestamp(3) NOT NULL,\n  -- 事件类型\n  channel varchar(1023) DEFAULT NULL,\n  -- 事件数据\n  data varchar(10000) DEFAULT NULL,\n  \n  PRIMARY KEY (id),\n  KEY cluster_events_at_idx (at),\n  KEY cluster_events_channelt_idx (channel)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;\n{% endcodeblock %} \n\nchannel的类型有:  \n- invalidations  \n表示路由规则、插件配置的变更\n- balancer:targets  \n表示负载均衡的targets列表发生变更\n- balancer:upstreams  \n表示upstream对象发生变更\n- balancer:post_health  \n表示target的健康状态发生变更。由于被动健康检查拉出实例后，kong不会在对该实例进行自动拉入，需要通过该事件来拉入实例。  \n\n&emsp;&emsp;调用cluster_events:broadcast方法会往cluster_events表中新增一条记录。在init_worker阶段通过调用cluster_events:subscribe会开启一个定时器，定时查询出cluster_events表中新增的记录。这里要注意的是同一台机器上只会有一个worker进程会对数据库进行查询(通过加锁实现，代码见[cluster_events:303](https://github.com/Kong/kong/blob/0.12.1/kong/cluster_events.lua#L303))，查询出来后再通过共享内存的方式通知给这台机器上的其他worker。  \n&emsp;&emsp;配置参数db_update_frequency确定查询数据库的间隔，默认为5秒。数据范围根据at字段是否落在(起始时间, 结束时间]确定。起始时间第一次设置在init_worker阶段，调用ngx.now()获取当前时间(精确到毫秒)并放入key为cluster_events:at的共享内存中。之后抢到锁的worker会从共享内存中取出该时间，该时间需要减去db_update_propagation + 0.001来确定起始时间，以防止事件丢失。配置参数db_update_propagation默认为0。结束时间取ngx.now()的值。查询成功后会把结束时间覆盖之前的起始时间，并把该事件分发到本机的其他worker。对于设置了nbf的事件，kong如果发现还没到生效时间，就会通过ngx.timer设置一个定时器延后分发该事件。  \n\n## Plugin\n\n### 概览\n&emsp;&emsp;kong的插件可以在不修改kong本身源码的情况下方便地添加一些功能。插件不仅可以处理请求，还可以定义API，操作数据库。kong本身提供了许多插件，支持鉴权认证、安全控制、流量调控和请求报文转换等。见[plugins list](https://konghq.com/plugins/)   \n\n### 执行原理\n&emsp;&emsp;每个插件都需要放置在plugins目录下。这里有个[base_plugin.lua](https://github.com/Kong/kong/blob/0.12.1/kong/plugins/base_plugin.lua)文件，定义了一个每个插件都需要去继承的基类。该基类定义了一些每个子类都需要去实现的方法，kong在每个执行阶段会调用。插件需要定义一个handler.lua文件，在这个文件里面去实现子类。此外还需要定义一个schema.lua文件，在这里定义每个插件的配置数据。    \n&emsp;&emsp;在nginx的master启动阶段，会扫描plugins目录下面的所有插件，加载handler.lua和schema.lua中定义的模块，见[kong/init.lua:78](https://github.com/Kong/kong/blob/0.12.1/kong/init.lua#L78)。  \n&emsp;&emsp;数据库中的plugins表定义了需要启用的插件。只有在这张表里面存在的插件，并且是开启状态的才会被使用。  \n&emsp;&emsp;插件还可以定义一个api.lua文件，用于暴露一些api接口。如oauth2插件。kong在nginx的配置文件里面开启了8001端口，所有的管理api都暴露在这个端口上。它会调用kong/init.lua中的serve_admin_api方法，使用lapis模块加载api/routes/init.lua，初始化管理接口。这里也会加载插件的api.lua，加载插件的接口，见[api/init.lua:158](https://github.com/Kong/kong/blob/0.12.1/kong/api/init.lua#L158)。  \n&emsp;&emsp;在每个请求的执行阶段，都会先执行kong的前置处理方法，然后遍历所有启用的插件执行每个阶段对应的方法。如果读者看过base_plugin的文件话会发现基本上所有的方法都会传一个conf参数。这个就是在plugins表中定义的每个插件需要用到的配置。遍历插件的时候会从缓存里面加载插件配置，如果缓存失效就会从数据里面重新加载一遍。我们可以触发invalidations集群事件来动态的更新插件配置。见[core/plugins_iterator.lua](https://github.com/Kong/kong/blob/0.12.1/kong/core/plugins_iterator.lua)。","source":"_posts/20180416.md","raw":"---\ntitle: kong源码导读\ndate: 2018-04-16 15:24:37\ntags: [API网关,nginx,openresty,kong,lua]\ncategories: 技术文章\nauthor: 张轶丛\n---\n## 概览\n&emsp;&emsp;kong是一个基于nginx和OpenResty模块构建的API网关服务。提供http请求路由，后端服务负载均衡以及通过丰富的插件提供认证鉴权、流量调控、日志监控等功能。该网关目前应用在全球著名的API管理站点[mashape](https://market.mashape.com/explore?page=1)上。  \n&emsp;&emsp;nginx是一个采用异步I/O，事件驱动的高性能Web服务器，也可以作为在企业内部提供基于http rpc的反向代理和负载均衡器。由于nginx的配置都是以静态文件的方式提供，而且nginx一般都是多台部署，导致nginx的运维管理变得比较复杂。许多运维的小伙伴都会写一些运维脚本，自动通过ssh命令远程连接到服务器去做一些配置更新的操作。  \n&emsp;&emsp;笔者所在公司也开发过一个基于nginx的软负载中心。用户可以在平台上为自己的服务配置反向代理以及负载均衡策略。用户所有的操作都会打包成一次对nginx配置的修改。修改指令会发送到每台nginx部署的一个agent上，最后由agent完成nginx配置文件的更新。  \n&emsp;&emsp;这些方法虽然可以达到自动化的管理nginx，但是本质上还是通过配置文件的方式去改变nginx的一些固定行为。在企业里面，特别是互联网公司常常需要定制一些功能。虽然可以为nginx开发一些模块，但是门槛较高，需要对nginx源码级的掌握。OpenResty为nginx引入的LuaJIT和lua-nginx-module，使我们可以在nginx的各个执行阶段编写一些lua脚本，极大地扩展了nginx的功能。OpenResty的作者已经用lua开发了许多工具库，使得我们可以在nginx中访问MySQL、Memcached、Redis。kong在此基础上实现了一个API网关服务。\n\n<!--more-->\n\n## 导读\n\n### 如何阅读源码\n&emsp;&emsp;想必看这边文章的许多朋友之前对nginx都略有了解，但是可能是头一次接触lua语言，笔者当时也是头一次。这种情况笔者一般不会一上来就去阅读源码，而是先阅读下官方文档，把环境搭建起来之后试用下功能，然后看下日志。这样会对这个系统有个整体的感觉，之后就可以去翻翻源码了。笔者所使用的编辑器是IntelljIDEA，它可以自动识别出lua语言，然后提示你去下载支持该语言的插件，很是方便。笔者全程是在ubuntu环境下开发的，使用linux系统的好处是改完代码后执行下make命令，然后reload下nginx就可以看到效果。使用windows的童鞋建议装个linux的虚拟机。由于调试kong比较麻烦，所以笔者都是通过加日志的方式学习代码的。选取一些关键的流程打印一些数据会对源码的学习起到事半功倍的效果。有时候在troubleshooting的时候更加需要打印许多日志才能把问题定位到。  \n&emsp;&emsp;笔者使用的kong的版本为0.12.1\n\n### 如何使用该文档\n&emsp;&emsp;本文档作为源码导读，在阅读本文档时手头最好有一份kong的源码以便随时进入源码深入阅读。读者不必从头到尾进行通读，可以根据目录选择自己感兴趣的章节进行阅读。\n\n### 源码结构\n|-- kong  \n&emsp;&emsp;|-- api [admin管理接口的代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...   \n&emsp;&emsp;|-- cluster_events [集群事件的数据访问层代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- cmd [kong命令行的代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- core [请求处理、路由、负载均衡等核心代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- dao [数据库访问层代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- plugins [插件的代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- templates [nginx配置文件模板]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- tools [工具类代码]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- vendor [这里提供了用于lua面向对象编程的基类]  \n&emsp;&emsp;&emsp;&emsp;|-- ...  \n&emsp;&emsp;|-- cache.lua [缓存实现类，封装了mlcache]  \n&emsp;&emsp;|-- cluster_events.lua [集群事件同步代码]  \n&emsp;&emsp;|-- conf_loader.lua [配置加载]  \n&emsp;&emsp;|-- constants.lua [常量定义]  \n&emsp;&emsp;|-- init.lua [kong的入口，可以从这里开始阅读代码]  \n&emsp;&emsp;|-- meta.lua [定义版本号之类]  \n&emsp;&emsp;|-- mlcache.lua [封装了lua-resty-mlcache]  \n&emsp;&emsp;|-- singletons.lua [单例模式，存放公共对象]  \n\n### 执行入口\n&emsp;&emsp;以下是kong的nginx配置文件，笔者把一些和本章主题无关的先去掉了。  \n\n{% codeblock lang:lua %}\ninit_by_lua_block {\n    kong = require 'kong'\n    kong.init()\n}\ninit_worker_by_lua_block {\n    kong.init_worker()\n}\nupstream kong_upstream {\n    server 0.0.0.1;\n    balancer_by_lua_block {\n        kong.balancer()\n    }\n    keepalive 60;\n}\nserver {\n    server_name kong;\n    listen 0.0.0.0:8000;\n    location / {     \n        rewrite_by_lua_block {\n            kong.rewrite()\n        }\n        access_by_lua_block {\n            kong.access()\n        }\n        header_filter_by_lua_block {\n            kong.header_filter()\n        }\n        body_filter_by_lua_block {\n            kong.body_filter()\n        }\n        log_by_lua_block {\n            kong.log()\n        }\n    }\n    location = /kong_error_handler {\n        internal;\n        content_by_lua_block {\n            kong.handle_error()\n        }\n    }\n}\n{% endcodeblock %}\n\n&emsp;&emsp;可以看到kong的代码执行入口在init_by_lua_block块中，该块中的代码会在nginx的master加载配置的时候被执行。通过require 'kong'得到的实例是一个全局对象，在Lua虚拟机里面执行的代码都可以访问到。\n该实例通过master的fork进程方法共享给worker，如果worker修改该实例会触发操作系统进程的copy-on-write，worker进程就会拥有该实例的一个副本。  \n&emsp;&emsp;后缀是by_lua_block的都代表nginx处理请求的一个执行阶段，每个阶段都会执行相应的kong代码。nginx执行阶段流程如下如所示:  \n\n![](20180416/openresty_phases.png)\n\n- init_by_lua*  \n&emsp;&emsp;发生在master进程启动阶段。这里会对数据访问层进行初始化，加载插件的代码，构造路由规则表。  \n- init_worker_by_lua*  \n&emsp;&emsp;发生在worker进程启动阶段。这里会开启数据同步机制，执行每个插件的init_worker方法。  \n- set_by_lua*  \n&emsp;&emsp;处理请求第一个执行阶段。这里可以做一些流程分支处理判断变量初始化。kong没有使用该阶段。\n- rewrite_by_lua*  \n&emsp;&emsp;这里可以对请求做一些修改。kong在这里会把处理代理给插件的rewrite方法。  \n- access_by_lua*  \n&emsp;&emsp;kong在这里对请求进行路由匹配，找到后端的upstream服务的节点。  \n- balancer_by_lua*  \n&emsp;&emsp;kong在这里会把上一阶段找到的服务节点设置给nginx的load balancer。如果设置了重试次数，此阶段可能会被执行多次。  \n- header_filter_by_lua*  \n&emsp;&emsp;这里可以对响应头做一些处理。kong在这里会把处理代理给插件的header_filter方法。  \n- body_filter_by_lua*  \n&emsp;&emsp;这里可以对响应体做一些处理。kong在这里会把处理代理给插件的body_filter方法。  \n- log_by_lua*  \n&emsp;&emsp;kong在这里会通过插件异步记录日志和一些metrics数据。  \n\n### 核心模块\n&emsp;&emsp;kong有三大核心模块：请求路由(Router)、负载均衡(Balancer)和集群数据同步。这3个模块加上插件就组成了kong的所有功能。\n&emsp;&emsp;路由和负载均衡模块完全接管了nginx本身的策略，也是作为一个网关的核心功能。集群数据同步则弥补了nginx集群管理的缺点，可以使得路由规则和负载均衡策略的修改可以动态进行，省去了修改配置文件和重启的流程。       \n        \n## Router\n\n### 概览\n&emsp;&emsp;路由是Kong的核心功能之一。Kong会代理HTTP请求，根据HTTP主机头、请求URI和请求方式(GET/POST等)匹配路由规则，找到实际处理请求的后端服务。\n\n&emsp;&emsp;Kong的路由规则由HTTP主机头、请求URI和请求方式组成。规则匹配发生在Nginx的Rewrite/Access阶段中，access_by_lua_block指令块里面的kong.access()方法的前置handler中。见[kong-nginx.conf:85](https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L85)  \n\n&emsp;&emsp;路由规则的原始数据存储在数据库apis表中。HTTP主机头由表字段hosts描述、请求URI由表字段uris描述、请求方式由表字段methods描述。在MySQL中，这3个字段的数据存储格式都是JSON序列化之后字符串数组。apis的表结构描述如下： \n \n{% codeblock lang:SQL %}\nCREATE TABLE `apis` (\n  -- guid\n  `id` varchar(64) NOT NULL,\n  -- 名称\n  `name` varchar(255) NOT NULL,\n  -- upstream标识\n  `upstream_url` varchar(1023) NOT NULL,\n  -- 是否保留主机头\n  `preserve_host` tinyint(1) NOT NULL,\n  -- 主机头匹配\n  `hosts` varchar(1023) DEFAULT NULL,\n  -- uri匹配\n  `uris` varchar(1023) DEFAULT NULL,\n  -- 请求方法匹配\n  `methods` varchar(1023) DEFAULT NULL,\n  -- 是否只接受https的请求\n  `https_only` tinyint(1) DEFAULT '0',\n  -- 如果接受https的请求并且客户端IP不在授信IP中，是否终止请求\n  `http_if_terminated` tinyint(1) DEFAULT '0',\n  -- 由于链路问题(connection timeouts, connection resets等或者5xx错误)导致请求转发失败重试次数\n  `retries` smallint(6) DEFAULT '5',\n  -- 如果是uri前缀匹配，是否剥离掉uri前缀\n  `strip_uri` tinyint(1) DEFAULT '1',\n  -- 一些超时时间\n  `upstream_connect_timeout` int(11) DEFAULT '60000',\n  `upstream_send_timeout` int(11) DEFAULT '60000',\n  `upstream_read_timeout` int(11) DEFAULT '60000',\n  `created_at` timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `name` (`name`),\n  KEY `apis_name_idx` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;\n{% endcodeblock %}\n\n&emsp;&emsp;路由规则的创建在Nginx的初始化阶段，init_by_lua_block指令块中的kong.init()方法里。见[kong-nginx.conf:26](https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L26)  \n\n&emsp;&emsp;在kong.init()的末尾调用core.build_router(dao, \"init\")方法构造路由表。见[init.lua:174](https://github.com/Kong/kong/blob/master/kong/init.lua#L174)。  \n\n&emsp;&emsp;build_router方法的第一个参数是一个数据库操作对象，会使用它查询出数据库apis表中的数据。第二个参数是一个路由表在缓存中的版本号。如果apis表的数据发生变化，会触发缓存的invalidate操作，生成出一个新的version。此时在kong.access()方法中会再次调用build_router对路由表进行重建。见[handler.lua:336](https://github.com/Kong/kong/blob/master/kong/core/handler.lua#L336)。  \n\n&emsp;&emsp;build_router会对从apis表中查询出来的数据按创建时间created_at从小到大进行排序。见[handler.lua:54](https://github.com/Kong/kong/blob/master/kong/core/handler.lua#L54)。这样如果2条规则相同的话较早的规则会优先匹配。接着会构造一个Router对象，它会负责路由表的创建、路由规则的匹配操作。  \n\n### 生成规则\n\n&emsp;&emsp;Router对象的第一个核心功能就是把数据库中的apis数据转化为适合进行匹配的规则。规则类型有3种：HOST、URI和METHOD，见[router.lua:56](https://github.com/Kong/kong/blob/master/kong/core/router.lua#L56)。这3种类型分别由位标识0x01、0x02和0x04表示。3种类型组成7种匹配方式：  \n+ HOST and URI and METHOD，位标识为(0x01 | 0x02 | 0x04) == 0x07\n+ HOST and URI，位标识为(0x01 | 0x02) == 0x03\n+ HOST and METHOD，位标识为(0x01 | 0x04) == 0x05\n+ METHOD and URI，位标识为(0x04 | 0x02) == 0x06\n+ HOST，位标识为0x01\n+ URI，位标识为0x02\n+ METHOD， 位标识为0x04  \n\n&emsp;&emsp;创建规则前会先把数据库里存储的apis对象格式化成api_t对象，api_t格式如下：  \n\n{% codeblock lang:lua %}\napi_t      = {\n    -- 数据库里面的apis对象\n    api            = api,\n    -- 是否对URI按前缀进行剥离\n    strip_uri      = api.strip_uri,\n    -- 请求转发的时候是否保留原始主机头\n    preserve_host  = api.preserve_host,\n    -- 7种匹配方式的位标识\n    match_rules    = 0x00,\n    -- 主机头匹配规则，当作数组使用\n    hosts          = {},\n    -- uri匹配规则，当作数组使用\n    uris           = {},\n    -- method匹配规则，当作词典使用\n    methods        = {},\n    -- upstream信息\n    upstream_url_t = {},\n  }\n{% endcodeblock %}\n\n&emsp;&emsp;如果主机头匹配里面包含通配符，如：*.example.com，则把通配表达式转成正则表达式：.+\\\\\\\\.example\\\\\\\\.com$，然后hosts字段里面存储的对象格式为： \n \n{% codeblock lang:lua %}\n{\n    wildcard = true,\n    value    = '*.example.com',\n    regex    = '.+\\\\.example\\\\.com$',\n}\n{% endcodeblock %}\n\n&emsp;&emsp;如果主机头匹配里面是普通的字符串，如：abc.example.com，那么hosts字段里面存储的对象格式为：  \n\n{% codeblock lang:lua %}\n{\n    value    = abc.example.com,\n}\n{% endcodeblock %}\n\n&emsp;&emsp;使用正则表达式：^[a-zA-Z0-9\\.\\-_~/%]*$ 判断uri匹配是否是一个普通的uri前缀。如果是，如：/prefix/some，则uris字段里面存储的对象格式为：\n\n{% codeblock lang:lua %}\n{\n    is_prefix = true,\n    value    = '/prefix/some',\n}\n{% endcodeblock %} \n\n&emsp;&emsp;如果uri匹配是包含正则字符串，如：/users/\\d+/profile，则uris字段里面存储的对象格式为：  \n\n{% codeblock lang:lua %}\n{\n    is_regex     = true,\n    value        = '/users/\\d+/profile',\n    regex        = '/users/\\d+/profile',\n    has_captures = false,\n    strip_regex  = '/users/\\d+/profile/?(?<stripped_uri>.*)',\n}\n{% endcodeblock %}  \n\n&emsp;&emsp;如果method匹配是get方式，则会把get转成大写，如：GET，以此作为key放入methods词典中。\n\n&emsp;&emsp;使用一个词典数据结构categories对api_t对象以7种匹配方式进行归类。词典的key为7种匹配方式的位标识：0x01、0x02、0x03、0x04、0x05、0x06、0x07，value里面会按host、uri和method对规则进行分组。value定义如下：  \n\n{% codeblock lang:lua %}\n{\n    -- 按host分组的规则，词典类型\n    apis_by_hosts   = {},\n    -- 按uri分组的规则，词典类型\n    apis_by_uris    = {},\n    -- 按method分组的规则，词典类型\n    apis_by_methods = {},\n    -- 该匹配模式下所有规则，数组类型\n    all             = {},\n}\n{% endcodeblock %} \n\n&emsp;&emsp;如果一个匹配规则是hosts=[abc.com]、uris=[/path]、method=[GET]，那么categories会包含此规则的api_t对象。如下所示：  \n\n{% codeblock lang:lua %}\n{\n    7 = {\n      apis_by_hosts   = {\n        abc.com = [api_t对象]\n        },\n      apis_by_uris    = {\n        /path = [api_t对象]\n        },\n      apis_by_methods = {\n        GET = [api_t对象]\n        },\n      all             = [api_t对象],  \n    }\n}\n{% endcodeblock %} \n\n&emsp;&emsp;如果另一个匹配规则是hosts=[abc.com]、uris=[/version]，那么categories会包含此规则的api_t对象2。如下所示：  \n\n{% codeblock lang:lua %}\n{\n    3 = {\n      apis_by_hosts   = {\n        abc.com = [api_t对象2]\n        },\n      apis_by_uris    = {\n        /version = [api_t对象2]\n        },\n      all             = [api_t对象2],  \n    },\n    7 = {\n      apis_by_hosts   = {\n        abc.com = [api_t对象]\n        },\n      apis_by_uris    = {\n        /path = [api_t对象]\n        },\n      apis_by_methods = {\n        GET = [api_t对象]\n        },\n      all             = [api_t对象],  \n    }\n}\n{% endcodeblock %} \n\n&emsp;&emsp;另外使用一个词典数据结构plain_indexes和3个数组结构uris_prefixes、uris_regexes、和wildcard_hosts决定优先使用哪种匹配模式。它们的创建方式见[router.lua:252](https://github.com/Kong/kong/blob/master/kong/core/router.lua#L252)。首先会使用plain_indexes匹配主机头、uri和请求方法，因为它的构造是一个词典结构，可直接根据主机头、uri和请求方法进行查询，效率比较高。plain_indexes的内容如下： \n  \n{% codeblock lang:lua %}\n{\n    hosts = {\n      abc.com   = true,\n    },\n    uris = {\n      /foo = true,\n    },\n    methods = {\n     GET = true\n    }\n}\n{% endcodeblock %}  \n\n&emsp;&emsp;如果在plain_indexes里面没有查询到的话，则使用uris_prefixes、uris_regexes、和wildcard_hosts里面的规则一个一个进行匹配，直到匹配成功为止。\n\n### 匹配流程\n\n&emsp;&emsp;规则的匹配在kong.access方法里面，调用router.exec方法进行匹配。见[handler.lua:354](https://github.com/Kong/kong/blob/master/kong/core/handler.lua#L354)。  \n\n&emsp;&emsp;router.exec方法从http请求里面获取主机头信息、HTTP请求方法和请求URI。然后调用find_api方法进行实际地匹配。见[router.lua:594](https://github.com/Kong/kong/blob/master/kong/core/router.lua#L594)。   \n\n&emsp;&emsp;find_api首先从缓存里面查询匹配结果。如果缓存里面没有数据，则是第一次匹配。先把请求中的主机头放入ctx.req_host，请求uri放入ctx.req_uri，请求方法放入ctx.req_method。然后使用plain_indexes、uris_prefixes、uris_regexes、和wildcard_hosts选择匹配模式。这里如果是根据uri前缀、uri正则表达式或主机头通配符匹配到的话，则会把uri前缀或uri正则表达式放入ctx.hits.uri中，把主机头通配符放入ctx.hits.host中。后续就使用ctx去和规则进行匹配。匹配模式按照CATEGORIES定义的顺序进行降级匹配。如果匹配模式是0x07，则使用0x07里面的规则去匹配。如果匹配失败，则使用0x03的规则进行匹配。如果还是失败，则继续按0x05 -> 0x06 -> 0x01 -> 0x02 -> 0x04的降级顺序进行匹配，直到成功为止。  \n\n&emsp;&emsp;确定匹配模式之后，先使用reduce方法对候选的规则进行筛选。前面说到每一种匹配模式包含的规则会按host、uri和method进行分组。reduce方法就是选取数量最少的那个分组。如果那个分组下的规则匹配失败，则使用all下面的规则进行匹配。  \n\n&emsp;&emsp;现在举例说明。假设现在根据如下json创建了一个apis对象。  \n\n{% codeblock lang:json %}\n{\n    \"name\": \"my-api\",\n    \"upstream_url\": \"http://my-api.com\",\n    \"hosts\": [\"example.com\", \"service.com\"],\n    \"uris\": [\"/foo\", \"/bar\"],\n    \"methods\": [\"GET\"]\n}\n{% endcodeblock %} \n\n&emsp;&emsp;对应的api_t内容是：  \n\n{% codeblock lang:lua %}\napi_t      = {\n    api            = 数据库中的api对象,\n    strip_uri      = false,\n    preserve_host  = false,\n    match_rules    = 0x07,\n    hosts          = [\n                      {\n                                value    = example.com,\n                      },\n                      {\n                                value    = service.com,\n                      }\n    ],\n    uris           = [\n                      {\n                                is_prefix = true,\n                                value    = '/foo',  \n                      },\n                      {\n                                is_prefix = true,\n                                value    = '/bar',  \n                      }\n    ],\n    methods        = {GET = true},\n    upstream_url_t = {\n                         scheme             = http,\n                         host               = my-api.com,\n                         port               = 80,\n    }\n  }\n{% endcodeblock %}  \n\n&emsp;&emsp;categories内容如下：  \n\n{% codeblock lang:lua %}\n{\n    7 = {\n      apis_by_hosts   = {\n        example.com = [api_t],\n        service.com = [api_t]\n        },\n      apis_by_uris    = {\n        /foo = [api_t],\n        /bar = [api_t],\n        },\n      apis_by_methods = {\n        GET = [api_t]\n        },\n      all             = [api_t],  \n    }\n}\n{% endcodeblock %} \n\n&emsp;&emsp;plain_indexes的内容如下：  \n\n{% codeblock lang:lua %}\n{\n    hosts = {\n      example.com   = true,\n      service.com   = true\n    },\n    uris = {\n      /foo = true,\n      /bar = true\n    },\n    methods = {\n     GET = true\n    }\n}\n{% endcodeblock %} \n\n&emsp;&emsp;uris_prefixes的内容如下：  \n\n{% codeblock lang:lua %}\n[\n    {\n      is_prefix = true,\n      value    = '/foo',  \n    },\n    {\n      is_prefix = true,\n      value    = '/bar',  \n    }\n]\n{% endcodeblock %} \n\n&emsp;&emsp;由于host匹配没有通配符以及uri匹配没有正则表达式，所以uris_regexes和wildcard_hosts为空。  \n\n&emsp;&emsp;假设现在有如下请求：  \n\n{% codeblock lang:lua %}\nGET /foo HTTP/1.1\nHost: example.com\n{% endcodeblock %} \n\n&emsp;&emsp;此请求的主机头是example.com，请求uri是/foo，请求方法是GET。首先使用plain_indexes确定匹配模式为0x07，因为plain_indexes.hosts包含example.com，位标识是0x01。plain_indexes.uris包含/foo，位标识是0x02。plain_indexes.methods包含GET，位标识是0x04。把0x01，0x02和0x04通过位或运算得到0x07。  \n   \n&emsp;&emsp;根据0x07从categories里选择key为7的规则。reduce方法等价于:  \n`min(#categories[7].apis_by_hosts[example.com], #categories[7].apis_by_uris[/foo], #categories[7].apis_by_methods[GET])`  \n&emsp;&emsp;#号是取数组的长度。此处这3个数组的长度都是1，所以优先选择apis_by_hosts中的api_t规则进行匹配。  api_t里面的hosts、uris和methods匹配上了这个请求，此次匹配成功。  \n\n## Balancer\n\n### 概览\n&emsp;&emsp;Balancer对请求做负载均衡，使请求分散地转发到后端服务。从而可以优化资源利用率、提升吞吐量、减少延时以及提高容错等。Kong使用了DNS-Balancer和Ring-Balancer两种均衡模式。DNS-Balancer适合对外部的第三方服务进行负载均衡。候选服务器列表添加在A记录或SRV记录中。A记录中只包含IP地址，而且没有权重信息，适合简单的round-robin。SRV记录中包含IP地址和端口，并含有权重信息，可以按权重调拨流量以及IP地址复用。Ring-Balancer适合对内部服务进行负载运行。因为这种模式的控制性强，可以灵活地支持机器上下线操作、带权重的负载均衡以及可以进行蓝绿部署和金丝雀发布。本章着重分析Ring模式。  \n\n### Ring-Balancer\n&emsp;&emsp;在Kong里面，Ring-Balancer通过upstream和target对象描述。upstream对象用于调节负载均衡的行为，如权重分配、健康检查以及是否通过一致性hash绑定请求到对应的机器上。target存储进行负载均衡的机器列表。  \n\n&emsp;&emsp;upstream对象数据库表结构描述如下：  \n\n{% codeblock lang:SQL %}\nCREATE TABLE upstreams (\n  id varchar(64) NOT NULL,\n  name varchar(255) DEFAULT NULL,\n  \n  -- 槽位大小，用于调节权重\n  slots int(11) NOT NULL,\n  -- json格式存储的健康检查配置\n  healthchecks varchar(10000) DEFAULT NULL,\n  -- 首选hash输入值：none,consumer,ip,header\n  hash_on varchar(31) DEFAULT NULL,\n  -- 此选hash输入值\n  hash_fallback varchar(31) DEFAULT NULL,\n  -- 根据http header进行hash时，首选的header\n  hash_on_header varchar(255) DEFAULT NULL,\n  -- 此选的header\n  hash_fallback_header varchar(255) DEFAULT NULL,\n  \n  created_at timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n  PRIMARY KEY (id),\n  UNIQUE KEY name (name),\n  KEY upstreams_name_idx (name)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;\n{% endcodeblock %} \n\n&emsp;&emsp;target对象数据库表结构描述如下：  \n\n{% codeblock lang:SQL %}\nCREATE TABLE targets (\n  id varchar(64) NOT NULL,\n  \n  -- ip:port\n  target varchar(500) NOT NULL,\n  -- 权重值\n  weight int(11) NOT NULL,\n  -- 所属upstream\n  upstream_id varchar(64) DEFAULT NULL,\n  \n  created_at timestamp(3) NOT NULL DEFAULT CURRENT_TIMESTAMP(3),\n  PRIMARY KEY (id),\n  KEY tragets_upstreamid_fk (upstream_id),\n  KEY targets_target_idx (target),\n  CONSTRAINT tragets_upstreamid_fk FOREIGN KEY (upstream_id) REFERENCES upstreams (id) ON DELETE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;\n{% endcodeblock %} \n\n#### 构造balancer\n\n&emsp;&emsp;Ring-Balancer的初始化发生在nginx工作进程的初始化阶段中，init_worker_by_lua_block指令块的kong.init_worker()方法里，见[nginx-kong.conf:30](https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L30)。init_worker里面调用了balancer.init()方法做了实际的初始化工作。  \n\n&emsp;&emsp;balancer.init首先使用get_all_upstreams方法从数据库upstreams表加载所有数据到缓存中。调用create_balancer方法对每个查询出来的upstream对象，创建一个负载均衡器ring_balancer。均衡器的实现在resty.dns.balancer模块中，这个模块在Kong的lua-resty-dns-client项目里，代码见[github](https://github.com/Kong/lua-resty-dns-client)，文档见[resty.dns.balancer](https://kong.github.io/lua-resty-dns-client/modules/resty.dns.balancer.html)。  \n\n&emsp;&emsp;均衡器初始化使用了3个参数：wheelSize,order和dns，见[balancer.lua:295](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L295)。在0.12.1版本中，实际使用的就wheelSize这一个参数。如果wheelSize越大，目标机器的分布就越离散。这样在选择的时候既可以保证权重，连续选到相同的机器的概率也比较小。当然wheelSize越大，占用的内存就越多，重建的开销比较大。可以根据后端机器的数量选择的一个值，它的默认值是1000。  \n\n#### 加载target\n&emsp;&emsp;fetch_target_history方法会从key为balancer:targets:${upstreamId}的缓存中选择upstream下面的target，如果缓存中没有就调用load_targets_into_memory方法从数据库中查询出来再放入缓存。  \n&emsp;&emsp;Kong的api没有对target按ip和端口进行修改的操作。(这是因为如果只是做添加操作的话，可以不重建balancer，减少开销，见[balancer.lua:364](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L364)。但是在check_target_history方法中有一个bug，导致即使只是添加target，还是会重建balancer，bug见[balancer.lua:357](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L357)，这里把old_history和new_history写反了。)  \n&emsp;&emsp;由于只做添加，数据库表targets中可能会出现多条target相同的数据(ip和port相同)，但是权重是不同的数据。如果出现这种情况该决定使用哪个target记录呢?fetch_target_history方法会对查询出来的target记录按创建时间进行从老到新的排序，见[balancer.lua:116](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L116)。之后apply_history方法会按这个顺序把target添加到均衡器ring_balancer中，如果ip和端口相同，ring_balancer中后添加的记录会覆盖之前的，见[balancer.lua:314](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L314)。 \n\n&emsp;&emsp;无论是Ring-Balancer或DNS-Balancer，都是使用resty.dns.balancer这个负载均衡器做的负载均衡。这是因为在调用resty.dns.balancer的addHost方式时。如果hostname传的是域名的话，会做dns解析，把解析出来的节点添加进去。但如果hostname是ip地址的话，直接把添加参数所表示的节点。文档见[addHost](https://kong.github.io/lua-resty-dns-client/modules/resty.dns.balancer.html#addHost)\n\n#### target健康检查\n&emsp;&emsp;create_healthchecker方法为每个负载均衡器ring_balancer添加健康检查。\n健康检查的实现在resty.healthcheck模块中，这个模块在Kong的lua-resty-healthcheck项目里，代码见[github](https://github.com/Kong/lua-resty-healthcheck)，文档见[resty.healthcheck](https://kong.github.io/lua-resty-healthcheck/modules/resty.healthcheck.html)。\n&emsp;&emsp;create_healthchecker使用如下代码构造健康检查器：  \n\n{% codeblock lang:lua %}\nlocal healthchecker, err = healthcheck.new({\n   name = upstream.name,\n   shm_name = \"kong_healthchecks\",\n   checks = upstream.healthchecks,\n })\n{% endcodeblock %} \n\n&emsp;&emsp;shm_name传递的是lua-resty-healthcheck需要的nginx中的共享内存名，用于存储当前哪些节点的失败或成功次数。定义见[nginx-conf:21](https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L21)。\n\n&emsp;&emsp;checks传递的是健康检查的json配置。健康检查有主动检查和被动检查2种。  \n   \n&emsp;&emsp;主动检查需要设置检查url、超时时间、检查间隔、失败判断码、失败判断次数、成功判断码、成功判断次数、超时判断次数等。  \n&emsp;&emsp;kong默认的主动检查配置如下(这个配置不会启用主动检查，因为tcp_failures、timeouts、http_failures、interval和successes都被设成了0)：\n\n{% codeblock lang:json %}\n\"active\":{\n    \"unhealthy\":{\n        \"http_statuses\":[\n            429,\n            404,\n            500,\n            501,\n            502,\n            503,\n            504,\n            505\n        ],\n        \"tcp_failures\":0,\n        \"timeouts\":0,\n        \"http_failures\":0,\n        \"interval\":0\n    },\n    \"http_path\":\"/\",\n    \"timeout\":1,\n    \"healthy\":{\n        \"http_statuses\":[\n            200,\n            302\n        ],\n        \"interval\":0,\n        \"successes\":0\n    },\n    \"concurrency\":10\n}\n{% endcodeblock %} \n\n&emsp;&emsp;kong会根据配置定期对后端服务节点机器调用检查url进行检查，如果检查超时或HTTP返回码满足失败条件的次数超过限制，负载均衡器会把该节点标记为不可用。 \n\n&emsp;&emsp;被动检查需要设置失败判断码、失败判断次数、成功判断码、成功判断次数、超时判断次数等。  \n&emsp;&emsp;kong默认的被动检查配置如下(这个配置不会启用被动检查，因为tcp_failures、timeouts、http_failures和successes都被设成了0)：  \n\n{% codeblock lang:json %}\n\"passive\":{\n    \"unhealthy\":{\n        \"http_failures\":0,\n        \"http_statuses\":[\n            429,\n            500,\n            503\n        ],\n        \"tcp_failures\":0,\n        \"timeouts\":0\n    },\n    \"healthy\":{\n        \"http_statuses\":[\n            200,\n            201,\n            202,\n            203,\n            204,\n            205,\n            206,\n            207,\n            208,\n            226,\n            300,\n            301,\n            302,\n            303,\n            304,\n            305,\n            306,\n            307,\n            308\n        ],\n        \"successes\":0\n    }\n}\n{% endcodeblock %} \n\n&emsp;&emsp;kong在跟后端机器进行通信的过程中，判断其返回码，有无超时。然后根据配置决定是否对节点进行标记。     \n\n&emsp;&emsp;由于被动检查的操作是在负载均衡器里面进行，attach_healthchecker_to_balancer里面对负载均衡器设置了report_http_status和report_tcp_failure方法，这2个方法会在转发请求的时候被调用，把请求结果通知给健康检查器，见[balancer.lua:249](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L249)。\n&emsp;&emsp;这里要注意下如果被动检查把一个节点标记为不可用的话，即使该节点已经恢复了，kong也不会自动地把该节点添加进balancer中。需要用户手动调用一个管理接口进行恢复，见[文档](https://getkong.org/docs/0.12.x/health-checks-circuit-breakers/#passive-health-checks-circuit-breakers)。  \n\n&emsp;&emsp;构造完健康检查器后，调用populate_healthchecker方法把负载均衡器中节点添加到健康检查器中。然后调用attach_healthchecker_to_balancer监听健康检查器的事件：healthchecker.events.healthy和healthchecker.events.unhealthy，并设置回调方法。回调方法就是根据健康检查器的事件类型，在负载均衡器中把后端节点标记为可用或不可用，见[balancer.lua:229](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L229)。 \n\n#### 选择target\n&emsp;&emsp;当请求匹配出一条路由规则之后，就会在该规则下面的target中选一个目标实例进行转发。目标实例的选择发生在kong.access()的后置handler中，调用balancer.execute方式进行选择。target的选择全权委托给了resty.dns.balancer对象，见[balancer.lua:689](https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L689)。  \n&emsp;&emsp;选择target的算法是带权重的round-robins。普通的round-robins算法把所有候选的target放入一个数组中，确定一个数组的起始元素(一般取第一个)。之后每次选择的时候按顺序往后选一个，到末尾时再从头开始遍历。带权重的round-robins算法相似，也是遍历数组。只不过数组的大小会远远超过target的数量，resty.dns.balancer初始化的时候wheelSize就是指定这个数组的大小。wheelSize和每个target的权重值确定一个target在数组中分配的数量，然后随机选择数组的位置进行放入。\n\n## 集群间数据同步\n\n### 概览\n&emsp;&emsp;kong的代码运行于nginx的worker进程中。kong对数据的修改会在一个worker中进行，数据被修改后需要通知给本地的其他worker进程和其他机器上的worker进程。kong使用的进程间通信主要方式有：1. 本机间通信-共享内存 2. 跨机器通信-数据库。  \n\n### 数据共享\n&emsp;&emsp;kong的数据存储在数据库中，同时在缓存中保留一份。当数据库的中的数据被修改时，需要发出相应的事件通知其他worker。其他worker接收事件后，删除缓存中对应的数据。下次从缓存读数据时发现没有的话，就从数据库加载出来。  \n&emsp;&emsp;事件分为本地事件和集群事件。本地事件用于通知在一台机器上的worker，集群事件用于通知在多台机器上的worker。\n\n#### 共享内存\n&emsp;&emsp;本地事件通过共享内存实现。kong实现了一套基于nginx共享内存的事件发布-订阅机制，源码见仓库[lua-resty-worker-events](https://github.com/Kong/lua-resty-worker-events)。该包提供post_local方法在worker进程内进行事件发布，提供post方法在同属于一台机器上的worker进程间进行事件发布。这2个方法需要指定source和event来确定事件源。  \n&emsp;&emsp;kong的数据访问层[dao.lua](https://github.com/Kong/kong/blob/0.12.1/kong/dao/dao.lua)封装了insert、update和delete三个对数据操作的方法。这三个方法分别会使用post_local发出source为dao:crud，event为insert、delete、update的数据增、删、改的事件。事件的数据格式如下:  \n\n{% codeblock lang:lua %}\n{\n   schema    = self.schema, --表名\n   operation = \"create\", --操作类型\n   entity    = res, --数据\n}\n{% endcodeblock %} \n\n&emsp;&emsp;worker进程启动的时候会在init_worker阶段注册这些事件的订阅方法，见[handler.lua:97](https://github.com/Kong/kong/blob/0.12.1/kong/core/handler.lua#L97)。订阅方法中把所有的dao:crud事件按表名称使用post_local再进行分发。所以从dao:crud分发的事件如下:  \n- source=crud, event=apis  \n这个事件会通知所有的worker(包含不同机器)apis数据的修改。这里对缓存中对key为router:version进行invalidate操作会发送一条channel=invalidations集群事件。  \n- source=crud, event=targets  \n这个事件会通知所有的worker(包含不同机器)targets数据的修改。使用cluster_events:broadcast方法发送一条channel=balancer:targets集群事件。\n- source=crud, event=upstreams  \n这个事件会通知所有的worker(包含不同机器)upstreams数据的修改。使用cluster_events:broadcast方法发送一条channel=balancer:upstreams集群事件。\n\n#### 数据库\n\n&emsp;&emsp;集群事件通过数据库实现。数据库表cluster_events存放用于集群间分发的事件。cluster_events表结构如下:  \n\n{% codeblock lang:SQL %}\nCREATE TABLE cluster_events (\n  id varchar(64) NOT NULL,\n  -- 标识生成事件的节点id\n  node_id varchar(64) NOT NULL,\n  -- 事件产生时间，精确到毫秒 \n  at timestamp(3) NOT NULL,\n  -- 事件生效时间，精确到毫秒\n  nbf timestamp(3) NULL DEFAULT NULL,\n  -- 事件过期时间，精确到毫秒\n  expire_at timestamp(3) NOT NULL,\n  -- 事件类型\n  channel varchar(1023) DEFAULT NULL,\n  -- 事件数据\n  data varchar(10000) DEFAULT NULL,\n  \n  PRIMARY KEY (id),\n  KEY cluster_events_at_idx (at),\n  KEY cluster_events_channelt_idx (channel)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;\n{% endcodeblock %} \n\nchannel的类型有:  \n- invalidations  \n表示路由规则、插件配置的变更\n- balancer:targets  \n表示负载均衡的targets列表发生变更\n- balancer:upstreams  \n表示upstream对象发生变更\n- balancer:post_health  \n表示target的健康状态发生变更。由于被动健康检查拉出实例后，kong不会在对该实例进行自动拉入，需要通过该事件来拉入实例。  \n\n&emsp;&emsp;调用cluster_events:broadcast方法会往cluster_events表中新增一条记录。在init_worker阶段通过调用cluster_events:subscribe会开启一个定时器，定时查询出cluster_events表中新增的记录。这里要注意的是同一台机器上只会有一个worker进程会对数据库进行查询(通过加锁实现，代码见[cluster_events:303](https://github.com/Kong/kong/blob/0.12.1/kong/cluster_events.lua#L303))，查询出来后再通过共享内存的方式通知给这台机器上的其他worker。  \n&emsp;&emsp;配置参数db_update_frequency确定查询数据库的间隔，默认为5秒。数据范围根据at字段是否落在(起始时间, 结束时间]确定。起始时间第一次设置在init_worker阶段，调用ngx.now()获取当前时间(精确到毫秒)并放入key为cluster_events:at的共享内存中。之后抢到锁的worker会从共享内存中取出该时间，该时间需要减去db_update_propagation + 0.001来确定起始时间，以防止事件丢失。配置参数db_update_propagation默认为0。结束时间取ngx.now()的值。查询成功后会把结束时间覆盖之前的起始时间，并把该事件分发到本机的其他worker。对于设置了nbf的事件，kong如果发现还没到生效时间，就会通过ngx.timer设置一个定时器延后分发该事件。  \n\n## Plugin\n\n### 概览\n&emsp;&emsp;kong的插件可以在不修改kong本身源码的情况下方便地添加一些功能。插件不仅可以处理请求，还可以定义API，操作数据库。kong本身提供了许多插件，支持鉴权认证、安全控制、流量调控和请求报文转换等。见[plugins list](https://konghq.com/plugins/)   \n\n### 执行原理\n&emsp;&emsp;每个插件都需要放置在plugins目录下。这里有个[base_plugin.lua](https://github.com/Kong/kong/blob/0.12.1/kong/plugins/base_plugin.lua)文件，定义了一个每个插件都需要去继承的基类。该基类定义了一些每个子类都需要去实现的方法，kong在每个执行阶段会调用。插件需要定义一个handler.lua文件，在这个文件里面去实现子类。此外还需要定义一个schema.lua文件，在这里定义每个插件的配置数据。    \n&emsp;&emsp;在nginx的master启动阶段，会扫描plugins目录下面的所有插件，加载handler.lua和schema.lua中定义的模块，见[kong/init.lua:78](https://github.com/Kong/kong/blob/0.12.1/kong/init.lua#L78)。  \n&emsp;&emsp;数据库中的plugins表定义了需要启用的插件。只有在这张表里面存在的插件，并且是开启状态的才会被使用。  \n&emsp;&emsp;插件还可以定义一个api.lua文件，用于暴露一些api接口。如oauth2插件。kong在nginx的配置文件里面开启了8001端口，所有的管理api都暴露在这个端口上。它会调用kong/init.lua中的serve_admin_api方法，使用lapis模块加载api/routes/init.lua，初始化管理接口。这里也会加载插件的api.lua，加载插件的接口，见[api/init.lua:158](https://github.com/Kong/kong/blob/0.12.1/kong/api/init.lua#L158)。  \n&emsp;&emsp;在每个请求的执行阶段，都会先执行kong的前置处理方法，然后遍历所有启用的插件执行每个阶段对应的方法。如果读者看过base_plugin的文件话会发现基本上所有的方法都会传一个conf参数。这个就是在plugins表中定义的每个插件需要用到的配置。遍历插件的时候会从缓存里面加载插件配置，如果缓存失效就会从数据里面重新加载一遍。我们可以触发invalidations集群事件来动态的更新插件配置。见[core/plugins_iterator.lua](https://github.com/Kong/kong/blob/0.12.1/kong/core/plugins_iterator.lua)。","slug":"20180416","published":1,"updated":"2018-04-23T03:06:13.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjget2sdw000050liijfcczwe","content":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>&emsp;&emsp;kong是一个基于nginx和OpenResty模块构建的API网关服务。提供http请求路由，后端服务负载均衡以及通过丰富的插件提供认证鉴权、流量调控、日志监控等功能。该网关目前应用在全球著名的API管理站点<a href=\"https://market.mashape.com/explore?page=1\" target=\"_blank\" rel=\"noopener\">mashape</a>上。<br>&emsp;&emsp;nginx是一个采用异步I/O，事件驱动的高性能Web服务器，也可以作为在企业内部提供基于http rpc的反向代理和负载均衡器。由于nginx的配置都是以静态文件的方式提供，而且nginx一般都是多台部署，导致nginx的运维管理变得比较复杂。许多运维的小伙伴都会写一些运维脚本，自动通过ssh命令远程连接到服务器去做一些配置更新的操作。<br>&emsp;&emsp;笔者所在公司也开发过一个基于nginx的软负载中心。用户可以在平台上为自己的服务配置反向代理以及负载均衡策略。用户所有的操作都会打包成一次对nginx配置的修改。修改指令会发送到每台nginx部署的一个agent上，最后由agent完成nginx配置文件的更新。<br>&emsp;&emsp;这些方法虽然可以达到自动化的管理nginx，但是本质上还是通过配置文件的方式去改变nginx的一些固定行为。在企业里面，特别是互联网公司常常需要定制一些功能。虽然可以为nginx开发一些模块，但是门槛较高，需要对nginx源码级的掌握。OpenResty为nginx引入的LuaJIT和lua-nginx-module，使我们可以在nginx的各个执行阶段编写一些lua脚本，极大地扩展了nginx的功能。OpenResty的作者已经用lua开发了许多工具库，使得我们可以在nginx中访问MySQL、Memcached、Redis。kong在此基础上实现了一个API网关服务。</p>\n<a id=\"more\"></a>\n<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><h3 id=\"如何阅读源码\"><a href=\"#如何阅读源码\" class=\"headerlink\" title=\"如何阅读源码\"></a>如何阅读源码</h3><p>&emsp;&emsp;想必看这边文章的许多朋友之前对nginx都略有了解，但是可能是头一次接触lua语言，笔者当时也是头一次。这种情况笔者一般不会一上来就去阅读源码，而是先阅读下官方文档，把环境搭建起来之后试用下功能，然后看下日志。这样会对这个系统有个整体的感觉，之后就可以去翻翻源码了。笔者所使用的编辑器是IntelljIDEA，它可以自动识别出lua语言，然后提示你去下载支持该语言的插件，很是方便。笔者全程是在ubuntu环境下开发的，使用linux系统的好处是改完代码后执行下make命令，然后reload下nginx就可以看到效果。使用windows的童鞋建议装个linux的虚拟机。由于调试kong比较麻烦，所以笔者都是通过加日志的方式学习代码的。选取一些关键的流程打印一些数据会对源码的学习起到事半功倍的效果。有时候在troubleshooting的时候更加需要打印许多日志才能把问题定位到。<br>&emsp;&emsp;笔者使用的kong的版本为0.12.1</p>\n<h3 id=\"如何使用该文档\"><a href=\"#如何使用该文档\" class=\"headerlink\" title=\"如何使用该文档\"></a>如何使用该文档</h3><p>&emsp;&emsp;本文档作为源码导读，在阅读本文档时手头最好有一份kong的源码以便随时进入源码深入阅读。读者不必从头到尾进行通读，可以根据目录选择自己感兴趣的章节进行阅读。</p>\n<h3 id=\"源码结构\"><a href=\"#源码结构\" class=\"headerlink\" title=\"源码结构\"></a>源码结构</h3><p>|– kong<br>&emsp;&emsp;|– api [admin管理接口的代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– cluster_events [集群事件的数据访问层代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– cmd [kong命令行的代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– core [请求处理、路由、负载均衡等核心代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– dao [数据库访问层代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– plugins [插件的代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– templates [nginx配置文件模板]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– tools [工具类代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– vendor [这里提供了用于lua面向对象编程的基类]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– cache.lua [缓存实现类，封装了mlcache]<br>&emsp;&emsp;|– cluster_events.lua [集群事件同步代码]<br>&emsp;&emsp;|– conf_loader.lua [配置加载]<br>&emsp;&emsp;|– constants.lua [常量定义]<br>&emsp;&emsp;|– init.lua [kong的入口，可以从这里开始阅读代码]<br>&emsp;&emsp;|– meta.lua [定义版本号之类]<br>&emsp;&emsp;|– mlcache.lua [封装了lua-resty-mlcache]<br>&emsp;&emsp;|– singletons.lua [单例模式，存放公共对象]  </p>\n<h3 id=\"执行入口\"><a href=\"#执行入口\" class=\"headerlink\" title=\"执行入口\"></a>执行入口</h3><p>&emsp;&emsp;以下是kong的nginx配置文件，笔者把一些和本章主题无关的先去掉了。  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init_by_lua_block &#123;</span><br><span class=\"line\">    kong = <span class=\"built_in\">require</span> <span class=\"string\">'kong'</span></span><br><span class=\"line\">    kong.init()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">init_worker_by_lua_block &#123;</span><br><span class=\"line\">    kong.init_worker()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">upstream kong_upstream &#123;</span><br><span class=\"line\">    server <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>;</span><br><span class=\"line\">    balancer_by_lua_block &#123;</span><br><span class=\"line\">        kong.balancer()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    keepalive <span class=\"number\">60</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    server_name kong;</span><br><span class=\"line\">    listen <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">    location / &#123;     </span><br><span class=\"line\">        rewrite_by_lua_block &#123;</span><br><span class=\"line\">            kong.rewrite()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        access_by_lua_block &#123;</span><br><span class=\"line\">            kong.access()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        header_filter_by_lua_block &#123;</span><br><span class=\"line\">            kong.header_filter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        body_filter_by_lua_block &#123;</span><br><span class=\"line\">            kong.body_filter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log_by_lua_block &#123;</span><br><span class=\"line\">            kong.<span class=\"built_in\">log</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location = /kong_error_handler &#123;</span><br><span class=\"line\">        internal;</span><br><span class=\"line\">        content_by_lua_block &#123;</span><br><span class=\"line\">            kong.handle_error()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;可以看到kong的代码执行入口在init_by_lua_block块中，该块中的代码会在nginx的master加载配置的时候被执行。通过require ‘kong’得到的实例是一个全局对象，在Lua虚拟机里面执行的代码都可以访问到。<br>该实例通过master的fork进程方法共享给worker，如果worker修改该实例会触发操作系统进程的copy-on-write，worker进程就会拥有该实例的一个副本。<br>&emsp;&emsp;后缀是by_lua_block的都代表nginx处理请求的一个执行阶段，每个阶段都会执行相应的kong代码。nginx执行阶段流程如下如所示:  </p>\n<p><img src=\"/2018/04/16/20180416/openresty_phases.png\" alt=\"\"></p>\n<ul>\n<li>init_by_lua*<br>&emsp;&emsp;发生在master进程启动阶段。这里会对数据访问层进行初始化，加载插件的代码，构造路由规则表。  </li>\n<li>init_worker_by_lua*<br>&emsp;&emsp;发生在worker进程启动阶段。这里会开启数据同步机制，执行每个插件的init_worker方法。  </li>\n<li>set_by_lua*<br>&emsp;&emsp;处理请求第一个执行阶段。这里可以做一些流程分支处理判断变量初始化。kong没有使用该阶段。</li>\n<li>rewrite_by_lua*<br>&emsp;&emsp;这里可以对请求做一些修改。kong在这里会把处理代理给插件的rewrite方法。  </li>\n<li>access_by_lua*<br>&emsp;&emsp;kong在这里对请求进行路由匹配，找到后端的upstream服务的节点。  </li>\n<li>balancer_by_lua*<br>&emsp;&emsp;kong在这里会把上一阶段找到的服务节点设置给nginx的load balancer。如果设置了重试次数，此阶段可能会被执行多次。  </li>\n<li>header_filter_by_lua*<br>&emsp;&emsp;这里可以对响应头做一些处理。kong在这里会把处理代理给插件的header_filter方法。  </li>\n<li>body_filter_by_lua*<br>&emsp;&emsp;这里可以对响应体做一些处理。kong在这里会把处理代理给插件的body_filter方法。  </li>\n<li>log_by_lua*<br>&emsp;&emsp;kong在这里会通过插件异步记录日志和一些metrics数据。  </li>\n</ul>\n<h3 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h3><p>&emsp;&emsp;kong有三大核心模块：请求路由(Router)、负载均衡(Balancer)和集群数据同步。这3个模块加上插件就组成了kong的所有功能。<br>&emsp;&emsp;路由和负载均衡模块完全接管了nginx本身的策略，也是作为一个网关的核心功能。集群数据同步则弥补了nginx集群管理的缺点，可以使得路由规则和负载均衡策略的修改可以动态进行，省去了修改配置文件和重启的流程。       </p>\n<h2 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h2><h3 id=\"概览-1\"><a href=\"#概览-1\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p>&emsp;&emsp;路由是Kong的核心功能之一。Kong会代理HTTP请求，根据HTTP主机头、请求URI和请求方式(GET/POST等)匹配路由规则，找到实际处理请求的后端服务。</p>\n<p>&emsp;&emsp;Kong的路由规则由HTTP主机头、请求URI和请求方式组成。规则匹配发生在Nginx的Rewrite/Access阶段中，access_by_lua_block指令块里面的kong.access()方法的前置handler中。见<a href=\"https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L85\" target=\"_blank\" rel=\"noopener\">kong-nginx.conf:85</a>  </p>\n<p>&emsp;&emsp;路由规则的原始数据存储在数据库apis表中。HTTP主机头由表字段hosts描述、请求URI由表字段uris描述、请求方式由表字段methods描述。在MySQL中，这3个字段的数据存储格式都是JSON序列化之后字符串数组。apis的表结构描述如下： </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`apis`</span> (</span><br><span class=\"line\">  <span class=\"comment\">-- guid</span></span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 名称</span></span><br><span class=\"line\">  <span class=\"string\">`name`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- upstream标识</span></span><br><span class=\"line\">  <span class=\"string\">`upstream_url`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">1023</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 是否保留主机头</span></span><br><span class=\"line\">  <span class=\"string\">`preserve_host`</span> tinyint(<span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 主机头匹配</span></span><br><span class=\"line\">  <span class=\"string\">`hosts`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">1023</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- uri匹配</span></span><br><span class=\"line\">  <span class=\"string\">`uris`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">1023</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 请求方法匹配</span></span><br><span class=\"line\">  <span class=\"string\">`methods`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">1023</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 是否只接受https的请求</span></span><br><span class=\"line\">  <span class=\"string\">`https_only`</span> tinyint(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 如果接受https的请求并且客户端IP不在授信IP中，是否终止请求</span></span><br><span class=\"line\">  <span class=\"string\">`http_if_terminated`</span> tinyint(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 由于链路问题(connection timeouts, connection resets等或者5xx错误)导致请求转发失败重试次数</span></span><br><span class=\"line\">  <span class=\"string\">`retries`</span> <span class=\"built_in\">smallint</span>(<span class=\"number\">6</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'5'</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 如果是uri前缀匹配，是否剥离掉uri前缀</span></span><br><span class=\"line\">  <span class=\"string\">`strip_uri`</span> tinyint(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1'</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 一些超时时间</span></span><br><span class=\"line\">  <span class=\"string\">`upstream_connect_timeout`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'60000'</span>,</span><br><span class=\"line\">  <span class=\"string\">`upstream_send_timeout`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'60000'</span>,</span><br><span class=\"line\">  <span class=\"string\">`upstream_read_timeout`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'60000'</span>,</span><br><span class=\"line\">  <span class=\"string\">`created_at`</span> <span class=\"keyword\">timestamp</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>(<span class=\"number\">3</span>),</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`name`</span> (<span class=\"string\">`name`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`apis_name_idx`</span> (<span class=\"string\">`name`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8 ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;路由规则的创建在Nginx的初始化阶段，init_by_lua_block指令块中的kong.init()方法里。见<a href=\"https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L26\" target=\"_blank\" rel=\"noopener\">kong-nginx.conf:26</a>  </p>\n<p>&emsp;&emsp;在kong.init()的末尾调用core.build_router(dao, “init”)方法构造路由表。见<a href=\"https://github.com/Kong/kong/blob/master/kong/init.lua#L174\" target=\"_blank\" rel=\"noopener\">init.lua:174</a>。  </p>\n<p>&emsp;&emsp;build_router方法的第一个参数是一个数据库操作对象，会使用它查询出数据库apis表中的数据。第二个参数是一个路由表在缓存中的版本号。如果apis表的数据发生变化，会触发缓存的invalidate操作，生成出一个新的version。此时在kong.access()方法中会再次调用build_router对路由表进行重建。见<a href=\"https://github.com/Kong/kong/blob/master/kong/core/handler.lua#L336\" target=\"_blank\" rel=\"noopener\">handler.lua:336</a>。  </p>\n<p>&emsp;&emsp;build_router会对从apis表中查询出来的数据按创建时间created_at从小到大进行排序。见<a href=\"https://github.com/Kong/kong/blob/master/kong/core/handler.lua#L54\" target=\"_blank\" rel=\"noopener\">handler.lua:54</a>。这样如果2条规则相同的话较早的规则会优先匹配。接着会构造一个Router对象，它会负责路由表的创建、路由规则的匹配操作。  </p>\n<h3 id=\"生成规则\"><a href=\"#生成规则\" class=\"headerlink\" title=\"生成规则\"></a>生成规则</h3><p>&emsp;&emsp;Router对象的第一个核心功能就是把数据库中的apis数据转化为适合进行匹配的规则。规则类型有3种：HOST、URI和METHOD，见<a href=\"https://github.com/Kong/kong/blob/master/kong/core/router.lua#L56\" target=\"_blank\" rel=\"noopener\">router.lua:56</a>。这3种类型分别由位标识0x01、0x02和0x04表示。3种类型组成7种匹配方式：  </p>\n<ul>\n<li>HOST and URI and METHOD，位标识为(0x01 | 0x02 | 0x04) == 0x07</li>\n<li>HOST and URI，位标识为(0x01 | 0x02) == 0x03</li>\n<li>HOST and METHOD，位标识为(0x01 | 0x04) == 0x05</li>\n<li>METHOD and URI，位标识为(0x04 | 0x02) == 0x06</li>\n<li>HOST，位标识为0x01</li>\n<li>URI，位标识为0x02</li>\n<li>METHOD， 位标识为0x04  </li>\n</ul>\n<p>&emsp;&emsp;创建规则前会先把数据库里存储的apis对象格式化成api_t对象，api_t格式如下：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api_t      = &#123;</span><br><span class=\"line\">    <span class=\"comment\">-- 数据库里面的apis对象</span></span><br><span class=\"line\">    api            = api,</span><br><span class=\"line\">    <span class=\"comment\">-- 是否对URI按前缀进行剥离</span></span><br><span class=\"line\">    strip_uri      = api.strip_uri,</span><br><span class=\"line\">    <span class=\"comment\">-- 请求转发的时候是否保留原始主机头</span></span><br><span class=\"line\">    preserve_host  = api.preserve_host,</span><br><span class=\"line\">    <span class=\"comment\">-- 7种匹配方式的位标识</span></span><br><span class=\"line\">    match_rules    = <span class=\"number\">0x00</span>,</span><br><span class=\"line\">    <span class=\"comment\">-- 主机头匹配规则，当作数组使用</span></span><br><span class=\"line\">    hosts          = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">-- uri匹配规则，当作数组使用</span></span><br><span class=\"line\">    uris           = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">-- method匹配规则，当作词典使用</span></span><br><span class=\"line\">    methods        = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">-- upstream信息</span></span><br><span class=\"line\">    upstream_url_t = &#123;&#125;,</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;如果主机头匹配里面包含通配符，如：*.example.com，则把通配表达式转成正则表达式：.+\\\\.example\\\\.com$，然后hosts字段里面存储的对象格式为： </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    wildcard = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    value    = <span class=\"string\">'*.example.com'</span>,</span><br><span class=\"line\">    regex    = <span class=\"string\">'.+\\\\.example\\\\.com$'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;如果主机头匹配里面是普通的字符串，如：abc.example.com，那么hosts字段里面存储的对象格式为：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    value    = abc.example.com,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;使用正则表达式：^[a-zA-Z0-9.-_~/%]*$ 判断uri匹配是否是一个普通的uri前缀。如果是，如：/prefix/some，则uris字段里面存储的对象格式为：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    is_prefix = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    value    = <span class=\"string\">'/prefix/some'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;如果uri匹配是包含正则字符串，如：/users/\\d+/profile，则uris字段里面存储的对象格式为：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    is_regex     = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    value        = <span class=\"string\">'/users/\\d+/profile'</span>,</span><br><span class=\"line\">    regex        = <span class=\"string\">'/users/\\d+/profile'</span>,</span><br><span class=\"line\">    has_captures = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    strip_regex  = <span class=\"string\">'/users/\\d+/profile/?(?&lt;stripped_uri&gt;.*)'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>  \n<p>&emsp;&emsp;如果method匹配是get方式，则会把get转成大写，如：GET，以此作为key放入methods词典中。</p>\n<p>&emsp;&emsp;使用一个词典数据结构categories对api_t对象以7种匹配方式进行归类。词典的key为7种匹配方式的位标识：0x01、0x02、0x03、0x04、0x05、0x06、0x07，value里面会按host、uri和method对规则进行分组。value定义如下：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">-- 按host分组的规则，词典类型</span></span><br><span class=\"line\">    apis_by_hosts   = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">-- 按uri分组的规则，词典类型</span></span><br><span class=\"line\">    apis_by_uris    = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">-- 按method分组的规则，词典类型</span></span><br><span class=\"line\">    apis_by_methods = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">-- 该匹配模式下所有规则，数组类型</span></span><br><span class=\"line\">    all             = &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;如果一个匹配规则是hosts=[abc.com]、uris=[/path]、method=[GET]，那么categories会包含此规则的api_t对象。如下所示：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"number\">7</span> = &#123;</span><br><span class=\"line\">      apis_by_hosts   = &#123;</span><br><span class=\"line\">        abc.com = [api_t对象]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_uris    = &#123;</span><br><span class=\"line\">        /<span class=\"built_in\">path</span> = [api_t对象]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_methods = &#123;</span><br><span class=\"line\">        GET = [api_t对象]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      all             = [api_t对象],  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;如果另一个匹配规则是hosts=[abc.com]、uris=[/version]，那么categories会包含此规则的api_t对象2。如下所示：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"number\">3</span> = &#123;</span><br><span class=\"line\">      apis_by_hosts   = &#123;</span><br><span class=\"line\">        abc.com = [api_t对象<span class=\"number\">2</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_uris    = &#123;</span><br><span class=\"line\">        /version = [api_t对象<span class=\"number\">2</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      all             = [api_t对象<span class=\"number\">2</span>],  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">7</span> = &#123;</span><br><span class=\"line\">      apis_by_hosts   = &#123;</span><br><span class=\"line\">        abc.com = [api_t对象]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_uris    = &#123;</span><br><span class=\"line\">        /<span class=\"built_in\">path</span> = [api_t对象]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_methods = &#123;</span><br><span class=\"line\">        GET = [api_t对象]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      all             = [api_t对象],  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;另外使用一个词典数据结构plain_indexes和3个数组结构uris_prefixes、uris_regexes、和wildcard_hosts决定优先使用哪种匹配模式。它们的创建方式见<a href=\"https://github.com/Kong/kong/blob/master/kong/core/router.lua#L252\" target=\"_blank\" rel=\"noopener\">router.lua:252</a>。首先会使用plain_indexes匹配主机头、uri和请求方法，因为它的构造是一个词典结构，可直接根据主机头、uri和请求方法进行查询，效率比较高。plain_indexes的内容如下： </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    hosts = &#123;</span><br><span class=\"line\">      abc.com   = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    uris = &#123;</span><br><span class=\"line\">      /foo = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods = &#123;</span><br><span class=\"line\">     GET = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>  \n<p>&emsp;&emsp;如果在plain_indexes里面没有查询到的话，则使用uris_prefixes、uris_regexes、和wildcard_hosts里面的规则一个一个进行匹配，直到匹配成功为止。</p>\n<h3 id=\"匹配流程\"><a href=\"#匹配流程\" class=\"headerlink\" title=\"匹配流程\"></a>匹配流程</h3><p>&emsp;&emsp;规则的匹配在kong.access方法里面，调用router.exec方法进行匹配。见<a href=\"https://github.com/Kong/kong/blob/master/kong/core/handler.lua#L354\" target=\"_blank\" rel=\"noopener\">handler.lua:354</a>。  </p>\n<p>&emsp;&emsp;router.exec方法从http请求里面获取主机头信息、HTTP请求方法和请求URI。然后调用find_api方法进行实际地匹配。见<a href=\"https://github.com/Kong/kong/blob/master/kong/core/router.lua#L594\" target=\"_blank\" rel=\"noopener\">router.lua:594</a>。   </p>\n<p>&emsp;&emsp;find_api首先从缓存里面查询匹配结果。如果缓存里面没有数据，则是第一次匹配。先把请求中的主机头放入ctx.req_host，请求uri放入ctx.req_uri，请求方法放入ctx.req_method。然后使用plain_indexes、uris_prefixes、uris_regexes、和wildcard_hosts选择匹配模式。这里如果是根据uri前缀、uri正则表达式或主机头通配符匹配到的话，则会把uri前缀或uri正则表达式放入ctx.hits.uri中，把主机头通配符放入ctx.hits.host中。后续就使用ctx去和规则进行匹配。匹配模式按照CATEGORIES定义的顺序进行降级匹配。如果匹配模式是0x07，则使用0x07里面的规则去匹配。如果匹配失败，则使用0x03的规则进行匹配。如果还是失败，则继续按0x05 -&gt; 0x06 -&gt; 0x01 -&gt; 0x02 -&gt; 0x04的降级顺序进行匹配，直到成功为止。  </p>\n<p>&emsp;&emsp;确定匹配模式之后，先使用reduce方法对候选的规则进行筛选。前面说到每一种匹配模式包含的规则会按host、uri和method进行分组。reduce方法就是选取数量最少的那个分组。如果那个分组下的规则匹配失败，则使用all下面的规则进行匹配。  </p>\n<p>&emsp;&emsp;现在举例说明。假设现在根据如下json创建了一个apis对象。  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my-api\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"upstream_url\"</span>: <span class=\"string\">\"http://my-api.com\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hosts\"</span>: [<span class=\"string\">\"example.com\"</span>, <span class=\"string\">\"service.com\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"uris\"</span>: [<span class=\"string\">\"/foo\"</span>, <span class=\"string\">\"/bar\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"methods\"</span>: [<span class=\"string\">\"GET\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;对应的api_t内容是：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api_t      = &#123;</span><br><span class=\"line\">    api            = 数据库中的api对象,</span><br><span class=\"line\">    strip_uri      = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    preserve_host  = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    match_rules    = <span class=\"number\">0x07</span>,</span><br><span class=\"line\">    hosts          = [</span><br><span class=\"line\">                      &#123;</span><br><span class=\"line\">                                value    = example.com,</span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                      &#123;</span><br><span class=\"line\">                                value    = service.com,</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    uris           = [</span><br><span class=\"line\">                      &#123;</span><br><span class=\"line\">                                is_prefix = <span class=\"literal\">true</span>,</span><br><span class=\"line\">                                value    = <span class=\"string\">'/foo'</span>,  </span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                      &#123;</span><br><span class=\"line\">                                is_prefix = <span class=\"literal\">true</span>,</span><br><span class=\"line\">                                value    = <span class=\"string\">'/bar'</span>,  </span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    methods        = &#123;GET = <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">    upstream_url_t = &#123;</span><br><span class=\"line\">                         scheme             = http,</span><br><span class=\"line\">                         host               = my-api.com,</span><br><span class=\"line\">                         port               = <span class=\"number\">80</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>  \n<p>&emsp;&emsp;categories内容如下：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"number\">7</span> = &#123;</span><br><span class=\"line\">      apis_by_hosts   = &#123;</span><br><span class=\"line\">        example.com = [api_t],</span><br><span class=\"line\">        service.com = [api_t]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_uris    = &#123;</span><br><span class=\"line\">        /foo = [api_t],</span><br><span class=\"line\">        /bar = [api_t],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_methods = &#123;</span><br><span class=\"line\">        GET = [api_t]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      all             = [api_t],  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;plain_indexes的内容如下：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    hosts = &#123;</span><br><span class=\"line\">      example.com   = <span class=\"literal\">true</span>,</span><br><span class=\"line\">      service.com   = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    uris = &#123;</span><br><span class=\"line\">      /foo = <span class=\"literal\">true</span>,</span><br><span class=\"line\">      /bar = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods = &#123;</span><br><span class=\"line\">     GET = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;uris_prefixes的内容如下：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      is_prefix = <span class=\"literal\">true</span>,</span><br><span class=\"line\">      value    = <span class=\"string\">'/foo'</span>,  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      is_prefix = <span class=\"literal\">true</span>,</span><br><span class=\"line\">      value    = <span class=\"string\">'/bar'</span>,  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;由于host匹配没有通配符以及uri匹配没有正则表达式，所以uris_regexes和wildcard_hosts为空。  </p>\n<p>&emsp;&emsp;假设现在有如下请求：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /foo HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: example.com</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;此请求的主机头是example.com，请求uri是/foo，请求方法是GET。首先使用plain_indexes确定匹配模式为0x07，因为plain_indexes.hosts包含example.com，位标识是0x01。plain_indexes.uris包含/foo，位标识是0x02。plain_indexes.methods包含GET，位标识是0x04。把0x01，0x02和0x04通过位或运算得到0x07。  </p>\n<p>&emsp;&emsp;根据0x07从categories里选择key为7的规则。reduce方法等价于:<br><code>min(#categories[7].apis_by_hosts[example.com], #categories[7].apis_by_uris[/foo], #categories[7].apis_by_methods[GET])</code><br>&emsp;&emsp;#号是取数组的长度。此处这3个数组的长度都是1，所以优先选择apis_by_hosts中的api_t规则进行匹配。  api_t里面的hosts、uris和methods匹配上了这个请求，此次匹配成功。  </p>\n<h2 id=\"Balancer\"><a href=\"#Balancer\" class=\"headerlink\" title=\"Balancer\"></a>Balancer</h2><h3 id=\"概览-2\"><a href=\"#概览-2\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p>&emsp;&emsp;Balancer对请求做负载均衡，使请求分散地转发到后端服务。从而可以优化资源利用率、提升吞吐量、减少延时以及提高容错等。Kong使用了DNS-Balancer和Ring-Balancer两种均衡模式。DNS-Balancer适合对外部的第三方服务进行负载均衡。候选服务器列表添加在A记录或SRV记录中。A记录中只包含IP地址，而且没有权重信息，适合简单的round-robin。SRV记录中包含IP地址和端口，并含有权重信息，可以按权重调拨流量以及IP地址复用。Ring-Balancer适合对内部服务进行负载运行。因为这种模式的控制性强，可以灵活地支持机器上下线操作、带权重的负载均衡以及可以进行蓝绿部署和金丝雀发布。本章着重分析Ring模式。  </p>\n<h3 id=\"Ring-Balancer\"><a href=\"#Ring-Balancer\" class=\"headerlink\" title=\"Ring-Balancer\"></a>Ring-Balancer</h3><p>&emsp;&emsp;在Kong里面，Ring-Balancer通过upstream和target对象描述。upstream对象用于调节负载均衡的行为，如权重分配、健康检查以及是否通过一致性hash绑定请求到对应的机器上。target存储进行负载均衡的机器列表。  </p>\n<p>&emsp;&emsp;upstream对象数据库表结构描述如下：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> upstreams (</span><br><span class=\"line\">  <span class=\"keyword\">id</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">-- 槽位大小，用于调节权重</span></span><br><span class=\"line\">  slots <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- json格式存储的健康检查配置</span></span><br><span class=\"line\">  healthchecks <span class=\"built_in\">varchar</span>(<span class=\"number\">10000</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 首选hash输入值：none,consumer,ip,header</span></span><br><span class=\"line\">  hash_on <span class=\"built_in\">varchar</span>(<span class=\"number\">31</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 此选hash输入值</span></span><br><span class=\"line\">  hash_fallback <span class=\"built_in\">varchar</span>(<span class=\"number\">31</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 根据http header进行hash时，首选的header</span></span><br><span class=\"line\">  hash_on_header <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 此选的header</span></span><br><span class=\"line\">  hash_fallback_header <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  created_at <span class=\"keyword\">timestamp</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>(<span class=\"number\">3</span>),</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">id</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"keyword\">name</span> (<span class=\"keyword\">name</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> upstreams_name_idx (<span class=\"keyword\">name</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8 ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;target对象数据库表结构描述如下：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> targets (</span><br><span class=\"line\">  <span class=\"keyword\">id</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">-- ip:port</span></span><br><span class=\"line\">  target <span class=\"built_in\">varchar</span>(<span class=\"number\">500</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 权重值</span></span><br><span class=\"line\">  weight <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 所属upstream</span></span><br><span class=\"line\">  upstream_id <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  created_at <span class=\"keyword\">timestamp</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>(<span class=\"number\">3</span>),</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">id</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> tragets_upstreamid_fk (upstream_id),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> targets_target_idx (target),</span><br><span class=\"line\">  <span class=\"keyword\">CONSTRAINT</span> tragets_upstreamid_fk FOREIGN <span class=\"keyword\">KEY</span> (upstream_id) <span class=\"keyword\">REFERENCES</span> upstreams (<span class=\"keyword\">id</span>) <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">CASCADE</span></span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8 ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure> \n<h4 id=\"构造balancer\"><a href=\"#构造balancer\" class=\"headerlink\" title=\"构造balancer\"></a>构造balancer</h4><p>&emsp;&emsp;Ring-Balancer的初始化发生在nginx工作进程的初始化阶段中，init_worker_by_lua_block指令块的kong.init_worker()方法里，见<a href=\"https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L30\" target=\"_blank\" rel=\"noopener\">nginx-kong.conf:30</a>。init_worker里面调用了balancer.init()方法做了实际的初始化工作。  </p>\n<p>&emsp;&emsp;balancer.init首先使用get_all_upstreams方法从数据库upstreams表加载所有数据到缓存中。调用create_balancer方法对每个查询出来的upstream对象，创建一个负载均衡器ring_balancer。均衡器的实现在resty.dns.balancer模块中，这个模块在Kong的lua-resty-dns-client项目里，代码见<a href=\"https://github.com/Kong/lua-resty-dns-client\" target=\"_blank\" rel=\"noopener\">github</a>，文档见<a href=\"https://kong.github.io/lua-resty-dns-client/modules/resty.dns.balancer.html\" target=\"_blank\" rel=\"noopener\">resty.dns.balancer</a>。  </p>\n<p>&emsp;&emsp;均衡器初始化使用了3个参数：wheelSize,order和dns，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L295\" target=\"_blank\" rel=\"noopener\">balancer.lua:295</a>。在0.12.1版本中，实际使用的就wheelSize这一个参数。如果wheelSize越大，目标机器的分布就越离散。这样在选择的时候既可以保证权重，连续选到相同的机器的概率也比较小。当然wheelSize越大，占用的内存就越多，重建的开销比较大。可以根据后端机器的数量选择的一个值，它的默认值是1000。  </p>\n<h4 id=\"加载target\"><a href=\"#加载target\" class=\"headerlink\" title=\"加载target\"></a>加载target</h4><p>&emsp;&emsp;fetch_target_history方法会从key为balancer:targets:${upstreamId}的缓存中选择upstream下面的target，如果缓存中没有就调用load_targets_into_memory方法从数据库中查询出来再放入缓存。<br>&emsp;&emsp;Kong的api没有对target按ip和端口进行修改的操作。(这是因为如果只是做添加操作的话，可以不重建balancer，减少开销，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L364\" target=\"_blank\" rel=\"noopener\">balancer.lua:364</a>。但是在check_target_history方法中有一个bug，导致即使只是添加target，还是会重建balancer，bug见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L357\" target=\"_blank\" rel=\"noopener\">balancer.lua:357</a>，这里把old_history和new_history写反了。)<br>&emsp;&emsp;由于只做添加，数据库表targets中可能会出现多条target相同的数据(ip和port相同)，但是权重是不同的数据。如果出现这种情况该决定使用哪个target记录呢?fetch_target_history方法会对查询出来的target记录按创建时间进行从老到新的排序，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L116\" target=\"_blank\" rel=\"noopener\">balancer.lua:116</a>。之后apply_history方法会按这个顺序把target添加到均衡器ring_balancer中，如果ip和端口相同，ring_balancer中后添加的记录会覆盖之前的，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L314\" target=\"_blank\" rel=\"noopener\">balancer.lua:314</a>。 </p>\n<p>&emsp;&emsp;无论是Ring-Balancer或DNS-Balancer，都是使用resty.dns.balancer这个负载均衡器做的负载均衡。这是因为在调用resty.dns.balancer的addHost方式时。如果hostname传的是域名的话，会做dns解析，把解析出来的节点添加进去。但如果hostname是ip地址的话，直接把添加参数所表示的节点。文档见<a href=\"https://kong.github.io/lua-resty-dns-client/modules/resty.dns.balancer.html#addHost\" target=\"_blank\" rel=\"noopener\">addHost</a></p>\n<h4 id=\"target健康检查\"><a href=\"#target健康检查\" class=\"headerlink\" title=\"target健康检查\"></a>target健康检查</h4><p>&emsp;&emsp;create_healthchecker方法为每个负载均衡器ring_balancer添加健康检查。<br>健康检查的实现在resty.healthcheck模块中，这个模块在Kong的lua-resty-healthcheck项目里，代码见<a href=\"https://github.com/Kong/lua-resty-healthcheck\" target=\"_blank\" rel=\"noopener\">github</a>，文档见<a href=\"https://kong.github.io/lua-resty-healthcheck/modules/resty.healthcheck.html\" target=\"_blank\" rel=\"noopener\">resty.healthcheck</a>。<br>&emsp;&emsp;create_healthchecker使用如下代码构造健康检查器：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> healthchecker, err = healthcheck.new(&#123;</span><br><span class=\"line\">   name = upstream.name,</span><br><span class=\"line\">   shm_name = <span class=\"string\">\"kong_healthchecks\"</span>,</span><br><span class=\"line\">   checks = upstream.healthchecks,</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;shm_name传递的是lua-resty-healthcheck需要的nginx中的共享内存名，用于存储当前哪些节点的失败或成功次数。定义见<a href=\"https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L21\" target=\"_blank\" rel=\"noopener\">nginx-conf:21</a>。</p>\n<p>&emsp;&emsp;checks传递的是健康检查的json配置。健康检查有主动检查和被动检查2种。  </p>\n<p>&emsp;&emsp;主动检查需要设置检查url、超时时间、检查间隔、失败判断码、失败判断次数、成功判断码、成功判断次数、超时判断次数等。<br>&emsp;&emsp;kong默认的主动检查配置如下(这个配置不会启用主动检查，因为tcp_failures、timeouts、http_failures、interval和successes都被设成了0)：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"active\":&#123;</span><br><span class=\"line\">    \"unhealthy\":&#123;</span><br><span class=\"line\">        \"http_statuses\":[</span><br><span class=\"line\">            429,</span><br><span class=\"line\">            404,</span><br><span class=\"line\">            500,</span><br><span class=\"line\">            501,</span><br><span class=\"line\">            502,</span><br><span class=\"line\">            503,</span><br><span class=\"line\">            504,</span><br><span class=\"line\">            <span class=\"number\">505</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        \"tcp_failures\":0,</span><br><span class=\"line\">        \"timeouts\":0,</span><br><span class=\"line\">        \"http_failures\":0,</span><br><span class=\"line\">        \"interval\":0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"http_path\":\"/\",</span><br><span class=\"line\">    \"timeout\":1,</span><br><span class=\"line\">    \"healthy\":&#123;</span><br><span class=\"line\">        \"http_statuses\":[</span><br><span class=\"line\">            200,</span><br><span class=\"line\">            <span class=\"number\">302</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        \"interval\":0,</span><br><span class=\"line\">        \"successes\":0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"concurrency\":10</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;kong会根据配置定期对后端服务节点机器调用检查url进行检查，如果检查超时或HTTP返回码满足失败条件的次数超过限制，负载均衡器会把该节点标记为不可用。 </p>\n<p>&emsp;&emsp;被动检查需要设置失败判断码、失败判断次数、成功判断码、成功判断次数、超时判断次数等。<br>&emsp;&emsp;kong默认的被动检查配置如下(这个配置不会启用被动检查，因为tcp_failures、timeouts、http_failures和successes都被设成了0)：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"passive\":&#123;</span><br><span class=\"line\">    \"unhealthy\":&#123;</span><br><span class=\"line\">        \"http_failures\":0,</span><br><span class=\"line\">        \"http_statuses\":[</span><br><span class=\"line\">            429,</span><br><span class=\"line\">            500,</span><br><span class=\"line\">            <span class=\"number\">503</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        \"tcp_failures\":0,</span><br><span class=\"line\">        \"timeouts\":0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"healthy\":&#123;</span><br><span class=\"line\">        \"http_statuses\":[</span><br><span class=\"line\">            200,</span><br><span class=\"line\">            201,</span><br><span class=\"line\">            202,</span><br><span class=\"line\">            203,</span><br><span class=\"line\">            204,</span><br><span class=\"line\">            205,</span><br><span class=\"line\">            206,</span><br><span class=\"line\">            207,</span><br><span class=\"line\">            208,</span><br><span class=\"line\">            226,</span><br><span class=\"line\">            300,</span><br><span class=\"line\">            301,</span><br><span class=\"line\">            302,</span><br><span class=\"line\">            303,</span><br><span class=\"line\">            304,</span><br><span class=\"line\">            305,</span><br><span class=\"line\">            306,</span><br><span class=\"line\">            307,</span><br><span class=\"line\">            <span class=\"number\">308</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        \"successes\":0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;kong在跟后端机器进行通信的过程中，判断其返回码，有无超时。然后根据配置决定是否对节点进行标记。     </p>\n<p>&emsp;&emsp;由于被动检查的操作是在负载均衡器里面进行，attach_healthchecker_to_balancer里面对负载均衡器设置了report_http_status和report_tcp_failure方法，这2个方法会在转发请求的时候被调用，把请求结果通知给健康检查器，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L249\" target=\"_blank\" rel=\"noopener\">balancer.lua:249</a>。<br>&emsp;&emsp;这里要注意下如果被动检查把一个节点标记为不可用的话，即使该节点已经恢复了，kong也不会自动地把该节点添加进balancer中。需要用户手动调用一个管理接口进行恢复，见<a href=\"https://getkong.org/docs/0.12.x/health-checks-circuit-breakers/#passive-health-checks-circuit-breakers\" target=\"_blank\" rel=\"noopener\">文档</a>。  </p>\n<p>&emsp;&emsp;构造完健康检查器后，调用populate_healthchecker方法把负载均衡器中节点添加到健康检查器中。然后调用attach_healthchecker_to_balancer监听健康检查器的事件：healthchecker.events.healthy和healthchecker.events.unhealthy，并设置回调方法。回调方法就是根据健康检查器的事件类型，在负载均衡器中把后端节点标记为可用或不可用，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L229\" target=\"_blank\" rel=\"noopener\">balancer.lua:229</a>。 </p>\n<h4 id=\"选择target\"><a href=\"#选择target\" class=\"headerlink\" title=\"选择target\"></a>选择target</h4><p>&emsp;&emsp;当请求匹配出一条路由规则之后，就会在该规则下面的target中选一个目标实例进行转发。目标实例的选择发生在kong.access()的后置handler中，调用balancer.execute方式进行选择。target的选择全权委托给了resty.dns.balancer对象，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L689\" target=\"_blank\" rel=\"noopener\">balancer.lua:689</a>。<br>&emsp;&emsp;选择target的算法是带权重的round-robins。普通的round-robins算法把所有候选的target放入一个数组中，确定一个数组的起始元素(一般取第一个)。之后每次选择的时候按顺序往后选一个，到末尾时再从头开始遍历。带权重的round-robins算法相似，也是遍历数组。只不过数组的大小会远远超过target的数量，resty.dns.balancer初始化的时候wheelSize就是指定这个数组的大小。wheelSize和每个target的权重值确定一个target在数组中分配的数量，然后随机选择数组的位置进行放入。</p>\n<h2 id=\"集群间数据同步\"><a href=\"#集群间数据同步\" class=\"headerlink\" title=\"集群间数据同步\"></a>集群间数据同步</h2><h3 id=\"概览-3\"><a href=\"#概览-3\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p>&emsp;&emsp;kong的代码运行于nginx的worker进程中。kong对数据的修改会在一个worker中进行，数据被修改后需要通知给本地的其他worker进程和其他机器上的worker进程。kong使用的进程间通信主要方式有：1. 本机间通信-共享内存 2. 跨机器通信-数据库。  </p>\n<h3 id=\"数据共享\"><a href=\"#数据共享\" class=\"headerlink\" title=\"数据共享\"></a>数据共享</h3><p>&emsp;&emsp;kong的数据存储在数据库中，同时在缓存中保留一份。当数据库的中的数据被修改时，需要发出相应的事件通知其他worker。其他worker接收事件后，删除缓存中对应的数据。下次从缓存读数据时发现没有的话，就从数据库加载出来。<br>&emsp;&emsp;事件分为本地事件和集群事件。本地事件用于通知在一台机器上的worker，集群事件用于通知在多台机器上的worker。</p>\n<h4 id=\"共享内存\"><a href=\"#共享内存\" class=\"headerlink\" title=\"共享内存\"></a>共享内存</h4><p>&emsp;&emsp;本地事件通过共享内存实现。kong实现了一套基于nginx共享内存的事件发布-订阅机制，源码见仓库<a href=\"https://github.com/Kong/lua-resty-worker-events\" target=\"_blank\" rel=\"noopener\">lua-resty-worker-events</a>。该包提供post_local方法在worker进程内进行事件发布，提供post方法在同属于一台机器上的worker进程间进行事件发布。这2个方法需要指定source和event来确定事件源。<br>&emsp;&emsp;kong的数据访问层<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/dao/dao.lua\" target=\"_blank\" rel=\"noopener\">dao.lua</a>封装了insert、update和delete三个对数据操作的方法。这三个方法分别会使用post_local发出source为dao:crud，event为insert、delete、update的数据增、删、改的事件。事件的数据格式如下:  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   schema    = self.schema, <span class=\"comment\">--表名</span></span><br><span class=\"line\">   operation = <span class=\"string\">\"create\"</span>, <span class=\"comment\">--操作类型</span></span><br><span class=\"line\">   entity    = res, <span class=\"comment\">--数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;worker进程启动的时候会在init_worker阶段注册这些事件的订阅方法，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/handler.lua#L97\" target=\"_blank\" rel=\"noopener\">handler.lua:97</a>。订阅方法中把所有的dao:crud事件按表名称使用post_local再进行分发。所以从dao:crud分发的事件如下:  </p>\n<ul>\n<li>source=crud, event=apis<br>这个事件会通知所有的worker(包含不同机器)apis数据的修改。这里对缓存中对key为router:version进行invalidate操作会发送一条channel=invalidations集群事件。  </li>\n<li>source=crud, event=targets<br>这个事件会通知所有的worker(包含不同机器)targets数据的修改。使用cluster_events:broadcast方法发送一条channel=balancer:targets集群事件。</li>\n<li>source=crud, event=upstreams<br>这个事件会通知所有的worker(包含不同机器)upstreams数据的修改。使用cluster_events:broadcast方法发送一条channel=balancer:upstreams集群事件。</li>\n</ul>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>&emsp;&emsp;集群事件通过数据库实现。数据库表cluster_events存放用于集群间分发的事件。cluster_events表结构如下:  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> cluster_events (</span><br><span class=\"line\">  <span class=\"keyword\">id</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 标识生成事件的节点id</span></span><br><span class=\"line\">  node_id <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 事件产生时间，精确到毫秒 </span></span><br><span class=\"line\">  <span class=\"keyword\">at</span> <span class=\"keyword\">timestamp</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 事件生效时间，精确到毫秒</span></span><br><span class=\"line\">  nbf <span class=\"keyword\">timestamp</span>(<span class=\"number\">3</span>) <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 事件过期时间，精确到毫秒</span></span><br><span class=\"line\">  expire_at <span class=\"keyword\">timestamp</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 事件类型</span></span><br><span class=\"line\">  channel <span class=\"built_in\">varchar</span>(<span class=\"number\">1023</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 事件数据</span></span><br><span class=\"line\">  <span class=\"keyword\">data</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">10000</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">id</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> cluster_events_at_idx (<span class=\"keyword\">at</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> cluster_events_channelt_idx (channel)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8 ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure> \n<p>channel的类型有:  </p>\n<ul>\n<li>invalidations<br>表示路由规则、插件配置的变更</li>\n<li>balancer:targets<br>表示负载均衡的targets列表发生变更</li>\n<li>balancer:upstreams<br>表示upstream对象发生变更</li>\n<li>balancer:post_health<br>表示target的健康状态发生变更。由于被动健康检查拉出实例后，kong不会在对该实例进行自动拉入，需要通过该事件来拉入实例。  </li>\n</ul>\n<p>&emsp;&emsp;调用cluster_events:broadcast方法会往cluster_events表中新增一条记录。在init_worker阶段通过调用cluster_events:subscribe会开启一个定时器，定时查询出cluster_events表中新增的记录。这里要注意的是同一台机器上只会有一个worker进程会对数据库进行查询(通过加锁实现，代码见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/cluster_events.lua#L303\" target=\"_blank\" rel=\"noopener\">cluster_events:303</a>)，查询出来后再通过共享内存的方式通知给这台机器上的其他worker。<br>&emsp;&emsp;配置参数db_update_frequency确定查询数据库的间隔，默认为5秒。数据范围根据at字段是否落在(起始时间, 结束时间]确定。起始时间第一次设置在init_worker阶段，调用ngx.now()获取当前时间(精确到毫秒)并放入key为cluster_events:at的共享内存中。之后抢到锁的worker会从共享内存中取出该时间，该时间需要减去db_update_propagation + 0.001来确定起始时间，以防止事件丢失。配置参数db_update_propagation默认为0。结束时间取ngx.now()的值。查询成功后会把结束时间覆盖之前的起始时间，并把该事件分发到本机的其他worker。对于设置了nbf的事件，kong如果发现还没到生效时间，就会通过ngx.timer设置一个定时器延后分发该事件。  </p>\n<h2 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h2><h3 id=\"概览-4\"><a href=\"#概览-4\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p>&emsp;&emsp;kong的插件可以在不修改kong本身源码的情况下方便地添加一些功能。插件不仅可以处理请求，还可以定义API，操作数据库。kong本身提供了许多插件，支持鉴权认证、安全控制、流量调控和请求报文转换等。见<a href=\"https://konghq.com/plugins/\" target=\"_blank\" rel=\"noopener\">plugins list</a>   </p>\n<h3 id=\"执行原理\"><a href=\"#执行原理\" class=\"headerlink\" title=\"执行原理\"></a>执行原理</h3><p>&emsp;&emsp;每个插件都需要放置在plugins目录下。这里有个<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/plugins/base_plugin.lua\" target=\"_blank\" rel=\"noopener\">base_plugin.lua</a>文件，定义了一个每个插件都需要去继承的基类。该基类定义了一些每个子类都需要去实现的方法，kong在每个执行阶段会调用。插件需要定义一个handler.lua文件，在这个文件里面去实现子类。此外还需要定义一个schema.lua文件，在这里定义每个插件的配置数据。<br>&emsp;&emsp;在nginx的master启动阶段，会扫描plugins目录下面的所有插件，加载handler.lua和schema.lua中定义的模块，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/init.lua#L78\" target=\"_blank\" rel=\"noopener\">kong/init.lua:78</a>。<br>&emsp;&emsp;数据库中的plugins表定义了需要启用的插件。只有在这张表里面存在的插件，并且是开启状态的才会被使用。<br>&emsp;&emsp;插件还可以定义一个api.lua文件，用于暴露一些api接口。如oauth2插件。kong在nginx的配置文件里面开启了8001端口，所有的管理api都暴露在这个端口上。它会调用kong/init.lua中的serve_admin_api方法，使用lapis模块加载api/routes/init.lua，初始化管理接口。这里也会加载插件的api.lua，加载插件的接口，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/api/init.lua#L158\" target=\"_blank\" rel=\"noopener\">api/init.lua:158</a>。<br>&emsp;&emsp;在每个请求的执行阶段，都会先执行kong的前置处理方法，然后遍历所有启用的插件执行每个阶段对应的方法。如果读者看过base_plugin的文件话会发现基本上所有的方法都会传一个conf参数。这个就是在plugins表中定义的每个插件需要用到的配置。遍历插件的时候会从缓存里面加载插件配置，如果缓存失效就会从数据里面重新加载一遍。我们可以触发invalidations集群事件来动态的更新插件配置。见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/plugins_iterator.lua\" target=\"_blank\" rel=\"noopener\">core/plugins_iterator.lua</a>。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"概览\"><a href=\"#概览\" class=\"headerlink\" title=\"概览\"></a>概览</h2><p>&emsp;&emsp;kong是一个基于nginx和OpenResty模块构建的API网关服务。提供http请求路由，后端服务负载均衡以及通过丰富的插件提供认证鉴权、流量调控、日志监控等功能。该网关目前应用在全球著名的API管理站点<a href=\"https://market.mashape.com/explore?page=1\" target=\"_blank\" rel=\"noopener\">mashape</a>上。<br>&emsp;&emsp;nginx是一个采用异步I/O，事件驱动的高性能Web服务器，也可以作为在企业内部提供基于http rpc的反向代理和负载均衡器。由于nginx的配置都是以静态文件的方式提供，而且nginx一般都是多台部署，导致nginx的运维管理变得比较复杂。许多运维的小伙伴都会写一些运维脚本，自动通过ssh命令远程连接到服务器去做一些配置更新的操作。<br>&emsp;&emsp;笔者所在公司也开发过一个基于nginx的软负载中心。用户可以在平台上为自己的服务配置反向代理以及负载均衡策略。用户所有的操作都会打包成一次对nginx配置的修改。修改指令会发送到每台nginx部署的一个agent上，最后由agent完成nginx配置文件的更新。<br>&emsp;&emsp;这些方法虽然可以达到自动化的管理nginx，但是本质上还是通过配置文件的方式去改变nginx的一些固定行为。在企业里面，特别是互联网公司常常需要定制一些功能。虽然可以为nginx开发一些模块，但是门槛较高，需要对nginx源码级的掌握。OpenResty为nginx引入的LuaJIT和lua-nginx-module，使我们可以在nginx的各个执行阶段编写一些lua脚本，极大地扩展了nginx的功能。OpenResty的作者已经用lua开发了许多工具库，使得我们可以在nginx中访问MySQL、Memcached、Redis。kong在此基础上实现了一个API网关服务。</p>","more":"<h2 id=\"导读\"><a href=\"#导读\" class=\"headerlink\" title=\"导读\"></a>导读</h2><h3 id=\"如何阅读源码\"><a href=\"#如何阅读源码\" class=\"headerlink\" title=\"如何阅读源码\"></a>如何阅读源码</h3><p>&emsp;&emsp;想必看这边文章的许多朋友之前对nginx都略有了解，但是可能是头一次接触lua语言，笔者当时也是头一次。这种情况笔者一般不会一上来就去阅读源码，而是先阅读下官方文档，把环境搭建起来之后试用下功能，然后看下日志。这样会对这个系统有个整体的感觉，之后就可以去翻翻源码了。笔者所使用的编辑器是IntelljIDEA，它可以自动识别出lua语言，然后提示你去下载支持该语言的插件，很是方便。笔者全程是在ubuntu环境下开发的，使用linux系统的好处是改完代码后执行下make命令，然后reload下nginx就可以看到效果。使用windows的童鞋建议装个linux的虚拟机。由于调试kong比较麻烦，所以笔者都是通过加日志的方式学习代码的。选取一些关键的流程打印一些数据会对源码的学习起到事半功倍的效果。有时候在troubleshooting的时候更加需要打印许多日志才能把问题定位到。<br>&emsp;&emsp;笔者使用的kong的版本为0.12.1</p>\n<h3 id=\"如何使用该文档\"><a href=\"#如何使用该文档\" class=\"headerlink\" title=\"如何使用该文档\"></a>如何使用该文档</h3><p>&emsp;&emsp;本文档作为源码导读，在阅读本文档时手头最好有一份kong的源码以便随时进入源码深入阅读。读者不必从头到尾进行通读，可以根据目录选择自己感兴趣的章节进行阅读。</p>\n<h3 id=\"源码结构\"><a href=\"#源码结构\" class=\"headerlink\" title=\"源码结构\"></a>源码结构</h3><p>|– kong<br>&emsp;&emsp;|– api [admin管理接口的代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– cluster_events [集群事件的数据访问层代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– cmd [kong命令行的代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– core [请求处理、路由、负载均衡等核心代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– dao [数据库访问层代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– plugins [插件的代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– templates [nginx配置文件模板]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– tools [工具类代码]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– vendor [这里提供了用于lua面向对象编程的基类]<br>&emsp;&emsp;&emsp;&emsp;|– …<br>&emsp;&emsp;|– cache.lua [缓存实现类，封装了mlcache]<br>&emsp;&emsp;|– cluster_events.lua [集群事件同步代码]<br>&emsp;&emsp;|– conf_loader.lua [配置加载]<br>&emsp;&emsp;|– constants.lua [常量定义]<br>&emsp;&emsp;|– init.lua [kong的入口，可以从这里开始阅读代码]<br>&emsp;&emsp;|– meta.lua [定义版本号之类]<br>&emsp;&emsp;|– mlcache.lua [封装了lua-resty-mlcache]<br>&emsp;&emsp;|– singletons.lua [单例模式，存放公共对象]  </p>\n<h3 id=\"执行入口\"><a href=\"#执行入口\" class=\"headerlink\" title=\"执行入口\"></a>执行入口</h3><p>&emsp;&emsp;以下是kong的nginx配置文件，笔者把一些和本章主题无关的先去掉了。  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init_by_lua_block &#123;</span><br><span class=\"line\">    kong = <span class=\"built_in\">require</span> <span class=\"string\">'kong'</span></span><br><span class=\"line\">    kong.init()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">init_worker_by_lua_block &#123;</span><br><span class=\"line\">    kong.init_worker()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">upstream kong_upstream &#123;</span><br><span class=\"line\">    server <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>;</span><br><span class=\"line\">    balancer_by_lua_block &#123;</span><br><span class=\"line\">        kong.balancer()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    keepalive <span class=\"number\">60</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    server_name kong;</span><br><span class=\"line\">    listen <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">8000</span>;</span><br><span class=\"line\">    location / &#123;     </span><br><span class=\"line\">        rewrite_by_lua_block &#123;</span><br><span class=\"line\">            kong.rewrite()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        access_by_lua_block &#123;</span><br><span class=\"line\">            kong.access()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        header_filter_by_lua_block &#123;</span><br><span class=\"line\">            kong.header_filter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        body_filter_by_lua_block &#123;</span><br><span class=\"line\">            kong.body_filter()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log_by_lua_block &#123;</span><br><span class=\"line\">            kong.<span class=\"built_in\">log</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    location = /kong_error_handler &#123;</span><br><span class=\"line\">        internal;</span><br><span class=\"line\">        content_by_lua_block &#123;</span><br><span class=\"line\">            kong.handle_error()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;可以看到kong的代码执行入口在init_by_lua_block块中，该块中的代码会在nginx的master加载配置的时候被执行。通过require ‘kong’得到的实例是一个全局对象，在Lua虚拟机里面执行的代码都可以访问到。<br>该实例通过master的fork进程方法共享给worker，如果worker修改该实例会触发操作系统进程的copy-on-write，worker进程就会拥有该实例的一个副本。<br>&emsp;&emsp;后缀是by_lua_block的都代表nginx处理请求的一个执行阶段，每个阶段都会执行相应的kong代码。nginx执行阶段流程如下如所示:  </p>\n<p><img src=\"/2018/04/16/20180416/openresty_phases.png\" alt=\"\"></p>\n<ul>\n<li>init_by_lua*<br>&emsp;&emsp;发生在master进程启动阶段。这里会对数据访问层进行初始化，加载插件的代码，构造路由规则表。  </li>\n<li>init_worker_by_lua*<br>&emsp;&emsp;发生在worker进程启动阶段。这里会开启数据同步机制，执行每个插件的init_worker方法。  </li>\n<li>set_by_lua*<br>&emsp;&emsp;处理请求第一个执行阶段。这里可以做一些流程分支处理判断变量初始化。kong没有使用该阶段。</li>\n<li>rewrite_by_lua*<br>&emsp;&emsp;这里可以对请求做一些修改。kong在这里会把处理代理给插件的rewrite方法。  </li>\n<li>access_by_lua*<br>&emsp;&emsp;kong在这里对请求进行路由匹配，找到后端的upstream服务的节点。  </li>\n<li>balancer_by_lua*<br>&emsp;&emsp;kong在这里会把上一阶段找到的服务节点设置给nginx的load balancer。如果设置了重试次数，此阶段可能会被执行多次。  </li>\n<li>header_filter_by_lua*<br>&emsp;&emsp;这里可以对响应头做一些处理。kong在这里会把处理代理给插件的header_filter方法。  </li>\n<li>body_filter_by_lua*<br>&emsp;&emsp;这里可以对响应体做一些处理。kong在这里会把处理代理给插件的body_filter方法。  </li>\n<li>log_by_lua*<br>&emsp;&emsp;kong在这里会通过插件异步记录日志和一些metrics数据。  </li>\n</ul>\n<h3 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h3><p>&emsp;&emsp;kong有三大核心模块：请求路由(Router)、负载均衡(Balancer)和集群数据同步。这3个模块加上插件就组成了kong的所有功能。<br>&emsp;&emsp;路由和负载均衡模块完全接管了nginx本身的策略，也是作为一个网关的核心功能。集群数据同步则弥补了nginx集群管理的缺点，可以使得路由规则和负载均衡策略的修改可以动态进行，省去了修改配置文件和重启的流程。       </p>\n<h2 id=\"Router\"><a href=\"#Router\" class=\"headerlink\" title=\"Router\"></a>Router</h2><h3 id=\"概览-1\"><a href=\"#概览-1\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p>&emsp;&emsp;路由是Kong的核心功能之一。Kong会代理HTTP请求，根据HTTP主机头、请求URI和请求方式(GET/POST等)匹配路由规则，找到实际处理请求的后端服务。</p>\n<p>&emsp;&emsp;Kong的路由规则由HTTP主机头、请求URI和请求方式组成。规则匹配发生在Nginx的Rewrite/Access阶段中，access_by_lua_block指令块里面的kong.access()方法的前置handler中。见<a href=\"https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L85\" target=\"_blank\" rel=\"noopener\">kong-nginx.conf:85</a>  </p>\n<p>&emsp;&emsp;路由规则的原始数据存储在数据库apis表中。HTTP主机头由表字段hosts描述、请求URI由表字段uris描述、请求方式由表字段methods描述。在MySQL中，这3个字段的数据存储格式都是JSON序列化之后字符串数组。apis的表结构描述如下： </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"string\">`apis`</span> (</span><br><span class=\"line\">  <span class=\"comment\">-- guid</span></span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 名称</span></span><br><span class=\"line\">  <span class=\"string\">`name`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- upstream标识</span></span><br><span class=\"line\">  <span class=\"string\">`upstream_url`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">1023</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 是否保留主机头</span></span><br><span class=\"line\">  <span class=\"string\">`preserve_host`</span> tinyint(<span class=\"number\">1</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 主机头匹配</span></span><br><span class=\"line\">  <span class=\"string\">`hosts`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">1023</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- uri匹配</span></span><br><span class=\"line\">  <span class=\"string\">`uris`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">1023</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 请求方法匹配</span></span><br><span class=\"line\">  <span class=\"string\">`methods`</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">1023</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 是否只接受https的请求</span></span><br><span class=\"line\">  <span class=\"string\">`https_only`</span> tinyint(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 如果接受https的请求并且客户端IP不在授信IP中，是否终止请求</span></span><br><span class=\"line\">  <span class=\"string\">`http_if_terminated`</span> tinyint(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'0'</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 由于链路问题(connection timeouts, connection resets等或者5xx错误)导致请求转发失败重试次数</span></span><br><span class=\"line\">  <span class=\"string\">`retries`</span> <span class=\"built_in\">smallint</span>(<span class=\"number\">6</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'5'</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 如果是uri前缀匹配，是否剥离掉uri前缀</span></span><br><span class=\"line\">  <span class=\"string\">`strip_uri`</span> tinyint(<span class=\"number\">1</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'1'</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 一些超时时间</span></span><br><span class=\"line\">  <span class=\"string\">`upstream_connect_timeout`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'60000'</span>,</span><br><span class=\"line\">  <span class=\"string\">`upstream_send_timeout`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'60000'</span>,</span><br><span class=\"line\">  <span class=\"string\">`upstream_read_timeout`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"string\">'60000'</span>,</span><br><span class=\"line\">  <span class=\"string\">`created_at`</span> <span class=\"keyword\">timestamp</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>(<span class=\"number\">3</span>),</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"string\">`name`</span> (<span class=\"string\">`name`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`apis_name_idx`</span> (<span class=\"string\">`name`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8 ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;路由规则的创建在Nginx的初始化阶段，init_by_lua_block指令块中的kong.init()方法里。见<a href=\"https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L26\" target=\"_blank\" rel=\"noopener\">kong-nginx.conf:26</a>  </p>\n<p>&emsp;&emsp;在kong.init()的末尾调用core.build_router(dao, “init”)方法构造路由表。见<a href=\"https://github.com/Kong/kong/blob/master/kong/init.lua#L174\" target=\"_blank\" rel=\"noopener\">init.lua:174</a>。  </p>\n<p>&emsp;&emsp;build_router方法的第一个参数是一个数据库操作对象，会使用它查询出数据库apis表中的数据。第二个参数是一个路由表在缓存中的版本号。如果apis表的数据发生变化，会触发缓存的invalidate操作，生成出一个新的version。此时在kong.access()方法中会再次调用build_router对路由表进行重建。见<a href=\"https://github.com/Kong/kong/blob/master/kong/core/handler.lua#L336\" target=\"_blank\" rel=\"noopener\">handler.lua:336</a>。  </p>\n<p>&emsp;&emsp;build_router会对从apis表中查询出来的数据按创建时间created_at从小到大进行排序。见<a href=\"https://github.com/Kong/kong/blob/master/kong/core/handler.lua#L54\" target=\"_blank\" rel=\"noopener\">handler.lua:54</a>。这样如果2条规则相同的话较早的规则会优先匹配。接着会构造一个Router对象，它会负责路由表的创建、路由规则的匹配操作。  </p>\n<h3 id=\"生成规则\"><a href=\"#生成规则\" class=\"headerlink\" title=\"生成规则\"></a>生成规则</h3><p>&emsp;&emsp;Router对象的第一个核心功能就是把数据库中的apis数据转化为适合进行匹配的规则。规则类型有3种：HOST、URI和METHOD，见<a href=\"https://github.com/Kong/kong/blob/master/kong/core/router.lua#L56\" target=\"_blank\" rel=\"noopener\">router.lua:56</a>。这3种类型分别由位标识0x01、0x02和0x04表示。3种类型组成7种匹配方式：  </p>\n<ul>\n<li>HOST and URI and METHOD，位标识为(0x01 | 0x02 | 0x04) == 0x07</li>\n<li>HOST and URI，位标识为(0x01 | 0x02) == 0x03</li>\n<li>HOST and METHOD，位标识为(0x01 | 0x04) == 0x05</li>\n<li>METHOD and URI，位标识为(0x04 | 0x02) == 0x06</li>\n<li>HOST，位标识为0x01</li>\n<li>URI，位标识为0x02</li>\n<li>METHOD， 位标识为0x04  </li>\n</ul>\n<p>&emsp;&emsp;创建规则前会先把数据库里存储的apis对象格式化成api_t对象，api_t格式如下：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api_t      = &#123;</span><br><span class=\"line\">    <span class=\"comment\">-- 数据库里面的apis对象</span></span><br><span class=\"line\">    api            = api,</span><br><span class=\"line\">    <span class=\"comment\">-- 是否对URI按前缀进行剥离</span></span><br><span class=\"line\">    strip_uri      = api.strip_uri,</span><br><span class=\"line\">    <span class=\"comment\">-- 请求转发的时候是否保留原始主机头</span></span><br><span class=\"line\">    preserve_host  = api.preserve_host,</span><br><span class=\"line\">    <span class=\"comment\">-- 7种匹配方式的位标识</span></span><br><span class=\"line\">    match_rules    = <span class=\"number\">0x00</span>,</span><br><span class=\"line\">    <span class=\"comment\">-- 主机头匹配规则，当作数组使用</span></span><br><span class=\"line\">    hosts          = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">-- uri匹配规则，当作数组使用</span></span><br><span class=\"line\">    uris           = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">-- method匹配规则，当作词典使用</span></span><br><span class=\"line\">    methods        = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">-- upstream信息</span></span><br><span class=\"line\">    upstream_url_t = &#123;&#125;,</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;如果主机头匹配里面包含通配符，如：*.example.com，则把通配表达式转成正则表达式：.+\\\\.example\\\\.com$，然后hosts字段里面存储的对象格式为： </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    wildcard = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    value    = <span class=\"string\">'*.example.com'</span>,</span><br><span class=\"line\">    regex    = <span class=\"string\">'.+\\\\.example\\\\.com$'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;如果主机头匹配里面是普通的字符串，如：abc.example.com，那么hosts字段里面存储的对象格式为：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    value    = abc.example.com,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;&emsp;使用正则表达式：^[a-zA-Z0-9.-_~/%]*$ 判断uri匹配是否是一个普通的uri前缀。如果是，如：/prefix/some，则uris字段里面存储的对象格式为：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    is_prefix = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    value    = <span class=\"string\">'/prefix/some'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;如果uri匹配是包含正则字符串，如：/users/\\d+/profile，则uris字段里面存储的对象格式为：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    is_regex     = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    value        = <span class=\"string\">'/users/\\d+/profile'</span>,</span><br><span class=\"line\">    regex        = <span class=\"string\">'/users/\\d+/profile'</span>,</span><br><span class=\"line\">    has_captures = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    strip_regex  = <span class=\"string\">'/users/\\d+/profile/?(?&lt;stripped_uri&gt;.*)'</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>  \n<p>&emsp;&emsp;如果method匹配是get方式，则会把get转成大写，如：GET，以此作为key放入methods词典中。</p>\n<p>&emsp;&emsp;使用一个词典数据结构categories对api_t对象以7种匹配方式进行归类。词典的key为7种匹配方式的位标识：0x01、0x02、0x03、0x04、0x05、0x06、0x07，value里面会按host、uri和method对规则进行分组。value定义如下：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">-- 按host分组的规则，词典类型</span></span><br><span class=\"line\">    apis_by_hosts   = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">-- 按uri分组的规则，词典类型</span></span><br><span class=\"line\">    apis_by_uris    = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">-- 按method分组的规则，词典类型</span></span><br><span class=\"line\">    apis_by_methods = &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">-- 该匹配模式下所有规则，数组类型</span></span><br><span class=\"line\">    all             = &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;如果一个匹配规则是hosts=[abc.com]、uris=[/path]、method=[GET]，那么categories会包含此规则的api_t对象。如下所示：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"number\">7</span> = &#123;</span><br><span class=\"line\">      apis_by_hosts   = &#123;</span><br><span class=\"line\">        abc.com = [api_t对象]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_uris    = &#123;</span><br><span class=\"line\">        /<span class=\"built_in\">path</span> = [api_t对象]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_methods = &#123;</span><br><span class=\"line\">        GET = [api_t对象]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      all             = [api_t对象],  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;如果另一个匹配规则是hosts=[abc.com]、uris=[/version]，那么categories会包含此规则的api_t对象2。如下所示：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"number\">3</span> = &#123;</span><br><span class=\"line\">      apis_by_hosts   = &#123;</span><br><span class=\"line\">        abc.com = [api_t对象<span class=\"number\">2</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_uris    = &#123;</span><br><span class=\"line\">        /version = [api_t对象<span class=\"number\">2</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      all             = [api_t对象<span class=\"number\">2</span>],  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">7</span> = &#123;</span><br><span class=\"line\">      apis_by_hosts   = &#123;</span><br><span class=\"line\">        abc.com = [api_t对象]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_uris    = &#123;</span><br><span class=\"line\">        /<span class=\"built_in\">path</span> = [api_t对象]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_methods = &#123;</span><br><span class=\"line\">        GET = [api_t对象]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      all             = [api_t对象],  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;另外使用一个词典数据结构plain_indexes和3个数组结构uris_prefixes、uris_regexes、和wildcard_hosts决定优先使用哪种匹配模式。它们的创建方式见<a href=\"https://github.com/Kong/kong/blob/master/kong/core/router.lua#L252\" target=\"_blank\" rel=\"noopener\">router.lua:252</a>。首先会使用plain_indexes匹配主机头、uri和请求方法，因为它的构造是一个词典结构，可直接根据主机头、uri和请求方法进行查询，效率比较高。plain_indexes的内容如下： </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    hosts = &#123;</span><br><span class=\"line\">      abc.com   = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    uris = &#123;</span><br><span class=\"line\">      /foo = <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods = &#123;</span><br><span class=\"line\">     GET = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>  \n<p>&emsp;&emsp;如果在plain_indexes里面没有查询到的话，则使用uris_prefixes、uris_regexes、和wildcard_hosts里面的规则一个一个进行匹配，直到匹配成功为止。</p>\n<h3 id=\"匹配流程\"><a href=\"#匹配流程\" class=\"headerlink\" title=\"匹配流程\"></a>匹配流程</h3><p>&emsp;&emsp;规则的匹配在kong.access方法里面，调用router.exec方法进行匹配。见<a href=\"https://github.com/Kong/kong/blob/master/kong/core/handler.lua#L354\" target=\"_blank\" rel=\"noopener\">handler.lua:354</a>。  </p>\n<p>&emsp;&emsp;router.exec方法从http请求里面获取主机头信息、HTTP请求方法和请求URI。然后调用find_api方法进行实际地匹配。见<a href=\"https://github.com/Kong/kong/blob/master/kong/core/router.lua#L594\" target=\"_blank\" rel=\"noopener\">router.lua:594</a>。   </p>\n<p>&emsp;&emsp;find_api首先从缓存里面查询匹配结果。如果缓存里面没有数据，则是第一次匹配。先把请求中的主机头放入ctx.req_host，请求uri放入ctx.req_uri，请求方法放入ctx.req_method。然后使用plain_indexes、uris_prefixes、uris_regexes、和wildcard_hosts选择匹配模式。这里如果是根据uri前缀、uri正则表达式或主机头通配符匹配到的话，则会把uri前缀或uri正则表达式放入ctx.hits.uri中，把主机头通配符放入ctx.hits.host中。后续就使用ctx去和规则进行匹配。匹配模式按照CATEGORIES定义的顺序进行降级匹配。如果匹配模式是0x07，则使用0x07里面的规则去匹配。如果匹配失败，则使用0x03的规则进行匹配。如果还是失败，则继续按0x05 -&gt; 0x06 -&gt; 0x01 -&gt; 0x02 -&gt; 0x04的降级顺序进行匹配，直到成功为止。  </p>\n<p>&emsp;&emsp;确定匹配模式之后，先使用reduce方法对候选的规则进行筛选。前面说到每一种匹配模式包含的规则会按host、uri和method进行分组。reduce方法就是选取数量最少的那个分组。如果那个分组下的规则匹配失败，则使用all下面的规则进行匹配。  </p>\n<p>&emsp;&emsp;现在举例说明。假设现在根据如下json创建了一个apis对象。  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"my-api\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"upstream_url\"</span>: <span class=\"string\">\"http://my-api.com\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hosts\"</span>: [<span class=\"string\">\"example.com\"</span>, <span class=\"string\">\"service.com\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"uris\"</span>: [<span class=\"string\">\"/foo\"</span>, <span class=\"string\">\"/bar\"</span>],</span><br><span class=\"line\">    <span class=\"attr\">\"methods\"</span>: [<span class=\"string\">\"GET\"</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;对应的api_t内容是：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">api_t      = &#123;</span><br><span class=\"line\">    api            = 数据库中的api对象,</span><br><span class=\"line\">    strip_uri      = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    preserve_host  = <span class=\"literal\">false</span>,</span><br><span class=\"line\">    match_rules    = <span class=\"number\">0x07</span>,</span><br><span class=\"line\">    hosts          = [</span><br><span class=\"line\">                      &#123;</span><br><span class=\"line\">                                value    = example.com,</span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                      &#123;</span><br><span class=\"line\">                                value    = service.com,</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    uris           = [</span><br><span class=\"line\">                      &#123;</span><br><span class=\"line\">                                is_prefix = <span class=\"literal\">true</span>,</span><br><span class=\"line\">                                value    = <span class=\"string\">'/foo'</span>,  </span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                      &#123;</span><br><span class=\"line\">                                is_prefix = <span class=\"literal\">true</span>,</span><br><span class=\"line\">                                value    = <span class=\"string\">'/bar'</span>,  </span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    methods        = &#123;GET = <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">    upstream_url_t = &#123;</span><br><span class=\"line\">                         scheme             = http,</span><br><span class=\"line\">                         host               = my-api.com,</span><br><span class=\"line\">                         port               = <span class=\"number\">80</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>  \n<p>&emsp;&emsp;categories内容如下：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"number\">7</span> = &#123;</span><br><span class=\"line\">      apis_by_hosts   = &#123;</span><br><span class=\"line\">        example.com = [api_t],</span><br><span class=\"line\">        service.com = [api_t]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_uris    = &#123;</span><br><span class=\"line\">        /foo = [api_t],</span><br><span class=\"line\">        /bar = [api_t],</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      apis_by_methods = &#123;</span><br><span class=\"line\">        GET = [api_t]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      all             = [api_t],  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;plain_indexes的内容如下：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    hosts = &#123;</span><br><span class=\"line\">      example.com   = <span class=\"literal\">true</span>,</span><br><span class=\"line\">      service.com   = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    uris = &#123;</span><br><span class=\"line\">      /foo = <span class=\"literal\">true</span>,</span><br><span class=\"line\">      /bar = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods = &#123;</span><br><span class=\"line\">     GET = <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;uris_prefixes的内容如下：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      is_prefix = <span class=\"literal\">true</span>,</span><br><span class=\"line\">      value    = <span class=\"string\">'/foo'</span>,  </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      is_prefix = <span class=\"literal\">true</span>,</span><br><span class=\"line\">      value    = <span class=\"string\">'/bar'</span>,  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;由于host匹配没有通配符以及uri匹配没有正则表达式，所以uris_regexes和wildcard_hosts为空。  </p>\n<p>&emsp;&emsp;假设现在有如下请求：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /foo HTTP/<span class=\"number\">1.1</span></span><br><span class=\"line\">Host: example.com</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;此请求的主机头是example.com，请求uri是/foo，请求方法是GET。首先使用plain_indexes确定匹配模式为0x07，因为plain_indexes.hosts包含example.com，位标识是0x01。plain_indexes.uris包含/foo，位标识是0x02。plain_indexes.methods包含GET，位标识是0x04。把0x01，0x02和0x04通过位或运算得到0x07。  </p>\n<p>&emsp;&emsp;根据0x07从categories里选择key为7的规则。reduce方法等价于:<br><code>min(#categories[7].apis_by_hosts[example.com], #categories[7].apis_by_uris[/foo], #categories[7].apis_by_methods[GET])</code><br>&emsp;&emsp;#号是取数组的长度。此处这3个数组的长度都是1，所以优先选择apis_by_hosts中的api_t规则进行匹配。  api_t里面的hosts、uris和methods匹配上了这个请求，此次匹配成功。  </p>\n<h2 id=\"Balancer\"><a href=\"#Balancer\" class=\"headerlink\" title=\"Balancer\"></a>Balancer</h2><h3 id=\"概览-2\"><a href=\"#概览-2\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p>&emsp;&emsp;Balancer对请求做负载均衡，使请求分散地转发到后端服务。从而可以优化资源利用率、提升吞吐量、减少延时以及提高容错等。Kong使用了DNS-Balancer和Ring-Balancer两种均衡模式。DNS-Balancer适合对外部的第三方服务进行负载均衡。候选服务器列表添加在A记录或SRV记录中。A记录中只包含IP地址，而且没有权重信息，适合简单的round-robin。SRV记录中包含IP地址和端口，并含有权重信息，可以按权重调拨流量以及IP地址复用。Ring-Balancer适合对内部服务进行负载运行。因为这种模式的控制性强，可以灵活地支持机器上下线操作、带权重的负载均衡以及可以进行蓝绿部署和金丝雀发布。本章着重分析Ring模式。  </p>\n<h3 id=\"Ring-Balancer\"><a href=\"#Ring-Balancer\" class=\"headerlink\" title=\"Ring-Balancer\"></a>Ring-Balancer</h3><p>&emsp;&emsp;在Kong里面，Ring-Balancer通过upstream和target对象描述。upstream对象用于调节负载均衡的行为，如权重分配、健康检查以及是否通过一致性hash绑定请求到对应的机器上。target存储进行负载均衡的机器列表。  </p>\n<p>&emsp;&emsp;upstream对象数据库表结构描述如下：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> upstreams (</span><br><span class=\"line\">  <span class=\"keyword\">id</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"keyword\">name</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">-- 槽位大小，用于调节权重</span></span><br><span class=\"line\">  slots <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- json格式存储的健康检查配置</span></span><br><span class=\"line\">  healthchecks <span class=\"built_in\">varchar</span>(<span class=\"number\">10000</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 首选hash输入值：none,consumer,ip,header</span></span><br><span class=\"line\">  hash_on <span class=\"built_in\">varchar</span>(<span class=\"number\">31</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 此选hash输入值</span></span><br><span class=\"line\">  hash_fallback <span class=\"built_in\">varchar</span>(<span class=\"number\">31</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 根据http header进行hash时，首选的header</span></span><br><span class=\"line\">  hash_on_header <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 此选的header</span></span><br><span class=\"line\">  hash_fallback_header <span class=\"built_in\">varchar</span>(<span class=\"number\">255</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  created_at <span class=\"keyword\">timestamp</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>(<span class=\"number\">3</span>),</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">id</span>),</span><br><span class=\"line\">  <span class=\"keyword\">UNIQUE</span> <span class=\"keyword\">KEY</span> <span class=\"keyword\">name</span> (<span class=\"keyword\">name</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> upstreams_name_idx (<span class=\"keyword\">name</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8 ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;target对象数据库表结构描述如下：  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> targets (</span><br><span class=\"line\">  <span class=\"keyword\">id</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">-- ip:port</span></span><br><span class=\"line\">  target <span class=\"built_in\">varchar</span>(<span class=\"number\">500</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 权重值</span></span><br><span class=\"line\">  weight <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 所属upstream</span></span><br><span class=\"line\">  upstream_id <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  created_at <span class=\"keyword\">timestamp</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CURRENT_TIMESTAMP</span>(<span class=\"number\">3</span>),</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">id</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> tragets_upstreamid_fk (upstream_id),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> targets_target_idx (target),</span><br><span class=\"line\">  <span class=\"keyword\">CONSTRAINT</span> tragets_upstreamid_fk FOREIGN <span class=\"keyword\">KEY</span> (upstream_id) <span class=\"keyword\">REFERENCES</span> upstreams (<span class=\"keyword\">id</span>) <span class=\"keyword\">ON</span> <span class=\"keyword\">DELETE</span> <span class=\"keyword\">CASCADE</span></span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8 ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure> \n<h4 id=\"构造balancer\"><a href=\"#构造balancer\" class=\"headerlink\" title=\"构造balancer\"></a>构造balancer</h4><p>&emsp;&emsp;Ring-Balancer的初始化发生在nginx工作进程的初始化阶段中，init_worker_by_lua_block指令块的kong.init_worker()方法里，见<a href=\"https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L30\" target=\"_blank\" rel=\"noopener\">nginx-kong.conf:30</a>。init_worker里面调用了balancer.init()方法做了实际的初始化工作。  </p>\n<p>&emsp;&emsp;balancer.init首先使用get_all_upstreams方法从数据库upstreams表加载所有数据到缓存中。调用create_balancer方法对每个查询出来的upstream对象，创建一个负载均衡器ring_balancer。均衡器的实现在resty.dns.balancer模块中，这个模块在Kong的lua-resty-dns-client项目里，代码见<a href=\"https://github.com/Kong/lua-resty-dns-client\" target=\"_blank\" rel=\"noopener\">github</a>，文档见<a href=\"https://kong.github.io/lua-resty-dns-client/modules/resty.dns.balancer.html\" target=\"_blank\" rel=\"noopener\">resty.dns.balancer</a>。  </p>\n<p>&emsp;&emsp;均衡器初始化使用了3个参数：wheelSize,order和dns，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L295\" target=\"_blank\" rel=\"noopener\">balancer.lua:295</a>。在0.12.1版本中，实际使用的就wheelSize这一个参数。如果wheelSize越大，目标机器的分布就越离散。这样在选择的时候既可以保证权重，连续选到相同的机器的概率也比较小。当然wheelSize越大，占用的内存就越多，重建的开销比较大。可以根据后端机器的数量选择的一个值，它的默认值是1000。  </p>\n<h4 id=\"加载target\"><a href=\"#加载target\" class=\"headerlink\" title=\"加载target\"></a>加载target</h4><p>&emsp;&emsp;fetch_target_history方法会从key为balancer:targets:${upstreamId}的缓存中选择upstream下面的target，如果缓存中没有就调用load_targets_into_memory方法从数据库中查询出来再放入缓存。<br>&emsp;&emsp;Kong的api没有对target按ip和端口进行修改的操作。(这是因为如果只是做添加操作的话，可以不重建balancer，减少开销，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L364\" target=\"_blank\" rel=\"noopener\">balancer.lua:364</a>。但是在check_target_history方法中有一个bug，导致即使只是添加target，还是会重建balancer，bug见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L357\" target=\"_blank\" rel=\"noopener\">balancer.lua:357</a>，这里把old_history和new_history写反了。)<br>&emsp;&emsp;由于只做添加，数据库表targets中可能会出现多条target相同的数据(ip和port相同)，但是权重是不同的数据。如果出现这种情况该决定使用哪个target记录呢?fetch_target_history方法会对查询出来的target记录按创建时间进行从老到新的排序，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L116\" target=\"_blank\" rel=\"noopener\">balancer.lua:116</a>。之后apply_history方法会按这个顺序把target添加到均衡器ring_balancer中，如果ip和端口相同，ring_balancer中后添加的记录会覆盖之前的，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L314\" target=\"_blank\" rel=\"noopener\">balancer.lua:314</a>。 </p>\n<p>&emsp;&emsp;无论是Ring-Balancer或DNS-Balancer，都是使用resty.dns.balancer这个负载均衡器做的负载均衡。这是因为在调用resty.dns.balancer的addHost方式时。如果hostname传的是域名的话，会做dns解析，把解析出来的节点添加进去。但如果hostname是ip地址的话，直接把添加参数所表示的节点。文档见<a href=\"https://kong.github.io/lua-resty-dns-client/modules/resty.dns.balancer.html#addHost\" target=\"_blank\" rel=\"noopener\">addHost</a></p>\n<h4 id=\"target健康检查\"><a href=\"#target健康检查\" class=\"headerlink\" title=\"target健康检查\"></a>target健康检查</h4><p>&emsp;&emsp;create_healthchecker方法为每个负载均衡器ring_balancer添加健康检查。<br>健康检查的实现在resty.healthcheck模块中，这个模块在Kong的lua-resty-healthcheck项目里，代码见<a href=\"https://github.com/Kong/lua-resty-healthcheck\" target=\"_blank\" rel=\"noopener\">github</a>，文档见<a href=\"https://kong.github.io/lua-resty-healthcheck/modules/resty.healthcheck.html\" target=\"_blank\" rel=\"noopener\">resty.healthcheck</a>。<br>&emsp;&emsp;create_healthchecker使用如下代码构造健康检查器：  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> healthchecker, err = healthcheck.new(&#123;</span><br><span class=\"line\">   name = upstream.name,</span><br><span class=\"line\">   shm_name = <span class=\"string\">\"kong_healthchecks\"</span>,</span><br><span class=\"line\">   checks = upstream.healthchecks,</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;shm_name传递的是lua-resty-healthcheck需要的nginx中的共享内存名，用于存储当前哪些节点的失败或成功次数。定义见<a href=\"https://github.com/cstoppgmr/material/blob/master/articles/APIGateway/nginx-kong.conf#L21\" target=\"_blank\" rel=\"noopener\">nginx-conf:21</a>。</p>\n<p>&emsp;&emsp;checks传递的是健康检查的json配置。健康检查有主动检查和被动检查2种。  </p>\n<p>&emsp;&emsp;主动检查需要设置检查url、超时时间、检查间隔、失败判断码、失败判断次数、成功判断码、成功判断次数、超时判断次数等。<br>&emsp;&emsp;kong默认的主动检查配置如下(这个配置不会启用主动检查，因为tcp_failures、timeouts、http_failures、interval和successes都被设成了0)：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"active\":&#123;</span><br><span class=\"line\">    \"unhealthy\":&#123;</span><br><span class=\"line\">        \"http_statuses\":[</span><br><span class=\"line\">            429,</span><br><span class=\"line\">            404,</span><br><span class=\"line\">            500,</span><br><span class=\"line\">            501,</span><br><span class=\"line\">            502,</span><br><span class=\"line\">            503,</span><br><span class=\"line\">            504,</span><br><span class=\"line\">            <span class=\"number\">505</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        \"tcp_failures\":0,</span><br><span class=\"line\">        \"timeouts\":0,</span><br><span class=\"line\">        \"http_failures\":0,</span><br><span class=\"line\">        \"interval\":0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"http_path\":\"/\",</span><br><span class=\"line\">    \"timeout\":1,</span><br><span class=\"line\">    \"healthy\":&#123;</span><br><span class=\"line\">        \"http_statuses\":[</span><br><span class=\"line\">            200,</span><br><span class=\"line\">            <span class=\"number\">302</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        \"interval\":0,</span><br><span class=\"line\">        \"successes\":0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"concurrency\":10</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;kong会根据配置定期对后端服务节点机器调用检查url进行检查，如果检查超时或HTTP返回码满足失败条件的次数超过限制，负载均衡器会把该节点标记为不可用。 </p>\n<p>&emsp;&emsp;被动检查需要设置失败判断码、失败判断次数、成功判断码、成功判断次数、超时判断次数等。<br>&emsp;&emsp;kong默认的被动检查配置如下(这个配置不会启用被动检查，因为tcp_failures、timeouts、http_failures和successes都被设成了0)：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"passive\":&#123;</span><br><span class=\"line\">    \"unhealthy\":&#123;</span><br><span class=\"line\">        \"http_failures\":0,</span><br><span class=\"line\">        \"http_statuses\":[</span><br><span class=\"line\">            429,</span><br><span class=\"line\">            500,</span><br><span class=\"line\">            <span class=\"number\">503</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        \"tcp_failures\":0,</span><br><span class=\"line\">        \"timeouts\":0</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"healthy\":&#123;</span><br><span class=\"line\">        \"http_statuses\":[</span><br><span class=\"line\">            200,</span><br><span class=\"line\">            201,</span><br><span class=\"line\">            202,</span><br><span class=\"line\">            203,</span><br><span class=\"line\">            204,</span><br><span class=\"line\">            205,</span><br><span class=\"line\">            206,</span><br><span class=\"line\">            207,</span><br><span class=\"line\">            208,</span><br><span class=\"line\">            226,</span><br><span class=\"line\">            300,</span><br><span class=\"line\">            301,</span><br><span class=\"line\">            302,</span><br><span class=\"line\">            303,</span><br><span class=\"line\">            304,</span><br><span class=\"line\">            305,</span><br><span class=\"line\">            306,</span><br><span class=\"line\">            307,</span><br><span class=\"line\">            <span class=\"number\">308</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        \"successes\":0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;kong在跟后端机器进行通信的过程中，判断其返回码，有无超时。然后根据配置决定是否对节点进行标记。     </p>\n<p>&emsp;&emsp;由于被动检查的操作是在负载均衡器里面进行，attach_healthchecker_to_balancer里面对负载均衡器设置了report_http_status和report_tcp_failure方法，这2个方法会在转发请求的时候被调用，把请求结果通知给健康检查器，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L249\" target=\"_blank\" rel=\"noopener\">balancer.lua:249</a>。<br>&emsp;&emsp;这里要注意下如果被动检查把一个节点标记为不可用的话，即使该节点已经恢复了，kong也不会自动地把该节点添加进balancer中。需要用户手动调用一个管理接口进行恢复，见<a href=\"https://getkong.org/docs/0.12.x/health-checks-circuit-breakers/#passive-health-checks-circuit-breakers\" target=\"_blank\" rel=\"noopener\">文档</a>。  </p>\n<p>&emsp;&emsp;构造完健康检查器后，调用populate_healthchecker方法把负载均衡器中节点添加到健康检查器中。然后调用attach_healthchecker_to_balancer监听健康检查器的事件：healthchecker.events.healthy和healthchecker.events.unhealthy，并设置回调方法。回调方法就是根据健康检查器的事件类型，在负载均衡器中把后端节点标记为可用或不可用，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L229\" target=\"_blank\" rel=\"noopener\">balancer.lua:229</a>。 </p>\n<h4 id=\"选择target\"><a href=\"#选择target\" class=\"headerlink\" title=\"选择target\"></a>选择target</h4><p>&emsp;&emsp;当请求匹配出一条路由规则之后，就会在该规则下面的target中选一个目标实例进行转发。目标实例的选择发生在kong.access()的后置handler中，调用balancer.execute方式进行选择。target的选择全权委托给了resty.dns.balancer对象，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/balancer.lua#L689\" target=\"_blank\" rel=\"noopener\">balancer.lua:689</a>。<br>&emsp;&emsp;选择target的算法是带权重的round-robins。普通的round-robins算法把所有候选的target放入一个数组中，确定一个数组的起始元素(一般取第一个)。之后每次选择的时候按顺序往后选一个，到末尾时再从头开始遍历。带权重的round-robins算法相似，也是遍历数组。只不过数组的大小会远远超过target的数量，resty.dns.balancer初始化的时候wheelSize就是指定这个数组的大小。wheelSize和每个target的权重值确定一个target在数组中分配的数量，然后随机选择数组的位置进行放入。</p>\n<h2 id=\"集群间数据同步\"><a href=\"#集群间数据同步\" class=\"headerlink\" title=\"集群间数据同步\"></a>集群间数据同步</h2><h3 id=\"概览-3\"><a href=\"#概览-3\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p>&emsp;&emsp;kong的代码运行于nginx的worker进程中。kong对数据的修改会在一个worker中进行，数据被修改后需要通知给本地的其他worker进程和其他机器上的worker进程。kong使用的进程间通信主要方式有：1. 本机间通信-共享内存 2. 跨机器通信-数据库。  </p>\n<h3 id=\"数据共享\"><a href=\"#数据共享\" class=\"headerlink\" title=\"数据共享\"></a>数据共享</h3><p>&emsp;&emsp;kong的数据存储在数据库中，同时在缓存中保留一份。当数据库的中的数据被修改时，需要发出相应的事件通知其他worker。其他worker接收事件后，删除缓存中对应的数据。下次从缓存读数据时发现没有的话，就从数据库加载出来。<br>&emsp;&emsp;事件分为本地事件和集群事件。本地事件用于通知在一台机器上的worker，集群事件用于通知在多台机器上的worker。</p>\n<h4 id=\"共享内存\"><a href=\"#共享内存\" class=\"headerlink\" title=\"共享内存\"></a>共享内存</h4><p>&emsp;&emsp;本地事件通过共享内存实现。kong实现了一套基于nginx共享内存的事件发布-订阅机制，源码见仓库<a href=\"https://github.com/Kong/lua-resty-worker-events\" target=\"_blank\" rel=\"noopener\">lua-resty-worker-events</a>。该包提供post_local方法在worker进程内进行事件发布，提供post方法在同属于一台机器上的worker进程间进行事件发布。这2个方法需要指定source和event来确定事件源。<br>&emsp;&emsp;kong的数据访问层<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/dao/dao.lua\" target=\"_blank\" rel=\"noopener\">dao.lua</a>封装了insert、update和delete三个对数据操作的方法。这三个方法分别会使用post_local发出source为dao:crud，event为insert、delete、update的数据增、删、改的事件。事件的数据格式如下:  </p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   schema    = self.schema, <span class=\"comment\">--表名</span></span><br><span class=\"line\">   operation = <span class=\"string\">\"create\"</span>, <span class=\"comment\">--操作类型</span></span><br><span class=\"line\">   entity    = res, <span class=\"comment\">--数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure> \n<p>&emsp;&emsp;worker进程启动的时候会在init_worker阶段注册这些事件的订阅方法，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/handler.lua#L97\" target=\"_blank\" rel=\"noopener\">handler.lua:97</a>。订阅方法中把所有的dao:crud事件按表名称使用post_local再进行分发。所以从dao:crud分发的事件如下:  </p>\n<ul>\n<li>source=crud, event=apis<br>这个事件会通知所有的worker(包含不同机器)apis数据的修改。这里对缓存中对key为router:version进行invalidate操作会发送一条channel=invalidations集群事件。  </li>\n<li>source=crud, event=targets<br>这个事件会通知所有的worker(包含不同机器)targets数据的修改。使用cluster_events:broadcast方法发送一条channel=balancer:targets集群事件。</li>\n<li>source=crud, event=upstreams<br>这个事件会通知所有的worker(包含不同机器)upstreams数据的修改。使用cluster_events:broadcast方法发送一条channel=balancer:upstreams集群事件。</li>\n</ul>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>&emsp;&emsp;集群事件通过数据库实现。数据库表cluster_events存放用于集群间分发的事件。cluster_events表结构如下:  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> cluster_events (</span><br><span class=\"line\">  <span class=\"keyword\">id</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 标识生成事件的节点id</span></span><br><span class=\"line\">  node_id <span class=\"built_in\">varchar</span>(<span class=\"number\">64</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 事件产生时间，精确到毫秒 </span></span><br><span class=\"line\">  <span class=\"keyword\">at</span> <span class=\"keyword\">timestamp</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 事件生效时间，精确到毫秒</span></span><br><span class=\"line\">  nbf <span class=\"keyword\">timestamp</span>(<span class=\"number\">3</span>) <span class=\"literal\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 事件过期时间，精确到毫秒</span></span><br><span class=\"line\">  expire_at <span class=\"keyword\">timestamp</span>(<span class=\"number\">3</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 事件类型</span></span><br><span class=\"line\">  channel <span class=\"built_in\">varchar</span>(<span class=\"number\">1023</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"comment\">-- 事件数据</span></span><br><span class=\"line\">  <span class=\"keyword\">data</span> <span class=\"built_in\">varchar</span>(<span class=\"number\">10000</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  </span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"keyword\">id</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> cluster_events_at_idx (<span class=\"keyword\">at</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> cluster_events_channelt_idx (channel)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=utf8 ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure> \n<p>channel的类型有:  </p>\n<ul>\n<li>invalidations<br>表示路由规则、插件配置的变更</li>\n<li>balancer:targets<br>表示负载均衡的targets列表发生变更</li>\n<li>balancer:upstreams<br>表示upstream对象发生变更</li>\n<li>balancer:post_health<br>表示target的健康状态发生变更。由于被动健康检查拉出实例后，kong不会在对该实例进行自动拉入，需要通过该事件来拉入实例。  </li>\n</ul>\n<p>&emsp;&emsp;调用cluster_events:broadcast方法会往cluster_events表中新增一条记录。在init_worker阶段通过调用cluster_events:subscribe会开启一个定时器，定时查询出cluster_events表中新增的记录。这里要注意的是同一台机器上只会有一个worker进程会对数据库进行查询(通过加锁实现，代码见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/cluster_events.lua#L303\" target=\"_blank\" rel=\"noopener\">cluster_events:303</a>)，查询出来后再通过共享内存的方式通知给这台机器上的其他worker。<br>&emsp;&emsp;配置参数db_update_frequency确定查询数据库的间隔，默认为5秒。数据范围根据at字段是否落在(起始时间, 结束时间]确定。起始时间第一次设置在init_worker阶段，调用ngx.now()获取当前时间(精确到毫秒)并放入key为cluster_events:at的共享内存中。之后抢到锁的worker会从共享内存中取出该时间，该时间需要减去db_update_propagation + 0.001来确定起始时间，以防止事件丢失。配置参数db_update_propagation默认为0。结束时间取ngx.now()的值。查询成功后会把结束时间覆盖之前的起始时间，并把该事件分发到本机的其他worker。对于设置了nbf的事件，kong如果发现还没到生效时间，就会通过ngx.timer设置一个定时器延后分发该事件。  </p>\n<h2 id=\"Plugin\"><a href=\"#Plugin\" class=\"headerlink\" title=\"Plugin\"></a>Plugin</h2><h3 id=\"概览-4\"><a href=\"#概览-4\" class=\"headerlink\" title=\"概览\"></a>概览</h3><p>&emsp;&emsp;kong的插件可以在不修改kong本身源码的情况下方便地添加一些功能。插件不仅可以处理请求，还可以定义API，操作数据库。kong本身提供了许多插件，支持鉴权认证、安全控制、流量调控和请求报文转换等。见<a href=\"https://konghq.com/plugins/\" target=\"_blank\" rel=\"noopener\">plugins list</a>   </p>\n<h3 id=\"执行原理\"><a href=\"#执行原理\" class=\"headerlink\" title=\"执行原理\"></a>执行原理</h3><p>&emsp;&emsp;每个插件都需要放置在plugins目录下。这里有个<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/plugins/base_plugin.lua\" target=\"_blank\" rel=\"noopener\">base_plugin.lua</a>文件，定义了一个每个插件都需要去继承的基类。该基类定义了一些每个子类都需要去实现的方法，kong在每个执行阶段会调用。插件需要定义一个handler.lua文件，在这个文件里面去实现子类。此外还需要定义一个schema.lua文件，在这里定义每个插件的配置数据。<br>&emsp;&emsp;在nginx的master启动阶段，会扫描plugins目录下面的所有插件，加载handler.lua和schema.lua中定义的模块，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/init.lua#L78\" target=\"_blank\" rel=\"noopener\">kong/init.lua:78</a>。<br>&emsp;&emsp;数据库中的plugins表定义了需要启用的插件。只有在这张表里面存在的插件，并且是开启状态的才会被使用。<br>&emsp;&emsp;插件还可以定义一个api.lua文件，用于暴露一些api接口。如oauth2插件。kong在nginx的配置文件里面开启了8001端口，所有的管理api都暴露在这个端口上。它会调用kong/init.lua中的serve_admin_api方法，使用lapis模块加载api/routes/init.lua，初始化管理接口。这里也会加载插件的api.lua，加载插件的接口，见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/api/init.lua#L158\" target=\"_blank\" rel=\"noopener\">api/init.lua:158</a>。<br>&emsp;&emsp;在每个请求的执行阶段，都会先执行kong的前置处理方法，然后遍历所有启用的插件执行每个阶段对应的方法。如果读者看过base_plugin的文件话会发现基本上所有的方法都会传一个conf参数。这个就是在plugins表中定义的每个插件需要用到的配置。遍历插件的时候会从缓存里面加载插件配置，如果缓存失效就会从数据里面重新加载一遍。我们可以触发invalidations集群事件来动态的更新插件配置。见<a href=\"https://github.com/Kong/kong/blob/0.12.1/kong/core/plugins_iterator.lua\" target=\"_blank\" rel=\"noopener\">core/plugins_iterator.lua</a>。</p>"},{"title":"心经","date":"2018-04-26T11:24:37.000Z","author":"费永军","_content":"\n&emsp;&emsp;<font color=DarkBlue size=10>观自在菩萨，行深般若波罗蜜多时，照见五蕴皆空，度一切苦厄。舍利子，色不异空，空不异色，色即是空，空即是色，受想行识，亦复如是。舍利子，是诸法空相，不生不灭，不垢不净，不增不减。是故空中无色，无受想行识，无眼耳鼻舌身意，无色声香味触法，无眼界，乃至无意识界，无无明，亦无无明尽，乃至无老死，亦无老死尽。无苦集灭道，无智亦无得。以无所得故。菩提萨埵，依般若波罗蜜多故，心无挂碍。无挂碍故，无有恐怖，远离颠倒梦想，究竟涅盘。三世诸佛，依般若波罗蜜多故，得阿耨多罗三藐三菩提。故知般若波罗蜜多，是大神咒，是大明咒，是无上咒，是无等等咒，能除一切苦，真实不虚。故说般若波罗蜜多咒，即说咒曰：揭谛揭谛，波罗揭谛，波罗僧揭谛，菩提萨婆诃。</font>\n","source":"_posts/心经.md","raw":"---\ntitle: 心经\ndate: 2018-04-26 19:24:37\ntags: [佛学]\ncategories: 佛学\nauthor: 费永军\n---\n\n&emsp;&emsp;<font color=DarkBlue size=10>观自在菩萨，行深般若波罗蜜多时，照见五蕴皆空，度一切苦厄。舍利子，色不异空，空不异色，色即是空，空即是色，受想行识，亦复如是。舍利子，是诸法空相，不生不灭，不垢不净，不增不减。是故空中无色，无受想行识，无眼耳鼻舌身意，无色声香味触法，无眼界，乃至无意识界，无无明，亦无无明尽，乃至无老死，亦无老死尽。无苦集灭道，无智亦无得。以无所得故。菩提萨埵，依般若波罗蜜多故，心无挂碍。无挂碍故，无有恐怖，远离颠倒梦想，究竟涅盘。三世诸佛，依般若波罗蜜多故，得阿耨多罗三藐三菩提。故知般若波罗蜜多，是大神咒，是大明咒，是无上咒，是无等等咒，能除一切苦，真实不虚。故说般若波罗蜜多咒，即说咒曰：揭谛揭谛，波罗揭谛，波罗僧揭谛，菩提萨婆诃。</font>\n","slug":"心经","published":1,"updated":"2018-04-25T07:17:26.139Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjget2seg000d50lidpk9k2pt","content":"<p>&emsp;&emsp;<font color=\"DarkBlue\" size=\"10\">观自在菩萨，行深般若波罗蜜多时，照见五蕴皆空，度一切苦厄。舍利子，色不异空，空不异色，色即是空，空即是色，受想行识，亦复如是。舍利子，是诸法空相，不生不灭，不垢不净，不增不减。是故空中无色，无受想行识，无眼耳鼻舌身意，无色声香味触法，无眼界，乃至无意识界，无无明，亦无无明尽，乃至无老死，亦无老死尽。无苦集灭道，无智亦无得。以无所得故。菩提萨埵，依般若波罗蜜多故，心无挂碍。无挂碍故，无有恐怖，远离颠倒梦想，究竟涅盘。三世诸佛，依般若波罗蜜多故，得阿耨多罗三藐三菩提。故知般若波罗蜜多，是大神咒，是大明咒，是无上咒，是无等等咒，能除一切苦，真实不虚。故说般若波罗蜜多咒，即说咒曰：揭谛揭谛，波罗揭谛，波罗僧揭谛，菩提萨婆诃。</font></p>\n","site":{"data":{}},"excerpt":"","more":"<p>&emsp;&emsp;<font color=\"DarkBlue\" size=\"10\">观自在菩萨，行深般若波罗蜜多时，照见五蕴皆空，度一切苦厄。舍利子，色不异空，空不异色，色即是空，空即是色，受想行识，亦复如是。舍利子，是诸法空相，不生不灭，不垢不净，不增不减。是故空中无色，无受想行识，无眼耳鼻舌身意，无色声香味触法，无眼界，乃至无意识界，无无明，亦无无明尽，乃至无老死，亦无老死尽。无苦集灭道，无智亦无得。以无所得故。菩提萨埵，依般若波罗蜜多故，心无挂碍。无挂碍故，无有恐怖，远离颠倒梦想，究竟涅盘。三世诸佛，依般若波罗蜜多故，得阿耨多罗三藐三菩提。故知般若波罗蜜多，是大神咒，是大明咒，是无上咒，是无等等咒，能除一切苦，真实不虚。故说般若波罗蜜多咒，即说咒曰：揭谛揭谛，波罗揭谛，波罗僧揭谛，菩提萨婆诃。</font></p>\n"}],"PostAsset":[{"_id":"source/_posts/20180416/openresty_phases.png","slug":"openresty_phases.png","post":"cjget2sdw000050liijfcczwe","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjget2sdw000050liijfcczwe","category_id":"cjget2se5000150litgyj2u5g","_id":"cjget2sea000450li1aq16ghu"},{"post_id":"cjget2seg000d50lidpk9k2pt","category_id":"cjget2sem000g50licww7ul5j","_id":"cjget2ser000k50li4rw7ji9c"}],"PostTag":[{"post_id":"cjget2sdw000050liijfcczwe","tag_id":"cjget2se8000250livystzop3","_id":"cjget2sec000850lic065kccw"},{"post_id":"cjget2sdw000050liijfcczwe","tag_id":"cjget2se9000350li29gsu897","_id":"cjget2sec000950ligqgyvw2h"},{"post_id":"cjget2sdw000050liijfcczwe","tag_id":"cjget2sea000550lia0vr2axg","_id":"cjget2sec000a50lih1oezbdp"},{"post_id":"cjget2sdw000050liijfcczwe","tag_id":"cjget2seb000650li56ve6498","_id":"cjget2sec000b50lik4s73wha"},{"post_id":"cjget2sdw000050liijfcczwe","tag_id":"cjget2seb000750liydhxh6sn","_id":"cjget2sec000c50lic707ss5c"},{"post_id":"cjget2seg000d50lidpk9k2pt","tag_id":"cjget2sen000h50li00pq3824","_id":"cjget2ser000j50liodwdl65p"}],"Tag":[{"name":"API网关","_id":"cjget2se8000250livystzop3"},{"name":"nginx","_id":"cjget2se9000350li29gsu897"},{"name":"openresty","_id":"cjget2sea000550lia0vr2axg"},{"name":"kong","_id":"cjget2seb000650li56ve6498"},{"name":"lua","_id":"cjget2seb000750liydhxh6sn"},{"name":"佛学","_id":"cjget2sen000h50li00pq3824"}]}}