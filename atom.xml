<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>金飞的个人博客</title>
  
  <subtitle>上善若水，知行合一</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jinfei21.github.io/"/>
  <updated>2018-10-31T03:04:40.578Z</updated>
  <id>https://jinfei21.github.io/</id>
  
  <author>
    <name>费永军</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈深度学习</title>
    <link href="https://jinfei21.github.io/2018/10/30/%E6%B5%85%E8%B0%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://jinfei21.github.io/2018/10/30/浅谈深度学习/</id>
    <published>2018-10-30T03:13:05.000Z</published>
    <updated>2018-10-31T03:04:40.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;研究生学的是数据挖掘，搞过一段时间的BP神经网络，当年为了发表论文，硬着头皮推导了三个月的梯度下降算法才从数学原理上搞明白，后来还用c语言实现了一版。也正是因为这段痛苦的经历，后面放弃继续深入研究下去。最近这几年随着TensorFlow热门起来，机器学习发展到深度学习，人工智能越来越热门了，现在不了解点人工智能的东西都不好意思说在IT界混了。当年学习机器学习时，深度学习还没有出来。最近我也一直断断续续的在学习这块内容，这期就简单聊一下深度学习，去掉复杂繁琐的数学公式推导，让大家对深度学习有个基本概念。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&emsp;&emsp;20世纪80年代末期，人工神经网络的反向传播算法（也叫Back Propagation算法或者BP算法）的发明，给机器学习带来了希望，掀起了基于统计模型的机器学习热潮。一个基本的神经网络模型如下图所示：<br><img src="/2018/10/30/浅谈深度学习/BP神经网络.jpg" alt=""><br>&emsp;&emsp;上图中每个圆圈都是一个神经元，每条线表示神经元之间的连接。可以看到，神经元被分了多层，层与层之间的神经元有连接，而层内之间的神经元没有连接。最左边的是输入层，负责接收输入数据。最右边是输出层，负责输出最终结果。输入层和输出层之间的层叫做隐藏层。<br>&emsp;&emsp;隐藏层大于2层的神经网络叫做深度神经网络，而<em>深度学习</em>就是使用深层架构（比如，深度神经网络）的机器学习方法。深层网络和浅层网络相比，深层网络表达力更强。事实上，一个仅有一个隐藏层的神经网络能拟合任何一个函数，但是有一个缺点就是浅层网络需要更多的神经元。而深层网络可以用少的多的神经元拟合同样的函数，不过深层网络也有缺点，就是它不太容易训练收敛。简单的说，就是训练好一个深层神经网络往往需要大量的数据和技巧。<br>&emsp;&emsp;从上图中可以看到，构成神经网络的基本单位就是一个个神经元，那什么是神经元呢？神经元也叫感知器，在上个世纪50-70年代很流行，也解决过很多实际的问题，并且感知器的算法也很简单，请看下图：<br><img src="/2018/10/30/浅谈深度学习/神经元.png" alt=""><br>&emsp;&emsp;可以看到，一个感知器有如下组成部分：<br><img src="/2018/10/30/浅谈深度学习/神经元组成部分.png" alt=""><br>&emsp;&emsp;了解了神经网络的结构，那么如何训练神经网络呢？训练神经网络实际上就是参数W取什么值最优。一般来说，根据训练样本的不同可以分为两类机器学习方法。</p><blockquote><ul><li>监督学习：这种训练方法要求提供的训练样本既要包含输入特征X，也要包含对应的输出Y。比如我们知道一些人的工作年限，工作职级，所在行业，也知道他们对应的收入。我们就可以用这样的样本去训练模型，让模型既看到我们提出的问题（输入特征x），也看到对应问题的答案（标记y）。当模型看到足够多的样本后，它就能总结出其中的规律，然后就可以预测那些它没有看过的输入所对应的答案了。</li></ul></blockquote><blockquote><ul><li>无监督学习：这种训练方法要求提供的样本可以只有x没有y。模型可以总结出特征x的一些规律，但是无法知道其对应的答案。这种方法一般用在聚类分析上，比如语音识别领域，先让模型总结出那些音节是相似的，然后再用少量带有标注的训练样本，告诉模型其中一些音节对应的文字，这样模型就能把相似音节都对应到相应文字上，从而完成模型的训练。</li></ul></blockquote><p>&emsp;&emsp;先只考虑监督学习，在监督学习下，对于一个样本，我们知道它的特征x，以及标记y。同时，我们还可以根据模型h(x)计算得到输出y’。注意这里面我们用表示训练样本里面的标记，也就是实际值；用带上’的表示模型计算的出来的预测值。模型计算出来的预测值和实际值越接近越好。最后问题就演变成求所有单个样本误差总和的最小值，如果能找到一组W能满足这个目标，那就是模型的最终结果。<br>&emsp;&emsp;大学时我们学过怎样求函数的极值。函数的极值点，就是它的导数的那个点。因此我们可以通过解方程，求得函数的极值点。不过对于计算机来说，它可不会解方程。但是它可以凭借强大的计算能力，一步一步的去把函数的极值点『试』出来。如下图所示：<br><img src="/2018/10/30/浅谈深度学习/梯度下降.jpg" alt=""><br>&emsp;&emsp;首先随便选择一个点开始，比如上图x0的点。接下来，每次迭代修改x的为x1,x2,x3,…，经过数次迭代后最终达到函数最小值点。现在的问题关键是如何修改x，保证能往函数最小值那个方向前进？这里就用上大学学到的梯度概念了，翻开大学高数课的课本，我们会发现梯度是一个向量，它指向函数值上升最快的方向。显然，梯度的反方向当然就是函数值下降最快的方向了。我们每次沿着梯度相反方向去修改的值，当然就能走到函数的最小值附近。之所以是最小值附近而不是最小值那个点，是因为我们每次移动的步长不会那么恰到好处，有可能最后一次迭代走远了越过了最小值那个点。步长的选择是门手艺，如果选择小了，那么就会迭代很多轮才能走到最小值附近；如果选择大了，那可能就会越过最小值很远，收敛不到一个好的点上。</p><p>&emsp;&emsp;现在，我们需要知道一个神经网络的每个连接上的权值是如何得到的。我们可以说神经网络是一个模型，那么这些权值就是模型的参数，也就是模型要学习的东西。然而，一个神经网络的连接方式、网络的层数、每层的节点数这些参数，则不是学习出来的，而是人为事先设置的。对于这些人为设置的参数，我们称之为超参数(Hyper-Parameters)。这些超参数的不同，则对应不同的模型，下面介绍几种常见的网络模型：</p><h3 id="全连接神经网络"><a href="#全连接神经网络" class="headerlink" title="全连接神经网络"></a>全连接神经网络</h3><p><img src="/2018/10/30/浅谈深度学习/全连接神经网络.jpg" alt=""><br>&emsp;&emsp;这种网络在使用反向传播算法进行梯度计算时，可能导致梯度消失的问题。不太适合图形识别这样的应用领域，原因主要是以下几个：</p><blockquote><ul><li><em>参数数量太多</em> ：可以考虑输入1000*1000像素的图片，输入层得有1000x1000=100万节点。如果只有一个100个节点的隐藏层，那么隐藏层就需要（1000x1000+1）x100 = 1亿参数，这实在太大了，因此扩展性非常差。</li></ul></blockquote><blockquote><ul><li><em>没有利用像素之间的位置信息</em> ：对于图像识别任务来说，每个像素和其周围像素的联系是比较紧密的，和离得较远的像素联系可能就小的多。如果一个神经元和上一层所有的神经元相连，那么就相当于对于一个像素来说，把图像的所有像素都同等对待了，这不符合前面的要求。每次学习完连接权重后，最终可能发现很多权重的值很小，努力学习不重要的权重，这样的学习效率非常低。</li></ul></blockquote><blockquote><ul><li><em>网络层数限制</em> ：网络层数越多其表达能力越强，同时通过梯度下降算法达到权重收敛的难度也会越来越大，因为全连接神经网络的梯度很难传递超过3层。</li></ul></blockquote><h3 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h3><p>&emsp;&emsp;由于全连接网络的诸多缺点，后来的计算机科学家想了很多办法解决这些问题，归纳下来主要有三个思路：</p><blockquote><ul><li><em>局部连接</em> ： 每个神经元不再和上一层的所有神经元相连，只和一部分神经元相连，这样就减少了很多参数。</li><li><em>权值共享</em> ：一组连接可以共享同一权重，而不是每个连接都有不同权重，这样也减少了很多参数。</li><li><em>下采样</em>  ：使用Pooling（取最大值，最小值，平均值）来减少每层的样本数，进一步减少参数数量，同时还可以提升模型的鲁棒性。</li></ul></blockquote><p>&emsp;&emsp;下图就是一个典型的卷积神经网络：<br><img src="/2018/10/30/浅谈深度学习/卷积神经网络.jpg" alt=""><br>&emsp;&emsp;一个卷积神经网络由若干卷积层、Pooling层、全连接层组成。你可以构建各种不同的卷积神经网络，它的常用架构模式为N个卷积层叠加，然后(可选)叠加一个Pooling层，重复这个结构M次，最后叠加K个全连接层。</p><p>&emsp;&emsp;从图中可以发现卷积神经网络的层结构和全连接神经网络的层结构有很大不同。全连接神经网络每层的神经元是按照一维排列的，也就是排成一条线的样子；而卷积神经网络每层的神经元是按照三维排列的，也就是排成一个长方体的样子，有宽度、高度和深度。<br>&emsp;&emsp;对于图中展示的神经网络，我们看到输入层的宽度和高度对应于输入图像的宽度和高度，而它的深度为1。接着，第一个卷积层对这幅图像进行了卷积操作(后面我们会讲如何计算卷积)，得到了三个Feature Map。这里的”3”可能是让很多初学者迷惑的地方，实际上，就是这个卷积层包含三个Filter，也就是三套参数，每个Filter都可以把原始输入图像卷积得到一个Feature Map，三个Filter就可以得到三个Feature Map。至于一个卷积层可以有多少个Filter，那是可以自由设定的。也就是说，卷积层的Filter个数也是一个超参数。我们可以把Feature Map可以看做是通过卷积变换提取到的图像特征，三个Filter就对原始图像提取出三组不同的特征，也就是得到了三个Feature Map，也称做三个通道(channel)。<br>&emsp;&emsp;继续观察图，在第一个卷积层之后，Pooling层对三个Feature Map做了下采样(后面我们会讲如何计算下采样)，得到了三个更小的Feature Map。接着，是第二个卷积层，它有5个Filter。每个Fitler都把前面下采样之后的3个<strong>Feature Map卷积在一起，得到一个新的Feature Map。这样，5个Filter就得到了5个Feature Map。接着，是第二个Pooling，继续对5个Feature Map进行下采样</strong>，得到了5个更小的Feature Map。<br>&emsp;&emsp;下图就是很形象的展示了这一计算过程：<br><img src="/2018/10/30/浅谈深度学习/卷积神经网络计算.gif" alt=""></p><h3 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h3><p>&emsp;&emsp;通过介绍前面两种模型，可以发现不管哪种模型都往往只能解决某一类问题，不能解决所有问题，这也是很多深度学习门外汉不了解的。前面两种网络模型，他们都只能单独的去处理一个个的输入，前一个输入和后一个输入完全没有关系。但是实际上往往有些任务之间是有关系的，比如当我们在理解一句话意思时，孤立的理解这句话的每个词是不够的，有时需要处理这些词连接起来的整个序列；当我们处理视频的时候，也不能只单独的去分析每一帧，而要分析这些帧连接起来的整个序列。这时就需要用到深度学习领域中另一类非常重要神经网络：循环神经网络(Recurrent Neural Network)。RNN种类很多，也比较绕脑子。<br>&emsp;&emsp;下图是一个简单的循环神经网络如，它由输入层、一个隐藏层和一个输出层组成：<br><img src="/2018/10/30/浅谈深度学习/循环神经网络.jpg" alt=""><br>&emsp;&emsp;循环神经网络比较抽象，难以图示表达。单纯从上图看，如果去掉W哪个带箭头的圈，它就变成一个普通的全连接神经网络了。那多出来的W是什么呢？循环神经网络的隐藏层的值s不仅仅取决于当前这次的输入x，还取决于上一次隐藏层的值s。权重矩阵W就是隐藏层上一次的值作为这一次的输入权重。<br>&emsp;&emsp;如果我们把上面的图展开，循环神经网络也可以画成下面这个样子：<br><img src="/2018/10/30/浅谈深度学习/循环神经网络时刻.jpg" alt=""><br>&emsp;&emsp;现在看上去就比较清楚了，这个网络在t时刻接收到输入Xt之后，隐藏层的值是St，输出值是Ot。关键一点是，St的值不仅仅取决于Xt，还取决于上一时刻的St-1。<br>&emsp;&emsp;对于语言模型来说，很多时候不仅要看前面的输入，也要看后面的输入，比如下面这句话：<br>我的手机坏了，我打算____一部新手机。<br>&emsp;&emsp;如果我们只看横线前面的词，手机坏了，那么是打算修一修？或是换一部新的？还是大哭一场？这些都是无法确定的。但如果看到了横线后面的词是『一部新手机』，那么，横线上的词填『买』的概率就大得多了。<br>&emsp;&emsp;上图中的基本循环神经网络是无法对这种情况进行建模的，这时就需要另外一种双向循环神经网络模型了，如下图所示：<br><img src="/2018/10/30/浅谈深度学习/双循环神经网络.jpg" alt=""><br>&emsp;&emsp;循环神经网络在训练中很容易发生梯度爆炸和梯度消失，这导致训练时梯度不能在较长序列中一直传递下去，从而使得模型无法捕捉到长距离的影响。为了解决这些问题，后来科学家发明了一种改进型的循环神经网络：长短时记忆网络(Long Short Term Memory Network, LSTM)，它成功的解决了原始循环神经网络的缺陷，成为当前最流行的RNN，在语音识别、图片描述、自然语言处理等许多领域中成功应用。但不幸的一面是，LSTM的结构很复杂。<br>&emsp;&emsp;LSTM的思路比较简单。原始RNN的隐藏层只有一个状态，即h，它对于短期的输入非常敏感。LSTM通过增加一个状态C，来保存长期状态，来解决问题。LSTM的关键就是怎样控制长期状态c。在这里，LSTM的思路是使用三个控制开关。第一个开关，负责控制继续保存长期状态c；第二个开关，负责控制把即时状态输入到长期状态c；第三个开关，负责控制是否把长期状态c作为当前的LSTM的输出。三个开关的作用如下图所示：<br><img src="/2018/10/30/浅谈深度学习/长短时神经网络.jpg" alt=""></p><h3 id="递归神经网络"><a href="#递归神经网络" class="headerlink" title="递归神经网络"></a>递归神经网络</h3><p>&emsp;&emsp;循环神经网络可以用来处理包含序列结构的信息。除此之外，信息往往还存在着诸如树结构、图结构等更复杂的结构。对于这种复杂的结构，循环神经网络就无能为力了。<br>&emsp;&emsp;神经网络的输入层单元个数是固定的，因此必须用循环或者递归的方式来处理长度可变的输入。循环神经网络实现了前者，通过将长度不定的输入分割为等长度的小块，然后再依次的输入到网络中，从而实现了神经网络对变长输入的处理。一个典型的例子是，当我们处理一句话的时候，我们可以把一句话看作是词组成的序列，然后，每次向循环神经网络输入一个词，如此循环直至整句话输入完毕，循环神经网络将产生对应的输出。<br>&emsp;&emsp;然而，有时候把句子看做是词的序列是不够的，比如下面这句话：<br>&emsp;&emsp; <em>两个外语学院的学生</em><br>&emsp;&emsp;不同的语法解析树对应不同的意思。一个是『两个外语学院的/学生』，也就是学生可能有许多，但他们来自于两所外语学校；另一个是『两个/外语学院的学生』，也就是只有两个学生，他们是外语学院的。为了能够让模型区分出两个不同的意思，我们的模型必须能够按照树结构去处理信息，而不是序列，这就是递归神经网络的作用。当面对按照树/图结构处理信息更有效的任务时，递归神经网络通常都会获得不错的结果。<br>&emsp;&emsp;递归神经网络可以把一个树/图结构信息编码为一个向量，也就是把信息映射到一个语义向量空间中。这个语义向量空间满足某类性质，比如语义相似的向量距离更近。也就是说，如果两句话（尽管内容不同）它的意思是相似的，那么把它们分别编码后的两个向量的距离也相近；反之，如果两句话的意思截然不同，那么编码后向量的距离则很远。如下图所示：<br><img src="/2018/10/30/浅谈深度学习/递归神经网络.jpg" alt=""></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>&emsp;&emsp;最后总结一下，深度学习对比以前的浅层学习只是多了一些训练策略，实际两者的背后原理是相通的。去掉了繁琐的让人望而却步的数学推导，只讲了模型结构和其优缺点，就是让大家明白各个模型到底解决什么问题，在解决问题的过程中会遇到些什么问题。个人觉得我们这些IT人员不可能去研究底层算法，那样太得不偿失了。计算机科学是一门重实践偏应用的学科，大部分人把科学家研究的模型算法针对实际场景直接用就行了，当然能懂里面的原理更好，不懂也不妨碍我们使用深度学习技术，现在深度学习出来了很多框架，例如TensorFlow，极大的降低了参与人员的门槛。希望对大家理解深度学习有帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;研究生学的是数据挖掘，搞过一段时间的BP神经网络，当年为了发表论文，硬着头皮推导了三个月的梯度下降算法才从数学原理上
      
    
    </summary>
    
      <category term="技术" scheme="https://jinfei21.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="机器学习" scheme="https://jinfei21.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>关于挣钱的一些思考</title>
    <link href="https://jinfei21.github.io/2018/10/28/%E5%85%B3%E4%BA%8E%E6%8C%A3%E9%92%B1%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>https://jinfei21.github.io/2018/10/28/关于挣钱的一些思考/</id>
    <published>2018-10-28T01:45:24.000Z</published>
    <updated>2018-10-29T06:20:05.070Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;前段时间差点从公司离职，顶着烈日找工作，在出去碰了多次壁也拿到几个offer，虽然比我目前的待遇上略好，但还不是我满意的状态，主要是我这次太匆忙，没有想好下份工作该如何定位自己。工作这么多年从没有如此的狼狈过，公司HR还蛮好帮我转岗，经过考虑把外面的机会放弃了，暂时先留公司沉淀一段时间。<br>&emsp;&emsp;这段时间也想了不少东西，回忆起从开始工作到现在的点点滴滴。我感觉现在的状态和我学生时代没有太大差别，在上海我目前是一个人，以前在一个二本学校也是一个人。不过学生时代很充实，虽然一个人，但是很享受那种四点一线的生活，那时的目标很明确，就是考研，要换个环境，后来都实现了算是有点小成就感。从开始工作起到现在，一直没有任何成就感可言，是最迷茫的，我甚至开始羡慕起研究生同学的生活状态，有时人和人的差距比人和狗的差距更大。一直在工作，却忘记为何出发，工作中也发现一些有趣的人和事。我想大部分人应该想法和我现在一样，没有明确的职业规划，目的就是挣钱早日实现财务自由，那些想干事业改变世界的天才,普通人羡慕不来。生活就是柴米油盐，就是这些很现实的东西。上个小班拿份工资，每天面对的就是房贷和老婆孩子要养，确实中年才体会到的无奈，我想世界上没有比上班拿死工资更悲惨的事情了。这种谋身状态也就是近几百年工业社会开始慢慢成为主流的，工业社会之前几千年上万年，人们都是自我雇佣的谋生状态是主流。工业社会为了追求效率，把人异化为一颗螺丝钉，如果学习能力差的，随时可能随着经济周期被淘汰掉。<br>&emsp;&emsp;在现代功利社会，社会分层会越来越清晰，这是很多发达国家都经历的阶段，中国未来估计也难以避免。从社会分层结构来看，5%的天才加上5%的无用人群，再加上90%的普通人群。大部分在这90%的普通人中，决定他们差异的就取决于很多大量的基因以外的因素，在这些因素中钱的占比绝对高于一切，有钱的孩子选择更多，带来的机会也就更多。当很多贫苦家的孩子需要付出很多努力的时候，有钱人的孩子只要有钱就可以轻松获得，从而带来的阶层固化更为严重。有时与其说是比拼孩子的能力，不如说比拼家长的能力，通过孩子改变孩子命运的可能性非常小，真要改变孩子的命运不如改变自己的命运。<br>&emsp;&emsp;学生时代因为学校的关系，经济学的书比较多，反正那时也没有什么事情，也看了不少。现在反思发现以前看的那些东西很多都是误导，西方意识形态的经济学虽然我没有系统的学，现在说他们是伪科学可能太过于武断。不过我从常识判断，如果经济学真的有用，那经济学家应该是这个世界上最富有的人，但现实不是这样的，经济学家常常犯错误。所以最近这些年我听企业家的东西多点，经济学家的少了。如果现在一个企业家通过经济学家来指导企业经营，听经济学家胡说八道，我会觉得这个企业没有前途。<br>&emsp;&emsp;我并没有说经济学家不好，你如果想让自己变得更聪明，思维更开阔，眼界更高，吹牛忽悠更有水平，经济学家的很多东西还是非常值得去听的，但是你如果想赚钱，那我到是建议你尽量少听，第一，你如果不能穷尽一生去研究经济学，基本上都是皮毛，很多人穷尽一生，也只是皮毛。也根本指导不了你业务实践，第二，哪怕你成为大家了，你要在投资理财上发大财，其实也微乎其微，经济学家除了拿诺贝尔奖或者走穴这两种方式外，很少有赚大钱的。<br>&emsp;&emsp;你要证明一个观点是正确的，你必须要穷尽所有的事实，但是你要证明一个观点是错误的，只需要一个反例就够了。很多人想论证赚钱需要超越常人的能力，但其实现实中可以举出很多反例来反对这个观点。工作中我就遇到往往不是那些最有能力最勤奋的人在高位在拿高工资。<br>&emsp;&emsp;70后一代是幸福的一代人群，赶上中国经济腾飞的好时代。但是现在有钱的往往不是70后这拨人中当年最牛逼的，当年很多70后特别一些牛逼名校的，很多都出国读书去了，一些出不去的人只好留在国内，这些所谓的loser啥事也不干，因为要结婚生孩子，不得不买房，然后就发财了。你能说这个和能力有什么关系吗？而反观那些在国外读了n年书的就比较悲催，回国可能一套房子也买不起。有时候恰恰是你太弱了，太垃圾了，只好赚大钱。而你太强，选择太多，反而受穷。<br>&emsp;&emsp;有时会很悲催的发现，我们这些废了九牛二虎之力考上大学的，发现反而不如那些没有考上大学的同学。因为没有上大学，他们有农村户口，然后中国大面积拆迁，一个个分几百万，他妈的有的还有几十套房子。我们这些悲催的考上大学的人，都是城市户口，没有资格分地皮，然后就成了吃瓜群众。还有些初中就辍学开始闯荡江湖，更早接触社会的，要不就是做外贸领域业务，要不就是干包工头，他们赚的钱远比我们这些人多，决定这些的核心是什么？是能力吗？不是吧，运气也好，机缘也罢，肯定不是能力。<br>&emsp;&emsp;以前看过一篇文章，里面提到一个UT出来创业的小伙子，当年UT可能在全国招聘为数不多的本科生，他打败了无数人终于挤进去了，在当时绝对是巨牛逼的人，而那些被他打败的人只能黯然的走进阿里的大门，那时阿里就是容纳了一帮乌合之众，很多都是职业学校毕业的，名校几乎没有，十多年过去了，那个进了UT的天才，现在要出来创业了，那些没办法只能去阿里的人，一个个身价过亿要给那些牛逼哄哄当年逼的他们无路可走的牛人们投钱去了，能力决定一切么？好像还真不是。<br>&emsp;&emsp;这种案例其实特别多，都不是个案，都是普遍性案例，我们勤勤恳恳的做事情，在各种专业领域里，文能安邦，武能定国，发现转身一看，那些当年看上去不如我们的人赚的钱比我们多多了，宝马雕车香满路，娇妻美女娶回家。你怎么看这些问题呢？<br>&emsp;&emsp;很多人说赚大钱要让自己特别有能力，我现在不太认同这点，工作中和社会上，我见过太多能力一般的因为人生机缘，因为某种特定的机会，赚取了远远超过平均水平的利润，很多时候，很多很勤奋，很有天赋，很有才华的人，在社会最底层的时候，你一定不会认为是因为他们能力不如人，压根就不是，而那些显然不如他们的人却能赚取足够的钱，差异在哪里呢？生在城市的人机会比农村的人要多了去了，难不成农村的人一定就比城市的人要笨，要没有能力，要不勤奋？哪怕同一水平线上的人，也有很多各种机缘巧合所造成的极大差异的结果，能力向来是最不重要的点。<br>&emsp;&emsp;最近这两年我也一直在反思，因为详细了解日本房地产泡沫奔溃的惨状。所以在上海房价疯狂的那几年我没有胆量，尽管当时我努把力还能够的着，现在再怎么努力也够不着了。现在才开始明白，现实社会往往不是等价交换，如果是等价交换，就不可能一个人比另一个人富裕千倍万倍。就是因为不是等价交换，有了泡沫，才给了一些人暴富的机会。<br>&emsp;&emsp;都在说只要在风口，猪都会飞起来。这种常识没办法理解的事情，连乔布斯都说要保持饥饿保持愚蠢。而乔布斯就是那5%的天才，他要表达的意思不是我们理解的那样，看过乔布斯的传记，他是一个内心很骄傲的人。保持饥饿保持愚蠢不是我们普通人理解的那样，我们普通人已经够愚蠢了，至少在这些天才看来我们是这样，90%的人往往选择是不理智的。乔布斯这句话的意思我想是他想看愚蠢的人在想什么，然后高价满足他。这就是现实社会。所以如果投资，你就应该知道大部分普通人是如何想的，吹大泡沫，不一定要懂，只要猪能上天，你就能挣钱，压根就不用想猪如何落地，只要有人接盘就行。<br>&emsp;&emsp;李笑来就是个很好的例子。别看他写书一套一套的，他挣钱也就靠比特币这波收割了不少韭菜，我当时没办法理解区块链和比特币居然都能挣钱。现在我看依然是毫无价值的东西。任何一个负责任的政府都会控制货币，不可能使用一个不受自己控制的货币在社会上流通。虽然政府控制货币发行常常导致通货膨胀，如果电子货币流通，就一定能避免通货膨胀保证公平了吗？我想受益的一定是那些懂技术的天才，大部分普通人只能当吃瓜群众。话虽如此，可依然有很多人追捧。有个很著名的投资人是这样解释的：因为世界上无知者占了主要的部分，90%的人是不懂的，不懂就算了，他们还手里钱特别多，很容易就被忽悠把钱投给那些实际上结果必死的垃圾身上，于是硬生生的就出来一个很悖论的结论，越是不好的东西，越容易被追捧，从而出现极大的泡沫。<br>&emsp;&emsp;这个世界真正赚钱的机会一定是来自泡沫的钱，泡沫才是暴利的基础，没有泡沫就不会有超额利润的存在，房子如果不大面积涨价，怎么可能会有财富的大幅度上涨呢？股票如果没有泡沫存在，凭什么让很多人人身价一上市瞬间成首富呢？同一个公司，基本面没有任何变化，为什么会价格差很多倍呢？只有泡沫来的时候，才有可能让一个公司或者一个事物的价格远远偏离价值，才有让你发大财的机会。这种案例不要多说了，都是如此，只要资金汹涌而来的时候，才会有这种情况出现，不是你变得值钱了，而是市场让你看上去更值钱了，你本身没有任何变化。你的价值没有变化，变化的只是价格，价值跟你商业模式，利润增长相关，但是价格表现的所谓估值，事实上跟价值没有任何关系，跟人们是否喜欢你，跟资金是否充沛，跟民众的智商高低相关，你会发现越是民众智商低的社会，越是资金泛滥的时候，泡沫一定是越高的，泡沫席卷到某个领域的时候，你刚好有这个事物，OK，你就发大财了，所以，你要做的事情是要享受泡沫的过程，然后在估值回归合理的时候，跑出去。没有价格高估的话，他只能代表合理价值也就是平均社会利润，那能赚什么大钱呢？不可能的事情。<br>&emsp;&emsp;那什么时候价格高估呢？前面说了，民众智商越低，且手头上有钱的时候啊，每当这个时候，一定是一大堆不知到价值是什么东西的大叔大妈进来买买买的时候，才可能出现价格严重高估的时候，一堆人非理性的疯狂情绪出现了，市场价格就被推起来了，你就可以发大财了，否则你永远是社会稳定收益者，这个也是为什么无知者比聪明人赚钱很多的原因，你越懂一个事物的真正价值，你就越不敢去触碰他们，因为你知道他们不值钱，你去碰它，你心里承受能力是有限的，你会睡不着觉，最终你肯定就不敢碰了。但是无知者不懂一个事物到底有没有价值，他根本不会去自己研究一个东西，会人云亦云，会因为莫名其妙的事情去认为一个事物好不好，没有任何逻辑可言，所以他敢坚定的持有一个其实没有任何价值的东西，最终的结果是什么呢？结果很有意思，绝大部分冲进来无知者最后一定是被证明是愚蠢的，他们做了接盘侠，但是一定有一部分无知者却赚了大钱。当然聪明的人因为不参与这种过程，结果是比大部分无知者好点，但是比那些赚钱的无知者要差很多很多。<br>&emsp;&emsp;从这个角度想，凡是不参与泡沫的人，最后的结果一定是社会稳定利润，是很难有超额收益的，最赚钱的人一定是泡沫来之前进去，泡沫灭之前跑开，但是这个技术难度是很大的，绝大部分都是蒙着的，地震来了都有人能跑开，谁敢说自己是靠能力跑开的，往往运气起到了决定性作用，许多赚大钱的人明明是赚了运气成分的钱，但是他会用一百个理由告诉你是自己能干赚的。分析的头头是道，本质都是哗众取宠。所以泡沫来了有两种人，一种人整天说泡沫来了，要崩盘了。一种人却跳进泡沫里游泳，前者越来越聪明，后者越来越有钱。<br>&emsp;&emsp;这个世界最简单的事情，就是说泡沫一定会灭，这个是正确的废话，就如同人一定会死，宇宙一定会灭亡一样的言论，前面说了，因为结果是注定的，过程是不一样的，泡沫会灭，但是什么时候灭，结果是不一样的。中国过去十几年本质上都是一个泡沫堆积的过程，如果不参与到这个过程中，很多人都注定无法获得财富，只是因为房产是每个人生活的必需品，所以导致的结果是过去十几年几乎人人无形之中都参与到了泡沫化的过程，真正出现改变是多年前的股权投资的泡沫化，这轮泡沫化进程只有少部分人参与到了，被资本市场和喜欢的人享受到了虚拟经济的泡沫化的红利，绝大部分企业家是没有享受到的，于是出现的是冰火二重天的格局，凡是站在虚拟经济这边的人过去五年财富增长十几倍，而站在实体经济这边的人，相对来说日子就惨淡很多。<br>&emsp;&emsp;泡沫本质就是不懂的人聚在一起才会创造出来的情况，所以你了解不懂的人在想什么绝对比你懂什么更为重要了。只有知道社会群体性的追逐一样事物的时候，才有这个事物泡沫化的可能性。提前站进去，等他们进来你再出去，是赚大钱的核心中的核心。这些背后不是专业性，也不需要专业性去支撑，只要你多去了解别人怎么想，多点同理心就行了。在多勤快点，别固步自封，不愿意看到别人在干什么，整天只想到自己，觉得自己最牛逼就基本上等死了。<br>&emsp;&emsp;从人性角度来看问题的话，大多数人的心理其实就是这么微妙的，总感觉很多事情必然有因果，只是世界上很多事情是没有必然关系的，譬如不会因为你努力了就一定会成功，也譬如不会你努力分析了就一定能得出正确的结论，世界上很多事情是没有任何因果逻辑关系，都是随机偶然不可测的事情。但是很多人不这么想，人性深处都是这种错觉，认为了解不比了解好，掌控比不掌控好，总感觉知道一些比什么都不知道要好。事实上，你知道和不知道，了解和不了解，掌控和不掌控，事情的结果并不会发生太大的变化。甚至很多时候恰恰相反，因为掌控，而导致别人不愿意跟你玩，因为你懂，反而你望而却步，不敢下手，错失机会，这种事情多了去了。除非真正精通某一个行业，同时对这个行业周边以及投资等很多事物都非常充分的了解，否则你懂9成跟你什么都不懂事实上是没有区别的，甚至可能更糟糕。半桶子水晃荡的下场是最不好的，似是而非，往往误入歧途。还不如什么都不懂的结果更好。<br>&emsp;&emsp;好吧，关于挣钱的一些思考就写到这，我也不知道里面有没有负能量。虽然目前我认为挣钱和努力没有任何关系，也和能力无关，但是我一直觉得努力应该是习惯而不是功利手段。只有富有挑战，才让自己更有价值。其中的观点很好的解释了我视野范围内的一些事情，不管怎么说这些思考会让我以后以更好的心态生活和工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;前段时间差点从公司离职，顶着烈日找工作，在出去碰了多次壁也拿到几个offer，虽然比我目前的待遇上略好，但还不是我满意的状态，主要是我这次太匆忙，没有想好下份工作该如何定位自己。工作这么多年从没有如此的狼狈过，公司HR还蛮好帮我转岗，经过考虑把外面的
      
    
    </summary>
    
      <category term="杂说" scheme="https://jinfei21.github.io/categories/%E6%9D%82%E8%AF%B4/"/>
    
    
      <category term="杂说" scheme="https://jinfei21.github.io/tags/%E6%9D%82%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>聊聊无印良品的品牌之路</title>
    <link href="https://jinfei21.github.io/2018/10/20/%E8%81%8A%E8%81%8A%E6%97%A0%E5%8D%B0%E8%89%AF%E5%93%81%E7%9A%84%E5%93%81%E7%89%8C%E4%B9%8B%E8%B7%AF/"/>
    <id>https://jinfei21.github.io/2018/10/20/聊聊无印良品的品牌之路/</id>
    <published>2018-10-20T06:51:41.000Z</published>
    <updated>2018-10-29T05:18:48.244Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;这期本来是要聊挣钱和能力的关系，由于昨天和领导私人会谈亮明了我鲜明的态度，在我看来我是表明立场，在他看来是偏激。我立马说偏激是中性词，请和极端分开。由这个话题呢，我想起前段时间了解的无印良品的品牌逆袭之路，我个人觉得就是偏激策略的成功。中国文化骨子里中庸之道，会导致绝大多数人本能的排斥偏激。我觉得也正因如此才导致国内知名品牌太少了，而中国是一个感性民族，理应产生更多品牌。<br>&emsp;&emsp;无印良品是创立于80年代的日本经济繁荣期，源于一家类似家乐福的超市运营公司西友百货。西友想打造自己的原创品牌，于是有了无印良品这个部门。这就解释了，为什么无印良品什么都做，又是服装，又是食品，又是家居。一般来说，做得这么杂的品牌公司很少见，品类太多，导致给用户传达公司品牌印象会变得非常有挑战和难度。无印良品从最初40种产品扩充到现在的7000种产品，所要面对的难题不是如何生产这些产品，而是如何在品牌产品种类的扩展过程中始终坚持品牌的初衷。<br>&emsp;&emsp;那么无印良品的品牌初衷是什么呢？80年代的日本，消费者面临两级分化的消费习惯，要么是海外奢侈品，非常酷非常高级个性化，但是通常价格都很贵，一般用户消费不起。要么是价格便宜质量粗糙的低端产品市场，这就有点类似国内目前的状况，阿里和京东清理假货和山寨货给了拼多多机会。既然无良印品要走品牌之路，必须要给品牌赋予价值观。无良印品这时候提供给用户第三种选择，既不是山寨别人，是清晰的传达给用户，价格便宜质量够好，注意是指质量够好不是非常好，无印良品想告诉用户回归平常心，不要为了逼格而付出过高的成本，不要迷失在攀比的欲望里不能自拔。所以无印良品和高端路线的产品正好相反，极力去除产品的个性，让它看上去并不酷。</p><p>&emsp;&emsp;无印良品的这种策略其实有三个方向的考虑：</p><ul><li>1、盲目追求高端、个性化，意味着产品要不断升级、不断换花样，这样会给企业带来过高的研发成本和营销成本，实际上带给用户的价值有限，就像目前苹果遇到的困境一样。而无印良品希望摆脱这种造流行的循环，提供一种无个性通用类的设计，就可以一直生产下去，以不变应万变。</li><li>2、成本可控，减少不必要的工序，同时降低成品的成本。</li><li>3、日本人的传统审美观念，是追求简洁素雅，和式风格深入日本人心。这种策略有一定的民意基础。</li></ul><p>&emsp;&emsp;无良印品在保证质量够好的前提下，通过精选素材、检查工序、精简包装这三板斧降低成本。</p><blockquote><p>精选素材：不是选择最好的材料，而是选择够好的材料，加大可利用率。例如无印良品的三文鱼罐头和碎香菇就是这种思路，保持原始材料的天然属性，不加工，比如不使用漂白剂、染色剂。</p></blockquote><blockquote><p>检查工序：保证产品可用性基础之上，去掉所有为了装饰而增加的工序，保证工序最简。如果可能的话，挑战传统设计，进一步减少工序和用料。</p></blockquote><blockquote><p>精简包装：包装不做任何修饰，尽量降低包装成本。</p></blockquote><p>&emsp;&emsp;我们村有人是开服装厂的，有一次我问他他们家生产的羽绒服多少钱一件，他说几十块钱，而我买的明明就是几百块钱，当时我还很吃惊。后面了解营销策略后算是理解了。比如你有100块钱，要完成打广告、产品包装和产品本身这三件事，这100块你如何分配？答案是，花90块打广告，花9块钱包装产品、花1块钱做产品本身。听起来很荒谬，但却是最好收益比的策略，这或许就是操纵人性的高明之道吧。你可以说它不合理，但是商家不会告诉你真相，你看了90块广告后，就会错误的认为手上1块钱的东西真值100块。<br>&emsp;&emsp;最初无良印品没有品牌知名度的积累，又面对高端和低端市场的双面夹击，它该如何突围呢？其实它是选择的低端市场，它固执的打广告，将自己又便宜质量又好的定位清晰的传达给用户，便宜不是本事，又便宜又好才是本事，才是自己在低端市场的核心竞争所在。它不仅清晰的传达自己的定位，还告诉用户具体原因，为什么我可以做的又好又便宜？不同于外面那些便宜姚艳货，我们的产品便宜是有原因的。<br>&emsp;&emsp;具体来说，无印良品在两个地方向用户传递着“无印良品便宜是有原因的”，一是报纸广告，二是产品包装袋。报纸广告是引流的，产品包装是进一步强化这个印象，也因此产生了病毒式的传播效应，和拼多多的拼团有点类似了。<br>&emsp;&emsp;我想，用户在做任何一个选择时，一定是脑子里先有一个故事，比如说这家的产品很有逼格、这家的产品质量特别好、这家的产品超级便宜等等，这便是定位，是品牌印象。无印良品很聪明的一点是，它在一开始就选择好了一个切入点，设计好了一个品牌印象，并讲了一个说得通又让人记得住的故事，让人记住了这个品牌。这并不是什么设计问题，这是一个营销问题。无印良品后面讲了环保概念、日本传统文化、去欲望回归平和心态等等故事，在我看来全是编故事，“便宜是有原因的”才是最初无印良品可以立足的真正原因。<br>&emsp;&emsp;但是随后在1999年到2001年期间，无良印品的销量情况急转直下，出现了有史以来的第一次亏损。最初的品牌理念遇到的极大的挑战，严重动摇的创作团队和忠实客户的信心。在经济全球化时代，无印良品没有顺应“代工厂移到用人成本低的不发达国家”这个潮流，而且随着工业时代的推进，不染色的原材料甚至比染色的原材料更贵，导致无印良品的“低价”优势不复存在造成的。“又便宜又好”这个故事，已经不再成立了。<br>&emsp;&emsp;这时候无良印品不得不放弃走低端路线，只有走高端路线这种附加值高的路线，公司才能持续活下去。那么无良印品如何从一个偏激度走到另一偏激度的呢？既要卖的贵，还要不专注品类什么都做，还要不花心思在包装上，同时让用户花大价钱买个看似平淡无奇的东西。这时无良印品讲起了环保、消除欲望、简约而不简单、日本文化之美。不得不说，这次即时的调整改进了公司定位，给了公司后续持续发展的动力。今时今日，无印良品已经华丽地由“又便宜又好的”低端市场，杀向了“大谈价值观，高价得有理”的高端市场，完成了转型，虽然从产品设计上还是遵循他一贯的理念，但是传递的价值观已经变了，在这个过程中，营销定位功不可没。<br>&emsp;&emsp;无良印品改走高端策略，它支撑自己高价策略的资本是什么？它其实和LV、耐克的高端路线不一样，它不能放弃原生态无装饰的特色，但这又和高价冲突。既然你平平无奇，消费者为什么要为你买单？所以一方面无印良品高打价值观输出这张牌，另一方面也在试探价格定在什么价位可以达到用户愿意买单的门槛？<br>&emsp;&emsp;前面讲到过，无印良品的一大特点就是不做出格的设计，只做看似普通的简洁的产品。在日本本土，因为传统的审美观念里就有以朴素为美的基因，所以日本本土的接受度还可以，但如果要做全球化，其他国家的人能接受这种审美吗？特别是价格还卖那么贵？无印良品是如何处理的呢？积极参加一些设计展，推广日本文化，筹备自己的酒店，尽可能将自己的产品理念向外界宣传。<br>&emsp;&emsp;这一点确实佩服日本人，日本人很好地解释了“越是民族的，越是世界的”这句话。不追求外界的流行，坚守自己的传统的文化，最大化地宣扬和输出自己的传统文化。我不跟从你，我突出自己的个性，让你来接受我的差异化理念。<br>&emsp;&emsp;关于无良印品逆袭之路就聊到这。可能中国人的中庸之道，导致国人骨子里总是想柔和各方，这种处世之道在处理某些事情可能有优势，某些情况反而是劣势，我个人认为品牌就是偏激策略的成功。你不可能迎合所有人，你需要有选择懂得放弃，降低你迎合的难度，找准自己的定位发现自己真正的用户，然后采取针对性的策略。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;这期本来是要聊挣钱和能力的关系，由于昨天和领导私人会谈亮明了我鲜明的态度，在我看来我是表明立场，在他看来是偏激。我立马说偏激是中性词，请和极端分开。由这个话题呢，我想起前段时间了解的无印良品的品牌逆袭之路，我个人觉得就是偏激策略的成功。中国文化骨子里
      
    
    </summary>
    
      <category term="杂说" scheme="https://jinfei21.github.io/categories/%E6%9D%82%E8%AF%B4/"/>
    
    
      <category term="杂说" scheme="https://jinfei21.github.io/tags/%E6%9D%82%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>血酬史观</title>
    <link href="https://jinfei21.github.io/2018/10/13/%E8%A1%80%E9%85%AC%E5%8F%B2%E8%A7%82/"/>
    <id>https://jinfei21.github.io/2018/10/13/血酬史观/</id>
    <published>2018-10-13T10:06:43.000Z</published>
    <updated>2018-10-16T12:00:01.156Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在我们以往的历史观中，人类经历了原始社会、奴隶社会、封建社会、资本主义社会、以及社会主义这几个阶段，这都是教科书教给我们的东西。生产力和生产关系的矛盾推动社会从原始社会到奴隶社会，再到封建社会的变迁，这原本是西方马克思唯物历史观的一套历史分析框架。中国人生搬硬套用这套理论来解释中国历史往往会和我们的常识不符合，因为中国没有经历奴隶社会也没有经历资本主义社会。直到大学期间看到吴思的潜规则和血酬史观的相关东西，用这些理论来解释中国历史和社会变迁更符合历史史实，今天就聊聊这一话题。<br>&emsp;&emsp;社会上我们经常听到一种黑话，叫这个人血旺给他放点血，或者我今天出血了。血本身包含着强迫暴力的意思在里面，血酬史观讲的就是通过暴力获得收益来解释历史的一种分析框架，包含着暴力集团和生产集团相互妥协推动着社会制度演化（请注意我用的是演化不是进步），这和生产力与生产关系的理论完全不是一回事。暴力掠夺不创造财富，但暴力跟生产发生了一种关系，这个关系是什么样的关系呢？美国经济学家拉夫尔给总统讲税收的原理，税率和税收总额的关系，被称为拉弗曲线。这条曲线就描绘了暴力集团和生产集团的关系。当暴力集团无限制抢劫生产集团时，超过拉弗曲线的临界值就会导致生产集团和暴力集团的激烈冲突，甚至严重到改朝换代。</p><blockquote><p>拉弗曲线描绘了政府的税收收入与税率之间的关系，当税率在一定的限度以下时，提高税率能增加政府税收收入，但超过这一限度时，再提高税率反而导致政府税收收入减少。</p></blockquote><p>&emsp;&emsp;交代了前面的一些背景，下面从两个历史故事开始：<br>&emsp;&emsp;清朝有个黑彝人叫刘宇青，他在1877年写了一封信，告诉自己的子孙万代将来怎么搞好生产。<br>&emsp;&emsp;彝族社会有三个阶层，最高层的贵族叫黑彝，他们说自己的骨头是黑的，打起仗里英勇无畏。第二层是贫民百姓，跟我们一样，是凡人，骨头是白骨，叫白彝，他们要给黑彝贵族纳税。黑彝带着白彝去打仗，到汉族抢来奴隶叫娃子，就是第三层，外面耕地的一般叫做娃子。<br>&emsp;&emsp;刘宇青说，他的祖先在明万历年间有好几百个娃子，但是这帮奴隶偷懒不干活，下地干活出力不勤，打猎不中，还总偷吃偷喝。最后到年底，发现他们种地、狩猎收获的东西还不够他们自己吃的。<br>&emsp;&emsp;奴隶制闹到这个份上就成了赔本的买卖。所以刘宇青的祖先开始改革。他们把所有的土地分作两半，一半自己留着，另外一半分给所有的娃子，鼓励他们安家立业。原来是集体宿舍，现在全村到处都可以住，最好都成家，一家给一点地，没有农具再分点农具，但是每次种自己的地之前要先把贵族的地种了，收割庄稼之前先把贵族的庄稼给收了，得先公后私。这就有点类似西周历史上的“井田制”。<br>&emsp;&emsp;这个制度带来了巨大的收益，现在一半土地的收益能顶上过去全部土地的收益。这就是过去制度的优越性和大包干的优越性。但是很快这个收益开始下降。<br>&emsp;&emsp;又过了一百年，当年享受政策恩惠的那批人都过世了，他们的子孙觉得天生就应该这样，于是在主人家地里干活偷懒，好好种自己的自留地，不好好种公家的土地。<br>&emsp;&emsp;所以就又改革，把所有的公田全分了，以后收50%的地租。把集体的地分田单干，弱者取得了明显的收益，地主省心了，不用去催他们干活了，收益就来了。<br>&emsp;&emsp;在1913年，四川省广汉县，其境内有一条川陕大道。有五拨土匪经常在这条道上抢来抢去，所以很快就没人走这条路了。没有人可以抢，土匪就没饭吃，这样不行。所以他们就聚在一起商量，达成了一个协议：把这条路分成五段，比如一共100里，那就每帮土匪20里。大家可以收费，但是不能把人给抢完了。所以，土匪们就建立了一个个“收费站”，还定了个收费标准：空手客五毛钱，包袱客、小商小贩一块钱。当时一个现大洋，大约相当于现在30多块人民币的购买力。并且土匪们承诺，保证过路客在他们“管理”的那段路上的安全，绝不会再有第二次收费，也绝不会有别的土匪来抢。<br>&emsp;&emsp;这个承诺大家都遵守吗？大家都遵守的，因为他们要是不遵守，下一拨土匪就绝对不会客气：你们都抢完了，到我这儿就没了。就这样，收费标准有了，规矩有了，渐渐地行人也有了，土匪们也有了固定的收入，于是川陕大道上建立起了一种秩序。这种秩序被称为“匪秩序”。匪秩序让土匪们尝到了甜头，所以很快这个规矩就向广汉全境扩展，然后就变成到处都是土匪，到处都是抢劫的，就没人种田了，所以农业一片凋敝。没有人种田，大家就没吃的了，肯定不行。怎么办呢？土匪们开始“招商引资”，让大家都回来种地，保证不抢，但是得收点保护费，比如一亩地一斗米。当时四川盆地的粮食亩产大概是200斤，也就是两担，一斗是5%，相当于税率是5%。而且土匪们还承诺：别的土匪来了，我们替你打走；有人重复收费，我们也严肃处理。当时真的就有小土匪敲诈勒索，土匪头子就找到这个人，直接就枪毙了。就这样，广汉境内又建立起了一个新的秩序，然后渐渐有了人烟，有了生产，土匪也过上了好生活。<br>&emsp;&emsp;从这两个故事，我们能引出什么？<br>&emsp;&emsp;第一个问题是：暴力集团（土匪或者贵族）叫什么？暴力集团的收入叫什么？<br>&emsp;&emsp;暴力集团的收入是通过暴力掠夺的收入，叫血酬。但是后来人家立了规矩了，也守规矩了，那还是血酬吗？吴思老师把它称为法酬。法酬是血酬的升级版。<br>&emsp;&emsp;1913年的时候，天下未乱蜀先乱，四川军阀混战。一个军阀占了一块地盘后就开始征税。如果上个军阀已经把今年的、明年的都征了，怎么办？就再往下征。所以1917年的时候，军阀的税已经征到了2011年。请问这到底是土匪还是官府？你看土匪只收5%的税率。所以，那时候土匪和政府的边界变得越来越模糊。他们吃的都是法酬，拿的都是暴力掠夺的收入。但是吃多久、吃多狠，这就决定了他们是匪还是官。他们的身份应该是由此来决定的，而不能光看他们的头衔。<br>&emsp;&emsp;第二个问题是，暴力集团都是按什么规矩来办事的？<br>&emsp;&emsp;暴力集团他们都要争取利益的最大化。如果他们得到的太多，就会导致奴隶不干活，农民和行人就绕道了，暴力集团就获得不了收益。从这些行为中，吴思老师发现了一个定律，称之为“生存策略选择定律”，就是当某种生存策略给你带来的收益大于成本时，你就会选择一条收益更高，甚至可能是卖命的路上去。这样身份就发生了转换。此外，吴思老师还在拉弗曲线的基础上，提出了最佳抢劫率的概念，由暴力集团内外关系的演变分析政治制度的变迁。<br>&emsp;&emsp;血酬史观下的中国制度变迁,如果用血酬史观来解释中国历史的变迁，则那些在传统历史观中的争论会得到很好的解答。<br>&emsp;&emsp;暴力产生了部落,部落出现之前，原始人类的基本生活状态是以家庭（家族）为核心的采集和狩猎。为什么会出现部落？用采集狩猎的需要、用生产力和生产关系解释不了部落的产生。那些从事采集和狩猎的人每天从事几个小时的劳动就足以果腹，大猩猩吃饱了就晒太阳抓虱子了，不会形成更大的部落。部落不是生产发展的需要，不是畜牧和狩猎的需要，而是暴力竞争的产物。中国文明史的开端，就是炎帝部落和黄帝部落的战争和联盟，部落之间的对抗就是用暴力争抢地盘。<br>&emsp;&emsp;暴力制造了奴隶制,部落之间的战争和联盟形成了更大和更强的部落，暴力组织的控制能力超过了一个普通人的逃亡能力，那些被抓住的战俘或者掳掠来的劳动力就被强迫劳动，成为奴隶。奴隶制来源于暴力对抗和暴力组织的发展，来源于榨取剩余能力的提高，而不是提供剩余能力的提高。奴隶制不是生产力发展的结果，而是暴力发达的结果，是暴力组织发育的结果。<br>&emsp;&emsp;封建制度也不是生产力发展的结果，农耕时代的生产力在过去2000多年来没什么大的变化。封建制度是利用亲属组织的一种暴力分配和组织机制。它根据暴力服务的能力来分配土地、生产资料和其他资源。封建制解决了一个自卫的问题，但却导致战争不断，周朝到春秋战国时期一直是战祸延绵。因为在封建制度下，打仗是有利可图的。历史记载，每逢发动战争，秦国人就在咸阳欢呼雀跃，因为他们可以有机会通过战争获得土地和财产。在战争结果的分配中，暴力集团首领获得的比例最高，更激发了诸侯发动战争的动力。<br>&emsp;&emsp;作为一种理论框架,“血酬史观”是从暴力的角度对历史演进做出一种解释，它和唯物史观并不冲突。一旦生产集团的首领资本家主控制了军队和国家机器，暴力集团就变成了资本家的保安和守夜人，这个社会就变成了资本主义。在资本主义社会，历史唯物主义就开始有效了，生产力能够决定生产关系，经济基础开始决定上层建筑。但唯物史观的局限性也很快凸显。资本家的剥削导致了工人运动的产生，工人可以投票，工会也可以控制选票了，也能当家作主，那就不是资本家一个人当家作主，历史进入民主时代，这个时候自由史观就开始超出唯物史观。<br>&emsp;&emsp;血酬史观就聊到这。从初中开始学习历史，我个人感觉历史教科书就是一本历史杂志，让人记住一堆历史事件历史人物，到现在很多东西都忘记了。没有教一个贯穿其中的历史逻辑，就是简单的往历史唯物主义里面套，然后还用这套东西考试，我是觉得我们所受的历史教育是很失败的。学不到任何以史为鉴的智慧，其实历史可以很有趣，就像当年明月写的明朝那些事儿，历史不仅有王侯将相，更有家长里短，还有作者个人的评价，你能学到很多历史人物身上表现出来的人生智慧。不过还好，历史不像数学有年龄限制，随着年纪增大，同样的历史事件个人的解读会更丰富更深刻。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在我们以往的历史观中，人类经历了原始社会、奴隶社会、封建社会、资本主义社会、以及社会主义这几个阶段，这都是教科书教给我们的东西。生产力和生产关系的矛盾推动社会从原始社会到奴隶社会，再到封建社会的变迁，这原本是西方马克思唯物历史观的一套历史分析框架。中
      
    
    </summary>
    
      <category term="历史" scheme="https://jinfei21.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    
      <category term="历史" scheme="https://jinfei21.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>技术人35岁的隐忧</title>
    <link href="https://jinfei21.github.io/2018/10/08/%E6%8A%80%E6%9C%AF%E4%BA%BA35%E5%B2%81%E7%9A%84%E9%9A%90%E5%BF%A7/"/>
    <id>https://jinfei21.github.io/2018/10/08/技术人35岁的隐忧/</id>
    <published>2018-10-08T12:43:53.000Z</published>
    <updated>2018-10-09T02:39:53.950Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;每周一篇博客，因为国庆回武汉看望老婆小孩，所以耽误了。原定是要发一篇有关历史的博文，只能这周末再发了。这次回家待了7天，今天第一天上班，效率不是很高，早早下班就回家了，因为有心事，正如标题所言我如今也到了这个坎。<br>&emsp;&emsp;本科毕业十年了，上海我始终没有安下家，没能给老婆小孩一个好的物质条件，只能退居二线到老家的省会城市安家。我也是沪漂近十年了，直到去年还是和老婆一起在上海打拼，如今只剩我孤身一人，小孩和老婆成了留守妇女和儿童了。我也不知道我在上海到底在坚守什么？人最怕就是迷失自我。<br>&emsp;&emsp;虽然现在对比7年前，我不用租房子了，住在自己的远破小房子里，再也不用担心房东找茬了，但是和我研究生同学对比，他们都住上千万的房子，和老婆小孩在一起，工作和家庭都能兼顾，而我就是处在底层的平民窟，每次想到这我就不能放弃自己，得逼着自己拼到40岁，实在不行就回武汉。这就是一场赌博，我赔上的是我与家人相聚和参与小孩成长的时光。我希望她们能来上海生活，虽然目前上海还安不下我的灵魂和肉身，但是我骨子里还是喜欢上海的氛围，毕竟我在上海已经生活了十年多了，很多东西都习惯了。<br>&emsp;&emsp;因为每天上班坐地铁一个多小时里看了不少公众号，一个技术人的中年危机时常会让我焦虑。以前我倒没觉得技术人年龄还是一个问题，今年差点从公司离职我是深深体会到了。年龄大了会少了很多年少时的轻狂，意味着失去了更多尝试的勇气，却多了很多世俗的牵绊，很多时候会越来越身不由己，慢慢会让自己变的封闭。<br>&emsp;&emsp;毕业前几年我每天都很充实，现在很久都没有这种感觉了。有太多事情做，时间也不够用，却不知道从何入手，失去目标更是远离了梦想，现在感觉越来越失去自我了，要做回自己太难。我也到了羡慕年轻的年纪了，年轻随时可以说走就走说不干就不干，而中年人不行，有时候你不得不咬紧牙关硬挺。自从老婆回武汉以后，我书读的越来越少了，内心的进步越来越不明显，反而岁月的印记在脸上不断加深。去年一年多整个人都不太好，工作中常常在妥协中徘徊廷难受的，人性的不完美在我心中不断放大，充斥了很多负能量，也颠覆了我很多已有的观念。<br>&emsp;&emsp;过去我一直天真的以为只要努力就会得到认可，就会得到想要的结果，过去一年多的现实彻底击穿了我的心灵。曾经选择来公司，是因为激情，是希望和一帮优秀的人真正做成一件我没有尝试过的事。我对新鲜的事物一直抱有极大的好奇心，总是充满激情地大胆尝试，却在挫折面前撞得头破血流，所有的理想都变成了幻想，一切都变得有些陌生了，难道一开始就错了吗？<br>&emsp;&emsp;转岗有一段时间了，我还有半年的过渡期。夜深人静的时候，我才能感到释放和宁静，不再有胡思乱想的焦虑，剩下的就是所谓的“深思熟虑”。曾今的梦想都变成了遥不可及的记忆，都不敢轻易触碰，只能小心翼翼的闪过。<br>&emsp;&emsp;现实总是让人们又爱又恨，我们需要一个无比强大的内心来适应这个现实，现实可以让我们一次次跌倒，我们只需要+1次爬起来继续努力。生容易，活容易，生活不容易，和与我一样在上海努力奋斗的沪漂们共勉吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;每周一篇博客，因为国庆回武汉看望老婆小孩，所以耽误了。原定是要发一篇有关历史的博文，只能这周末再发了。这次回家待了7天，今天第一天上班，效率不是很高，早早下班就回家了，因为有心事，正如标题所言我如今也到了这个坎。&lt;br&gt;&amp;emsp;&amp;emsp;本科毕
      
    
    </summary>
    
      <category term="杂说" scheme="https://jinfei21.github.io/categories/%E6%9D%82%E8%AF%B4/"/>
    
    
      <category term="杂说" scheme="https://jinfei21.github.io/tags/%E6%9D%82%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>基于规则的风控系统</title>
    <link href="https://jinfei21.github.io/2018/09/29/%E5%9F%BA%E4%BA%8E%E8%A7%84%E5%88%99%E7%9A%84%E9%A3%8E%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <id>https://jinfei21.github.io/2018/09/29/基于规则的风控系统/</id>
    <published>2018-09-29T07:25:28.000Z</published>
    <updated>2018-10-08T02:01:46.298Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;转岗到平研创新Team一直在忙于风险系统的优化升级。上一次聊到对系统问题如何解决的方法论，这次碰到的就是这类问题，因为不是简单的线性问题，所以不能通过优化一个单点解决问题。今天就聊聊这一个多月忙的事情。<br>&emsp;&emsp;当前互联网企业存在很多风险，特别是金融行业，一直被羊毛党，刷单党光顾。比如像一些账号问题，由于用户的使用习惯，会在各个站点注册账号使用相同的用户名和密码，这就给了黑产份子可乘之机。他们会找相对比较小安全防护不严的网站利用SQL注入或者其他漏洞进行拖库，获取用户的账号信息，然后对密码进行清洗，俗称洗库，最后拿到用户登录账号明文信息到一些知名网站去试，俗称撞库，这有可能对用户造成损失。<br>&emsp;&emsp;由于以上一些问题的存在，要面对互联网上的实时攻击。风控系统需要解决如下问题：</p><ul><li>哪些业务是有风险的，注册、登录、交易、活动等等，这需要业务方埋点传入合适的参数。</li><li>什么事件是有风险的，这需要用到统计学，对异常用户的历史数据做统计分析，找出异于正常用户的特征。</li><li>实时性，而且对风险事件必须是毫秒级的响应，有些场景需要尽快拦截，及时给用户挽回损失。</li><li>低误报，需要人工风控经验，对各种场景的风险阈值和评分设置，需要长期不断的调整。</li><li>支持对历史数据的回溯，能够发现以前的未发现的风险，对现有的策略设定提供参考。</li></ul><p>&emsp;&emsp;公司现有的风控系统架构如下所示：<br><img src="/2018/09/29/基于规则的风控系统/风控系统架构.png" alt=""><br>&emsp;&emsp;整个系统是一个单体结构，外部系统直接通过接口调用得到实时的风险等级标识，然后业务系统根据风险等级标识采取相应的措施，比如验证码或者拒绝阻塞。接口需要传入策略名称，策略是规则引擎定义的模型对应一组规则，每个规则都对应一组指标。风控系统的核心就是规则引擎，一个好的规则引擎可以方便业务方随时变更验证逻辑而不用重启服务。既要保证服务的稳定又要不失灵活性。规则引擎我们是采用执行groovy脚本，可以灵活变更规则逻辑。这需要对领域模型进行抽象，目前抽象出了策略、规则和指标关系如下图所示：<br><img src="/2018/09/29/基于规则的风控系统/规则引擎.png" alt=""><br>&emsp;&emsp;可以把策略理解成规则集合，策略是最终判别风险的依据。系统根据所有规则的分值汇总得到总和，总和越大说明风险等级越高。规则就是需要执行的脚本逻辑，会查询指标然后和阈值比对，如果大于阈值就返回相应的分值。对业务方而言只需要关心策略配置和阈值等级设定，脚本逻辑不需要关心。脚本逻辑是应对各种场景的关键，里面有一些逻辑处理，需要查询存储数据库查找对应指标值和历史数据。<br>&emsp;&emsp;业务方在接入时首先传入策略名称，这是风控系统定位规则集合的唯一标识，拿到规则集合后会执行相应的规则脚本汇总分值，再根据业务方在后台系统配置的等级规则判别相应的等级，最后返回给业务方，业务方拿到风险等级后再去做一些风险处理。整个过程不是很复杂，但是因为是单体结构，很多代码逻辑耦合在一起，难于维护而且也不好改进。因为一旦涉及到改动就会影响原有逻辑，总结一下目前系统架构有如下不足：</p><ul><li>只有统计规则和静态规则，像一些行为规则和关联规则支持不了。</li><li>规则阈值和风险等级的设定没有客观评价指标。</li><li>系统功能耦合在一起，数据采集、限流和指标计算都在一个接口中。</li><li>没有充分利用缓存，仅仅把缓存当配置中心使用。</li><li>接入场景单一，只支持同步接入同步处理风险。</li></ul><p>&emsp;&emsp;以上是目前系统痛点，更关键的是如果单纯的从系统层面优化没有多大意义。因为对业务方来说是想要需要知道策略的实际效果，进行风险识别时是否影响到了用户体验，是否预防到了真正风险，这些都没有一个离线分析的指标做参考。所以下图所示的一个反馈闭环很重要：<br><img src="/2018/09/29/基于规则的风控系统/闭环.png" alt=""><br>&emsp;&emsp;一般来说业务方在接入风控系统时需要先配置策略规则，然后设定每个规则对应的阈值和分值等级，完了就可以应用上线观测实际预测的效果，实际的预测结果只能依赖离线分析，可能需要对用户历史操作轨迹进行分析，如果预测结果拦截的都是正常操作的用户，这时可能就需要调整阈值。有了这个闭环就知道接下来需要做的事情了，后面所有的架构都是围绕这个闭环来进行。经过重新梳理后架构图如下：<br><img src="/2018/09/29/基于规则的风控系统/新架构.png" alt=""><br>&emsp;&emsp;新架构对原有逻辑功能进行了拆分。接入层主要是进行数据格式检查和信息丰富，比如ip地址可能需要转化为地区城市，浏览器类型需要打标识，然后将数据落地写入kafka，以便接下来的离线分析和回溯。核心层就是规则同步和策略匹配，这块是比较核心的东西，会随着业务变化架构层面不直接对接业务，所以下沉在接入层后面，接入层对外是不可变的。数据落地后有实时Job进行一些指标分析入库，这样用户在设定指标阈值时可以根据历史数据参考，比如同一个ip最近7天登录次数，这个次数阈值可以基于历史用户来设定，这样业务方在设定阈值时也有一个预期大概会拦截多少用户，多少用户会受影响。接入方式可以有同步和异步，同步需要实时响应用户告诉用户风险等级。异步就是用户发来数据就完事了，后台的实时job会读取kafka的数据利用CEP模型的esper框架进行风险预测然后采取相应的动作。<br>&emsp;&emsp;在功能层面也会更丰富一些，老的架构是直接写入druid，指标分析是实时去查druid的数据做汇总统计。这样做的好处就是实现简单，但性能随着调用量增多会下降，如果能事先把一些指标计算好，使用时直接来查不用做实时计算性能会提升很大。同时加强了后台管理的能力，用户和管理员各自关注不同领域。<br><img src="/2018/09/29/基于规则的风控系统/规则库.png" alt=""><br>&emsp;&emsp;开发者也就是管理员会根据业务需求编写规则脚本，然后业务方再配置这些规则脚本的阈值和分值。规则方面可以支持四种：</p><ul><li>静态规则<br>基于某个静态值的限制性规则，比如三元验证一致、是否命中黑名单、常用联系人验证、电信服务使用地理范围验证等</li><li>统计规则<br>用统计计算的值来作为验证的条件，如来自某个设备或者IP的申请次数大于某个值</li><li>关联规则<br>指用户在进行了某个操作之后，又执行另外一个操作，带来的风险。例如，修改账号密码后，进行交易操作</li><li>行为规则<br>指用户的异常行为，例如用户在常驻地址或者某个特殊的时间如深夜，进行了交易操作，一般也认为具备一定的风险</li></ul><p>&emsp;&emsp;风控系统实际是包含两部分内容，一是识别风险，二是对识别后的风险或是自动的或是人工的进行处理。后台系统增加了惩罚管理，相对于原先风险处理硬编码在业务逻辑中，惩罚管理可以做到配置化的分级处理，当然响应可能没有以前及时，但也是近实时的。整体流程如下所示。<br><img src="/2018/09/29/基于规则的风控系统/处罚.png" alt=""><br>&emsp;&emsp;以上就是最近一段时间梳理的风控系统架构。目前只是对原有的逻辑进行拆分，为后期离线分析打下基础。后期会利用elasticsearch做一个超级cube的指标系统，参考平安spark+hive+es的方案，对用户历史行为轨迹做不同维度的分析。让业务方对用户更了解，逐步形成数据驱动风险策略的设定。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;转岗到平研创新Team一直在忙于风险系统的优化升级。上一次聊到对系统问题如何解决的方法论，这次碰到的就是这类问题，因为不是简单的线性问题，所以不能通过优化一个单点解决问题。今天就聊聊这一个多月忙的事情。&lt;br&gt;&amp;emsp;&amp;emsp;当前互联网企业存
      
    
    </summary>
    
      <category term="技术" scheme="https://jinfei21.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="风控" scheme="https://jinfei21.github.io/tags/%E9%A3%8E%E6%8E%A7/"/>
    
      <category term="规则引擎" scheme="https://jinfei21.github.io/tags/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>从线性思维到系统思维</title>
    <link href="https://jinfei21.github.io/2018/09/22/%E4%BB%8E%E7%BA%BF%E6%80%A7%E6%80%9D%E7%BB%B4%E5%88%B0%E7%B3%BB%E7%BB%9F%E6%80%9D%E7%BB%B4/"/>
    <id>https://jinfei21.github.io/2018/09/22/从线性思维到系统思维/</id>
    <published>2018-09-22T11:21:02.000Z</published>
    <updated>2018-09-29T07:01:24.786Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近从公司内部转岗到平台研发部，到现在已经有一个多月了。这一个多月一直在规划重构现有的风控系统，目前已经完成了第一期规划架构，正在coding阶段。得益于以前学到的系统思维理论，所以做这件事对我来说游刃有余，这期就聊聊这个理论，下期就聊我如何运用这个理论规划设计风控系统2.0的。<br>&emsp;&emsp;现实生活中有些问题很严重，虽然严重，但是简单。比如你最近头疼到医院就诊，医生首先要你去做一堆检测，首先搞清楚你是病毒性感冒还是病菌性感冒，然后才能对症下药，如果严重可能还要住院。像这种有明确因果关系的问题就是简单问题，他们的共同点就是有一个“因”，只要解决了这个因，问题也就解决了。<br>&emsp;&emsp;但是生活中除了这种简单的线性问题，有着明确因果关系外，还有着大量复杂问题，你很难定义明确的因果关系。前面我写过一篇博客谈论因果关系，有兴趣可以了解下前几期的文章。比如中国足球就是一个复杂问题，你要优化改革就不能简单的用线性思维来解决。比如你也知道，中国足球主教练，足协主席，裁判都换了个遍，可中国足球还是那样。像这种复杂问题是一个系统问题，不能简单的用线性思维来解决问题，你必须具有系统思维。<br>&emsp;&emsp;好，既然说到系统思维，那什么是系统呢？所谓系统，就是一个由很多部分组成的整体，各个部分互相之间有联系，作为整体又有一个共同的目的。人的身体、学校、公司、国家，都是系统。系统有三个特征。</p><blockquote><p>第一、系统里有各种元素，也就是各个部分。比如学校系统，其中有老师、有学生，有教室、有操场，这些元素是系统的组成部分。组成元素是一个系统最明显的东西，而也可能是最不重要的东西，因为它们常常是可替换的。正所谓铁打的营盘流水的兵，学生来了又走，老师、校长都可以换，而学校还是这个学校，系统还是这个系统。<br>第二、系统中各个元素之间，有各种关系。这些关系可以是上下级的命令、谁和谁合作、谁向谁汇报，也可以是规则、物理定律。元素可以随时调换，但关系通常是不变的。所以真正要理解一个系统的运行机制，你就要了解它的关系结构。<br>第三、系统还有一个功能，或者说是一个目的。比如学校的功能就是教育学生。系统的功能往往是不明显的，有时候表面上有个功能，实际上还有个功能。比如学校系统，表面上看，它的目的应该是教育学生；但实际上，它的目的也许是考试能力训练，或者纯粹是为了赚钱。</p></blockquote><p>&emsp;&emsp;系统经常出现问题就是目标不明确，而且有时候组成系统的各个部分的目标和系统总目标是不一致的。要想系统良性运行，必须要把目标协调统一好才行。你解决优化任何一个部分都不能圆满解决问题。<br>&emsp;&emsp;系统思维的反义词，是“线性思维”。所谓线性思维，就是简单明了的因果关系 —— 既然这有这么一个结果，就一定有一个原因，只要解决了原因就能解决问题。手机没电了，你去充电就行了。线性思维就是这么直来直去，适合我们一开头说的那些简单问题。不是说线性思维不行，而是线性思维有它适用的场合。<br>&emsp;&emsp;那有什么标准区分是线性问题还是系统问题呢？系统论的专家认为，如果出现以下症状，那这个问题恐怕不是线性问题，而是系统问题：</p><ul><li>看似是个小问题，但是要解决它却要耗费许多资源.</li><li>多次试图解决一个问题，却总是无效.</li><li>问题本来应该容易解决，可是人们故意不解决.</li><li>新人来了就发现问题，老人一笑了之.</li><li>类似的问题一再发生，整改了也没用……</li></ul><p>&emsp;&emsp;面对系统问题，没有什么快速解决的办法，也不是投入更多资源就能解决。解决系统问题的出发点，是你得抓住两个关键点。<br>&emsp;&emsp;一个概念是库存，也就是系统里面某种东西的保有量。库存可以是任何东西。比如夫妻感情系统，库存就是两个人共同积累了多少正面的感情。输入是互相之间亲密的表示，可以增加库存；输出是各种争吵和矛盾，会消耗情感库存。如果情感库存见底了，婚姻系统就很危险了。<br>&emsp;&emsp;一个概念叫反馈回路，反馈回路分为两种，它们是库存和输入输出之间的关系机制。<br>&emsp;&emsp;一种是正反馈回路，也叫自增强回路。所谓正反馈回路就是库存里的东西越多，输入就会越大，于是就会进一步增大库存。比如挣钱，就得靠正反馈回路。你的钱越多，投资产生的利润就越多；利润越多，你的钱又会进一步增多。投资 — 挣钱 — 投资，这就是一个正反馈回路。导致系统崩溃的往往也是某种正反馈回路。就比如夫妻关系，情感储备越少，看对方就越不顺眼；看对方越不顺眼就越容易发生冲突，结果就是情感储备进一步减少。这不是“正能量”，但是也是“正的”反馈 —— 因为有个叫愤怒的东西在<em>增长</em>。<br>&emsp;&emsp;一种是负反馈回路，也叫平衡回路。负反馈不等于负能量 —— “负”的意思是“减少”。当库存太多了，负反馈回路负责减少库存。比如国家看谁太富了就多收他点税，看谁太穷了就给他发点钱，家里看老婆情绪不对就赶紧哄哄，这都是负反馈回路。负反馈总是让系统回到“正轨”上来。<br>&emsp;&emsp;一个系统中可以有若干个正反馈和若干个负反馈回路。正反馈回路让系统或者增长、或者崩溃，是要偏离平衡；负反馈回路则尽力保持系统的平衡。<br>&emsp;&emsp;对你想要解决的这个问题而言，可能就有一个回路，正在起主导的作用。如果你能发现在系统里起主导作用的回路是什么，你就抓住了系统的主要矛盾，你就找到了问题的关键所在。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;最近从公司内部转岗到平台研发部，到现在已经有一个多月了。这一个多月一直在规划重构现有的风控系统，目前已经完成了第一期规划架构，正在coding阶段。得益于以前学到的系统思维理论，所以做这件事对我来说游刃有余，这期就聊聊这个理论，下期就聊我如何运用这个
      
    
    </summary>
    
      <category term="杂说" scheme="https://jinfei21.github.io/categories/%E6%9D%82%E8%AF%B4/"/>
    
    
      <category term="杂说" scheme="https://jinfei21.github.io/tags/%E6%9D%82%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>鲁迅先生北漂的一点感想</title>
    <link href="https://jinfei21.github.io/2018/09/15/%E9%B2%81%E8%BF%85%E5%85%88%E7%94%9F%E5%8C%97%E6%BC%82%E7%9A%84%E4%B8%80%E7%82%B9%E6%84%9F%E6%83%B3/"/>
    <id>https://jinfei21.github.io/2018/09/15/鲁迅先生北漂的一点感想/</id>
    <published>2018-09-15T07:07:37.000Z</published>
    <updated>2018-09-18T02:26:16.491Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;学生时代受学校教育的影响，对鲁迅学习的比较多，对其辛辣的文字和深刻的社会批判十分喜欢。如今在社会上打拼多年，可能是职业关系，我不太喜欢只谈问题不给方案的处理方式。渐渐的对鲁迅看的就不多了，相反对胡适的思想越来越推崇，其少谈主义多研究问题的态度比较契合我现在的风格。今天不聊鲁迅的思想，是聊鲁迅的北漂经历。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&emsp;&emsp;鲁迅原本是一个书香门第，也算是官三代。怎奈时运不济家道中落，在鲁迅小时候因为祖父的案件吃了官司，家庭的突然变故，也让小时候的鲁迅体会到了世态炎凉，估计是受了不少白眼，对鲁迅的人格朔造特别明显，成年以后性格特别坚韧文字特别刻薄。他两个弟弟当时还小，可能没有感受鲁迅体会到的人情冷漠，也造成三兄弟性格迥异。<br>&emsp;&emsp;因为童年的苦痛记忆，鲁迅小时候特别想出人头地，作为家中长子，必须当起这个家。在当时可能只有贫家子弟才去的学堂，鲁迅先生也去。甚至为了学费问题，去东渡日本留学。我们现在看东渡日本留学，可能是优秀的人才去，实际不是的。大部分都是家道中落，却想出人头地的那些家庭子弟才会去。但凡有条件的都不会去外国留学。<br>&emsp;&emsp;鲁迅先生其实去日本也没有好好学习获得一个正经的文凭。他的文章写的藤野先生，介绍了一段弃医从文的经历，实际他的医学成绩并不突出。只是在日本翻译了几本文学著作和朋友合办了几本杂志，还都没有挣到钱。最后在留学经费花完的情况下，才不得不回国谋个差事，一是家庭也需要他供养，二来日本也没有出路。我接下来要说的就是回国后鲁迅先生北漂的经历。<br>&emsp;&emsp;现在80后被高房价折腾的死去活来，年轻人要靠死工资在北上广一线城市买房简直太难太难了。鲁迅先生北漂也遇到这个坎。新任的教育部长蔡元培邀请同乡鲁迅共事，那个年代也没有说面试要文凭，凡是留过洋，即使是野鸡大学的，只要有朋友圈推荐都能获得一份差事。鲁迅先生就这样在老乡的推荐下，从浙江绍兴县城拎着个箱子来到大城市北京（当时他还是一个人民教师），就这样成为了一个光荣的科级公务员。<br>&emsp;&emsp;基层公务员工资也不高，家里也没有多余的钱接济他，相反这个时候他还要供养家庭和在日本留学的弟弟。每个月发完薪水寄给家人，剩下留给自己的就不多了。没办法，他只能在砍头集散地菜市口找了个隔断间，开始了自己的租房生活。<br>&emsp;&emsp;入住没多少天，他就后悔了。这个地方太脏了，蟑螂又大又黑，油光闪亮，一看就知道营养不错。最膈应的是床铺，一小时能逮30多只跳蚤。为了不被咬肿，鲁迅只能趴桌子上睡，第二天起床继续逮跳蚤。而且周围住的人也是鱼目混珠，各色人等都有。鲁迅被吵的神经衰弱，但是初来乍到，没钱换房，就这样鲁迅在这样的环境忍受生活了4年，你可以想象作为一个海外归国的高级知识分子的心理阴影。<br>&emsp;&emsp;有一次房东说，隔壁有个名叫「补树书屋」的三居室，是个凶宅，院子槐树上吊死过人，白送都没人住。鲁迅听到这个消息乐坏了，不多日，他就迅速搬进去了。终于有个安静的地方能向往诗和远方，夫复何求。他还专门跑到小商品市场琉璃厂买下4幅画，3个小摆设，合计10个大洋。回家迎着夕阳，感觉自己终于过上中产阶级生活，满脸小确幸。<br>&emsp;&emsp;新房唯一的缺点是猫叫太扰人，隔三差五的野猫调情，整晚闹得鲁迅睡不着，他抄起竹竿上去就打，但没过一会，几只野猫又浪回来了。好在凶宅风水不错，鲁迅的生活慢慢发生改变。<br>&emsp;&emsp;在单位作为新来的外地人也不受待见，老油条们尸位素餐，什么事也不干，鲁迅无奈下只好在家里喝茶、写文章，当个「佛系青年」，时不时的给新青年投稿。就这样，在他北漂第6年，他原创的白话小说《狂人日记》发表，当即成为轰动一时的爆文，各大媒体疯狂转发。连北大的李大钊和胡适都夸赞鲁迅的才华。<br>&emsp;&emsp;终于凶宅里默默码字的鲁迅，成为了北京城最著名的爆文大神，写一篇爆一篇，名气和稿费水涨船高，连北大学者钱玄同也来拜访。<br>&emsp;&emsp;随着名气见涨，鲁迅大名在老家广为流传，家里人纷纷过来投靠。一大家子住三居室肯定不够，加上这时候他经济状况也有好转，人出名了来钱也快，他决定买一个大房子。为了找房，只懂学术的鲁迅开始研究房价。彼时北京作为准一线城市，房价低于上海、广州、天津、南京。鲁迅存款不多，想找个地段好、户型好的房子仍是费劲。从东五环到西五环来回折腾半年，看了30多套，总算相中什刹海西北一套二手四合院。这里临近北大沙滩红楼，文化气息浓郁，符合鲁迅高级知识分子身份。南北通透， 适合老人孩子居住。30多间屋子，足以住下一大家子外加保姆、厨子、司机。<br>&emsp;&emsp;但房子总价3500大洋，拉黄包车的干30年也买不起。鲁迅托关系，找浙江兴业银行老乡贷了500大洋，卖了老家的房子，加上存款，总算全款买下。<br>&emsp;&emsp;北漂第7年，房子搞定了，鲁迅以为以后一家人会幸福的生活在一起，特意安排2个弟弟住主卧，自己住次卧。谁知道2个弟妹的生活日常就是作，厨子刚端上一盘日料，她们死活要吃饺子。没事就去买奢侈品，刷爆鲁迅好几张信用卡。住进新家不满一年，就把自家弟弟从日本接过来。<br>&emsp;&emsp;作，也就算了，最可怕的是家庭关系不和谐。鲁迅偶尔提醒几句，俩姑娘就能到自己老公那挑拨离间，一大家子鸡飞狗跳。纯种直男鲁迅根本应付不了，气得饭也不和他们吃，天天闷在小房里。没过多久，鲁迅受不了家里鸡毛蒜皮，搬出去租房。中途回家拿书，本想找二弟聊聊。结果周作人说他小家子气，跟女人计较，把鲁迅的书扔一地，还拿鲁迅的古玩砸他。鲁迅怒了，抄起瓷枕就反击。<br>&emsp;&emsp;最终，鲁迅和弟弟全家绝交，带着母亲和童养媳净身出户。他在西四环的砖塔胡同租了个破开间，晚上睡觉连门都关不上，冬天把老婆冻得直哆嗦。只好找两个朋友各借400大洋在西二环阜成门的城中村，买了套小四合院。安顿好母亲和老婆，身无分文的鲁迅又背上800大洋的房贷，这钱他2年后离开北京也没还完。为了早日还款，鲁迅连着在北大和北师大教书，2份兼职加上正职工作让他在西单、北大、阜成门之间来回跑，每天少说3、4小时在路上。<br>&emsp;&emsp;北漂14年，从30到44岁间鲁迅经历了租房、买房、还房贷各种辛酸。在他从县城教师变成新文化运动的开创者，思想先驱，背后就是一地鸡毛。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>&emsp;&emsp;鲁迅先生北漂这段经历可以看出，先生的生活也不轻松。生活从来就不是轻松的，没有哪一代人是容易的，生活从来不是一件简单的事。现代社会相比鲁迅时代确实要先进很多，各种资讯也很发达，但是很容易就淹没在信息的海洋，你读不到真正的智慧。就比如我身处的P2P行业，我就真搞不懂那些借钱消费的都是些什么人？年轻本是挣钱的年纪，你可以挣多少花多少，量力而为，怎么还能借钱消费呢？人的欲望是无穷的。虽然现在财富的增长可以是指数级的，不像过去是线性增长，如果考虑人口比例，能享受财富指数级增长的毕竟是塔尖那部分少数人群。不过也没有什么好抱怨的，人类社会的演化法则就是这样。大部分可以大概率的预期自己将来不会有大的财富和阶层变化，认识到这点你就应该适时调整自己的行为方式，相反你能更容易获得幸福。而如果你报着不切实际的幻想，大概率你会很痛苦，当然你可以说你有梦想，会不会成功？当然会成功，但是成功毕竟是一个偶然事件。一个人一生能在晚年有一个幸福的家庭已经很了不起了，有时不必对自己过于苛刻。有位哲人曾经说过，人生不在你取得了多大的成功，而在于你经历了多少事情提升了多少维度。<br>&emsp;&emsp;再拉回到现实，我身处P2P行业，我很清楚这行对小年轻意味着什么。当金融资本开始对屌丝阶层进行收割时，说明这个时代真的留给年轻人的机会不多。那这群花未来钱进行透资消费的小年轻，等到将来他们老的那天谁来养他们？难道像日本现在的年轻人一样做一个佛系青年，整个社会透着无欲望的下流氛围？这是我们80后90后未来必须要面对的一个社会问题。我是从农村走向城市，从小就有个根深蒂固的观念任何事情都有代价，你要想获得必须首先付出，这份付出还包含着未来不确定性的高风险。罗永浩曾经说过，年轻人就应该在年轻的时候把挣的钱花掉，不要年纪轻轻想着存钱，要相信未来会挣大钱。我对这句话也深表认同，前提是你是否准备好付出代价，你是否能像罗永浩一样足够牛逼。所以人合理认识自己很重要，这样你就能把握一个度的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;学生时代受学校教育的影响，对鲁迅学习的比较多，对其辛辣的文字和深刻的社会批判十分喜欢。如今在社会上打拼多年，可能是职
      
    
    </summary>
    
      <category term="杂说" scheme="https://jinfei21.github.io/categories/%E6%9D%82%E8%AF%B4/"/>
    
    
      <category term="杂说" scheme="https://jinfei21.github.io/tags/%E6%9D%82%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>足球透着的历史</title>
    <link href="https://jinfei21.github.io/2018/09/08/%E8%B6%B3%E7%90%83%E9%80%8F%E7%9D%80%E7%9A%84%E5%8E%86%E5%8F%B2/"/>
    <id>https://jinfei21.github.io/2018/09/08/足球透着的历史/</id>
    <published>2018-09-08T03:44:55.000Z</published>
    <updated>2018-09-18T02:26:16.490Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;今年是2018年距离北京奥运会已经过去了十年。话说十年树木百年树人，中国足球如一块朽木一样一如既往的烂。中国足球进世界杯的时候，那时我还在读高中，至今已经十几年过去了。我也不是一个足球迷，今年俄罗斯的世界杯也只全程看完最后一场。说实话，现在世界杯足球越来越无趣了。</p><p>&emsp;&emsp;2018世界杯可以说是有史以来最无趣的一届杯赛。整个32支队基本分为两拨：</p><ul><li><p>传控足球的膜拜者，不顾自身实际情况盲目追求传控，为了传球而传球，不仅丢了自身的特点，反而显得球队很沉闷无聊，例如德国、英国。</p></li><li><p>防守反击的功利打法，在自家禁区前重兵防守，防守层次繁复，移动速度快，抓住机会，依靠快速传球简练配合，给对方致命一击，例如法国。</p></li></ul><p>&emsp;&emsp;上面说的都不是重点，欧洲依靠这些年不断研发、迭代升级原有打法，逐渐弱化了球星的作用。所以现在很难再出现马拉多纳和球王贝利这样一人雄起整个球队的巨星。<br>&emsp;&emsp;传控足球打法名叫Tiki-Taka，最早始于荷兰足球，后被巴萨教父克鲁伊夫带到西班牙，经荷兰三剑客之一的里杰卡尔德发展，在瓜迪奥拉的手中发扬光大，最终帮助巴萨横扫欧洲，实现惊人的六连冠。<br>&emsp;&emsp;防守反击不是过去那种游击打法，后场找一个大脚前锋，能不能偷袭成功全靠运气。现在的反击蕴含在防守的整个体系中，反击不再是单点联线碰运气，而是渗透进了西班牙的传控、意大利的集体快速推进、英超的前场直线突进等打法的精髓，多点配合，几秒之内射门，成功概率非常高。<br>&emsp;&emsp;这两拨都是一个整体体系，是对过去足球战术的升级，建立在严谨的、理性的科学思维基础上。在这背后，运动员的饮食结构、训练方式、身体机能数据监控调节、康复机制、心理调节、对手数据分析等一系列后勤保障。这一项一项早已经过层层分析，建立起了非常高的技术壁垒，这种科学思维正是近代西方工业文明在全球竞争中的领先之道。<br>&emsp;&emsp;正如亚洲、非洲两大洲唯一小组出线，打进16强的球队竟然是受限于身材劣势、从上到下一心想脱亚入欧的日本。事实上，八强打完以后，世界杯就变成欧洲杯了，欧洲包揽了四强，统治了足球。<br>&emsp;&emsp;欧洲不是今天才控制足球。时间越接近现在，欧洲控制足球的优势越明显。未来，这种趋势会更加明显。以前人们一直有一个印象，就是以巴西、阿根廷、乌拉圭、哥伦比亚为代表的美洲球队，时不时在世界杯上战胜欧洲强队，而且巴西、阿根廷一直都是夺冠热门，好像足球就是美洲和欧洲两大集团对抗。但是其实一个隐蔽的事实是美洲足球也是欧洲足球的产品。为什么这么说？看看巴西、阿根廷乌拉圭国家队的球员构成，主力基本都是来自欧洲的五大联赛：意甲、西甲、德甲、法甲、英超。<br>&emsp;&emsp;前几年，央视拍了《大国崛起》的纪录片，深入分析了荷兰、西班牙、葡萄牙、英国、法国、德国、意大利等国的崛起之路。我惊讶的发现榜单上都是当今世界第一流的足球强国。<br>&emsp;&emsp;简而言之，足球是现实社会的滞后历史缩影。<br>&emsp;&emsp;许多年来，中国足球成为全民调侃对象，始终没有人说清它背后的原因。被骂的最多的就是国足和足协主席。国足当然踢得差劲，足协主席也够无耻，但是站在大历史的角度，他们都是历史中的无辜个体。单就个人能力而言，历任足协主席其实也不错，如果他们去创业，成功的概率肯定高于大部分骂他们的人。<br>&emsp;&emsp;还有人说人种问题，说黄种人不适合踢足球。这完全是胡说，在足球世界里，运动员的天赋固然重要，但不是最核心的。不然，拥有第一流运动天赋的非洲球队就不会被集体团灭，连亚洲都不如，而同样拥有14个非洲裔的法国队却夺冠了。<br>&emsp;&emsp;究其原因，工业文明与后工业文明降维攻击的胜利。国足这些年搞得人神共愤，就是因为当代中国足球还处在封建社会末期，刚刚处于近代社会接触到了现代世界，但是离得很远。这种情况有点类似刚刚经历过鸦片战争，火烧圆明园、甲午战争的近代中国。<br>&emsp;&emsp;上世纪90年代，中国和日本在面对西方力量的冲击下，面对现实的巨大差距决心变法图强。不过他们进行的不是明治维新也不是戊戌变法，而是足球的市场化改革。<br>&emsp;&emsp;日本足球职业化改革几乎和中国同时进行，和中国一样同属菜鸟级别，由于身体力量速度等天赋不行，日本足球常常被中国足球虐菜。不同的是，1993年开始日本足球职业J联赛从正式推出就获得巨大成功，很快就成为亚洲最成功的职业联赛。日本足球也由此称雄亚洲，不久更是走向世界，自1998年后，日本每次都能入围世界杯，更是三次打进16强。<br>&emsp;&emsp;而进行市场化改革后的中国足球是什么现状呢？除了2002年打进一次世界杯，一球未进，一分未得之外，再无入围记录。而且中国足球每况愈下，到后来连十强赛等外围赛都进不去，常常沦为叙利亚、科威特等亚洲二流足球的背景板。<br>&emsp;&emsp;中国足球职业化市场化改革失败，日本职业化大获成功，正如19世纪差不多时间进行的明治维新、戊戌变法结局的翻版。当同为儒家文明体系的下的中日两国面对西方的冲击，日本明治维新导致了社会空前发展，先后在日俄战争中、甲午战争中打败对手，从此跻身世界强国。而中国戊戌变法则一地鸡毛。<br>&emsp;&emsp;2004年亚洲杯在中国本土进行，中国队一路过关斩将，甚至将亚洲足球强国伊朗拉下马，眼看就要夺得第一座大赛冠军，却在决赛中遇到日本二队。正如甲午战争中依靠偷袭得手，决赛中，日本依靠一粒决定胜负的犯规手球偷袭成功，终止了中国足球的发展，中国足球从此每况愈下。<br>&emsp;&emsp;同时起步，基础比日本好，为什么中国足球失败了？在大历史的眼里没有什么是偶然的。中国足球失败和戊戌变法的原因是一样的。<br>&emsp;&emsp;由于权力崇拜的封建历史足够长，惯性缓冲力量足够大，中国任何的变法和革新都注定艰难而曲折，顽固的保守派绝对不会轻易放下手中的权力。足球领域的市场化改革就如张之洞、左宗棠、李鸿章的洋务运动一样注定是失败的。<br>&emsp;&emsp;中国足球的罪魁祸首不只是足协这么简单，更根本的是牢牢抓住皇权不放的体育总局。1992年红山口会议之后，开始职业化市场化改革了，中国职业联赛就应该像日本J联赛、英超、德甲一样将主导权交给市场。<br>&emsp;&emsp;但是，慈禧太后们不愿意了？这些年，牢牢抓住职业联赛市场化大权的太后们主要办了以下大事。</p><ul><li><p>首先在精神上进行高尚诉求，仁义道德礼义廉耻。每次大赛失败，秉承体育总局意旨的足协一定会大谈爱国主义、艰苦奋斗。爱国这种精神，只能建立在尊重规律、科学的组织制度基础上，泛爱国主义的大刀长矛是打不过训练有素的坚船利炮的。</p></li><li><p>其次权力胡作非为。在联赛层面，各种神奇的指导意见层出不穷。在国家队层面，什么奥运球员组队打甲A，队委会负责制，赛前讲两句。。。总之是领导灵机一动，大腿一拍，伟大创意就出来了。搞到后来，竟然出现花钱才能进国家队，国家队双主教练的奇葩事。今天学巴西，明天学意大利，后天学英国，大后天学德国、西班牙，领导说啥就是啥。连日本足协主席川渊三郎都不耐烦了，说你们每一任主席都带队来考察学习，每次我们都跟你们讲了同样的东西，为什么要不停重复呢？</p></li></ul><p>&emsp;&emsp;为什么？因为他们都不懂足球啊。<br>&emsp;&emsp;看看历任足协主席都是如何从天而降的吧：阎世铎是体育总局办公厅主任出身、谢亚龙由体育总局电子信息中心转任（后被捕入狱，一起被判刑的还有足协副主席南勇、杨一民）、韦迪由汽摩中心转任、蔡振华由乒羽中心转任、张剑来自体育总局政策法规司……没有一个是足球专业的。<br>&emsp;&emsp;权力说你行，你就是领导。至于你把中国足球领导到哪里去，那就听天由命吧，反正你只对领导负责就行。<br>&emsp;&emsp;一个人不懂足球也不是完全不能领导足球。只要潜行学习，掌握科学，尊重规律，也能推动足球事业发展的。但悲剧的是，这些人往往刚摸清楚足球是怎么回事，就调走了，再调来一个新手重新学习，胡作非为再来一遍。<br>&emsp;&emsp;最新的一任足协负责人杜兆才来自田径，据说他正在搞田径+足球混合选材制度。别人家的足球已经在科学的路上越走越远，连美洲都将被欧洲拉开差距，我们还在折腾中国特色的足球之路。<br>&emsp;&emsp;鲁迅说拿来主义，别的领域不好说，足球领域一定是通行的道理。好的东西，拿来用就行，足球能有什么特色？别人已经探索了一百多年的东西，就真的不如你的特色高明？<br>&emsp;&emsp;学习“胡服骑射”的赵国，不丢人。权力应该退出不属于它的地方，做好监督、调节、服务就好。要相信人民，人民有能力做好人民自己的事情。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;今年是2018年距离北京奥运会已经过去了十年。话说十年树木百年树人，中国足球如一块朽木一样一如既往的烂。中国足球进世界杯的时候，那时我还在读高中，至今已经十几年过去了。我也不是一个足球迷，今年俄罗斯的世界杯也只全程看完最后一场。说实话，现在世界杯足球
      
    
    </summary>
    
      <category term="杂说" scheme="https://jinfei21.github.io/categories/%E6%9D%82%E8%AF%B4/"/>
    
    
      <category term="杂说" scheme="https://jinfei21.github.io/tags/%E6%9D%82%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>知的三座山</title>
    <link href="https://jinfei21.github.io/2018/09/02/%E7%9F%A5%E7%9A%84%E4%B8%89%E5%BA%A7%E5%B1%B1/"/>
    <id>https://jinfei21.github.io/2018/09/02/知的三座山/</id>
    <published>2018-09-02T01:50:29.000Z</published>
    <updated>2018-09-03T02:02:19.076Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天聊一个关于知和认识的话题。说到这个话题，我们先从一段禅宗公案开始。<br>&emsp;&emsp;宋代有过一个著名的禅宗公案，一位大师说，自己在悟道之前，看山是山，看水是水；悟道之后，看山不是山，看水不是水；但是到功力更深了之后，看山还是山，看水还是水。<br>&emsp;&emsp;有过佛学经历的人对上面这段公案应该是再熟悉不过了。各家解释也各不相同，但是不管怎样都有点类似苏格拉底说的不经思考的人生是不值得过的意味。最初我们认识事物的时候，总是从表像去认识事物，等到认识深了总想搞清里面的原理，不能从表象认识事物，等到原理搞清楚了，回过头来看当时认识的事物，这时你会更深刻。对应到这段公案，大师在最初的看山是山，那是第一层山，从表象认识事物，等到大师悟道一定境界，意识到山不过是一大推石头堆起来的，这堆石头因为偶然的机缘而堆在一起，于是被称为山，山只是石头的集合体而已。如果这堆石头分散在世界各地，石头还是那些石头，但就不是那座山了。在这种情况下，你意识到山只不过是你对一堆这样的石头赋予的一种称谓，它是你赋予的。它不是实质性的存在，你到这层就到了见山不是山的境界了。这个时候你的世界是崩塌的，你还想继续深入。到更深一层境界，你终于认识到人的认知能力是有限的，人的理性也是有限的。人只能以这种方式去理解世界，尽管我所理解的世界它不是客观存在，也不是客观真实，甚至什么事客观存在，什么事客观真实都说不清。你在理会这层以后，你就见山还是山，见水还是水了。因为你已经意识到人只能以这种方式思考，不能脱离它之外去说事。这就是第三层山，你说出来还是山，但和你说第一层山的时候，意思已经极为不同了，<br>&emsp;&emsp;上面的解释中，我们知道认识和知是有三座山，你只有看到第三座山才算真正悟道了。但是话又说回来，三座山的难度一座比一座大，特别是第二座山，你的世界观是崩溃的。这估计也是禅宗经常表现为各种顿悟公案的原因。就是你能悟道就悟道，不能悟道就拉倒，免得因为悟性不够搞乱自己的世界。<br>&emsp;&emsp;其实西方哲学家柏拉图对这个问题也有一套说法。柏拉图在他的哲学里面提出过这样一个问题，他说“学习究竟是如何成为可能的？”。<br>&emsp;&emsp;你学的是你已经知道的东西吗？不是。已经知道的东西你用不着学。那你学的是你不知道的东西吗？也不是。因为你不知道的东西，你都不知道你不知道，你不知道你不知道的时候，你根本就不会去学。而你已经知道的你也不会去学，那你要学的究竟是什么呢？你要学的实际上是，你知道你不知道的东西。只有你知道你不知道，你才有可能学。你不知道你不知道，你根本不可能学。那么，“你知道你不知道”这东西是哪来的？它不可能别人教给你，这不是别人教给你的，实际上是天赋的。就像我们骑自行车，刚开始你不会骑，保持不了平衡，也没有人教你一套保持平衡的方法，你上去骑就是了，你最终学会了会保持平衡了，但是你也不知道你是如何保持平衡的。如果你不反思的话，你甚至都意识不到你不知道。直到你反思，你才意识到你会保持平衡了，但确实你不知道你是如何保持平衡的。<br>&emsp;&emsp;已经比较烧脑了，再举个例子。世界上有一种大马哈鱼，它每一到它成熟的季节，就是到它成熟的这种年龄，它就一定要洄游，要洄游到当初它出生的地方，回到那儿来产卵，产完卵就死了。等那卵孵出来之后，在蛋壳长一段儿，进入大海。然后等到它成熟的年龄，再回到它当初出生的地方。为啥一定要洄游？它自己不知道，我们也不知道。而且也不是它父母教它们的，因为它生出来的时候它父母已经死了。而且它究竟是如何找到洄游这地儿的，也都说不清楚。但是它就是非得洄游，而且它知道如何去找到它出生那地儿，但它说不清楚为啥一定要洄游，类似于这种的，都是属于你知道你不知道的东西。<br>&emsp;&emsp;柏拉图说，只有这个东西，才是需要去学的。其它东西都是你不必学或者不可能学的。而这个你知道你不知道的东西，柏拉图称之为“天赋的理念”。这个天赋的理念，把它赋在人的精神世界里，赋在人的精神能力里面。人不知道它从哪来的，这是一方面。另一方面，它其中有一部分是语言可表达的。但其中还有一部分，甚至超出了语言的表达能力之外。<br>&emsp;&emsp;比如把唐诗翻译为英文，当你用汉语读唐诗的时候，你能从语调和画面意境感受到唐诗的美。但是当用英文读唐诗时，你会觉得失去了什么？丢了什么你也说不清，但你明确的知道丢失了，你表达不出来，却能直接感受到它。<br>&emsp;&emsp;柏拉图的老师苏格拉底被雅典公民大会判处死刑，说他败坏青年。因为苏格拉底在雅典城邦到处找人辩论，说你不要孝敬父母，如果不明白为什么要孝敬父母，你就去孝敬，此时根本不叫孝敬，直到你明白为什么要孝敬父母后，然后你再去孝敬，这时才叫真正的孝敬。<br>&emsp;&emsp;实际上，苏格拉底的意思就是说，如果你盲目的孝敬父母，那就是第一层，“见山是山”。但是，你懂得“我不要盲目地去孝敬父母”的时候，就进到第二层了，见山就不是山了。因为我必须得懂得孝敬父母的意义是什么。但是你到了第二层不够，你还必须继续往前走，走到第三层，就是我终于搞明白，孝敬父母的意义是什么了，此时我再去孝敬父母，这才是真正的孝敬，就见山还是山了。你见到的还是山，但是山的意义完全不一样，那么在这种情况之下，就到了第三层山。<br>&emsp;&emsp;但是，雅典公民大会最后把他给判处死刑，原因是什么呢？他告诉人们：第一层山是假的，你应该通过第二层山达到第三层山，但是能够达到第三层山的人需要很高的悟性，多一半人到不了。多一半人都只是，“哦，第一层山是假的，那我不进了”，到了第二层山，然后到这儿，打住了，他没能力往前走。于是在这种情况之下，人们全都不孝敬父母了，只有少数人有能力完成足够的反思，进入到第三层山，重新开始孝敬父母。<br>&emsp;&emsp;柏拉图因为对老师的死耿耿于怀，后期写作中对民主是批判的，更是小心翼翼珍藏起自己的表达意图。以至于施特劳斯把他称为一种微言大义的隐微写作高手。什么意思？就是只有真正的高手才能读懂柏拉图，他给你的是三座山。如果你不是高手，你只能看到第一层山。表面上他说的是第一层山，其实他是想给你第三层山。如果你看不到也没有关系，你的世界观或者社会秩序不至于受到颠覆。而他想给出的真正的深刻的东西，也能给的出来。<br>&emsp;&emsp;关于知的三座山聊到这，希望你能做一个看的见、看的明白、最后揣着明白装“糊涂”的人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;今天聊一个关于知和认识的话题。说到这个话题，我们先从一段禅宗公案开始。&lt;br&gt;&amp;emsp;&amp;emsp;宋代有过一个著名的禅宗公案，一位大师说，自己在悟道之前，看山是山，看水是水；悟道之后，看山不是山，看水不是水；但是到功力更深了之后，看山还是山，看水
      
    
    </summary>
    
      <category term="哲学" scheme="https://jinfei21.github.io/categories/%E5%93%B2%E5%AD%A6/"/>
    
    
      <category term="哲学" scheme="https://jinfei21.github.io/tags/%E5%93%B2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>明朝党争</title>
    <link href="https://jinfei21.github.io/2018/08/26/%E6%98%8E%E6%9C%9D%E5%85%9A%E4%BA%89/"/>
    <id>https://jinfei21.github.io/2018/08/26/明朝党争/</id>
    <published>2018-08-26T07:34:48.000Z</published>
    <updated>2018-10-22T09:08:18.316Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近房租事件和滴滴顺风车事件引发了社会关注，朋友圈也看了不少文章，不过大多都是情绪的发泄，于理性看待世界没有任何益处。我觉得任何朝代灭亡都是不可避免的，他们的本质其实都是一样，都是来自于既得利益者的无限利益膨胀，而挤压了其他几个阶层的利益，导致小部分群体的极度暴富，而大部分群体无立锥之地，阶层分化到最后一定是崩盘的节奏，中国历史二十几个朝代的灭亡本质都是这个。这些事件看似孤立，某种程度也反映了社会演化的方向。<br>&emsp;&emsp;历史上中国都进行过变法改革，期望缓和社会矛盾，但实际上都无法解决。改革就意味着利益重新分配，指望从一个阶层出钱补贴另外一个阶层，最后的结果就是改革还没有开始就让既得利益阶层干掉。很多西方民主国家也面临这个问题，民主的本质就是形式上大部分掌握话语权的过程。西方国家陷入高福利社会的陷阱，其实也是底层利益阶层欲望不断膨胀供给却受到抑制无法增长（大家都不愿加班劳动，强调个人权利），这个时候，你让这些人的利益受损，人家立马就投票让你下台。这也是一个悖论，谁支持你，你必须回报他，否则就被干掉。<br>&emsp;&emsp;有人说明朝亡于党争，这话对也不对，某种程度上对了一大半。明朝社会的知识分子中漫延着一股清流，所谓清流就是只知道每天一堆理想化的看上去各种好却总落不了地的建议，听不得任何人的批评，如果有人批评就各种使绊子。明朝的东林党带来的一系列党争直接改变了明朝的政治格局，不到六十年明朝就结束了，看上去是东林党搞死了明朝，本质上是东林党背后的既得利益群体目光短视害死了明朝政府。明朝最后一次改革是张居正，张非常强势，逼迫既得利益妥协，短暂维持了一段时间，但是人死政亡，立马被清算各种污蔑。<br>&emsp;&emsp;这个就是过去的政治现实，有钱人不肯被利益侵害，文人被有钱人驱使按照有钱人的喜好来评价一个人的是非。绝大部分看到的东西，都是别人想让你看到的。前不久看到一篇文章，说如果张居正如果不死，明朝会不会灭亡？文章有一段话讲的特别好：他说地主不愿意给政府交税，所以政府没钱，也就无法对抗后金，迎接他们的命运最后只能是政府盘剥本来没钱的人来维持统治，而这帮人最后的结果必定是揭竿而起，直接把那些看不到未来舍不得出钱的有钱人搞死。<br>&emsp;&emsp;魏忠贤当政的时候是天启帝，这个皇帝喜欢做木匠，所有事情基本都是安排魏忠贤在做。现在历史上写魏忠贤都不是好词语，魏忠贤总结下来就做了三件事：</p><ul><li>第一件事情就是干掉东林党，他每天看到一帮不干正事，整天弹劾这个那个的人特别烦，弄了个东林党名录，给每个人编号，用三年时间，一个个弄死了。这个或许是魏忠贤是大奸臣的直接原因吧！</li><li>第二件事情是大力收税，魏忠贤是农民出身，基本对农民没有加税，关键是农民也没钱加税，张居正改革的时候，大力发展工商业，他就对工商业大力征税，天启一朝光江南的茶叶税一项就20万两进账。相比崇祯皇帝10万都收不上来。</li><li>第三件事情关宁防线得以组建，孙承宗，袁崇焕，满桂，祖大寿得到重用，甚至魏忠贤以国事为重接受东林党推荐的熊廷弼。</li></ul><p>&emsp;&emsp;天启帝五年，东林党被摒弃后，袁崇焕依然带兵打仗赢得了天启六年的宁锦大捷。天启三年三月，努尔哈赤率领大军攻陷沈阳后，又进攻辽阳，两军在城外部阵激战五日，明军战败，辽阳告陷，辽东经略袁应泰自刎而死。辽沈一失，谁继承袁应泰出任辽东经略成头等大事，各个党派也很重视，因为谁获得了辽东经略位置，就等于取得了军国大计的发言权。<br>&emsp;&emsp;东林党人刘一燝、江秉谦等推荐熊廷弼，浙党一派则力挺张鹤鸣。朝廷还是同意了东林党人的推荐，重新启用熊廷弼。魏忠贤死后呢？魏忠贤死后，孙承宗被罢，袁崇焕被杀。尤其是袁崇焕被杀更是自毁长城。<br>&emsp;&emsp;评价魏忠贤是忠是奸或是贤是恶很难确切的评论。最有发言权的是由天启和崇祯两兄弟回答，因为大明江山是朱家的。</p><blockquote><p>朱由校病重时 “召见阁部、科道诸臣于乾清宫，谕以魏忠贤、王体乾忠贞可计大事”；临死时，让魏忠贤宣召朱由检入宫，“上病亟时，召皇弟信王入，谕以当为尧舜之君，再以善事中宫为托，及委用忠贤语。既崩，忠贤自出迎王入。”（《明史•宦官传》）。</p></blockquote><p>&emsp;&emsp;天启帝临时嘱托崇祯皇帝是：魏忠贤“恪谨忠贞，可计大事”。这“恪谨忠贞，可计大事”八字是值得人们深思的。“恪谨忠贞”说明魏忠贤是忠于大明朝的，而且能以国家大计为重。<br>&emsp;&emsp;崇祯皇帝自认为自己会比哥哥高明，能驾驭东林党这匹野马为己所用。所以一上台，立即“逐忠贤党，东林诸人复进用”。最后崇祯皇帝吃尽这帮人的苦头。东林党这帮人集中在一起，天天读书讨论天下大事，就是不做实事落地。执政的不干活，骂你昏庸，有钱骂你贪污，干活的骂你为了政绩残民以逞…..反正干越多错越多，干活不容易。然后还觉得自己很牛逼，加上这帮人学问好，骂人骂出水平骂出花样。<br>&emsp;&emsp;天启帝开始的时候还是重用东林党人，受益于张居正的改革，还凑合过得去，并没有发生大规模民变，反倒是工商业冲击官府，没有看到农民反抗。也就是富裕的地方反倒有民变，贫穷的地方反倒还好。其实根源就是魏忠贤对工商业大规模征税，引起商人不满。这里说明的问题也很有意思，其实越有钱的人，他的钱越动不得，一动就闹事。越没钱的人，只要不让他真无路可走，反倒可以随便动。所以革命往往跟贫困无关，跟期望有关。动既得利益者群体的利益绝对比动无立锥之地群体的利益更难。崇祯皇帝登基之后面对的困境就是北部后金的侵扰，这个时候东林党人主要做的就是党争。东林党上台以后大部分用来干掉和自己意见不一致的，对辽东提出消极防御的策略，但是防御是需要军饷的，大概占明朝三分之二的财政收入。这边要花钱，那边还不允许皇帝与民争利，不对工商业征税，对农民加税，结果边患没有解决，内乱又起来了。<br>&emsp;&emsp;民变一开始，天下开始混乱，给了后金乘虚而入的机会。魏忠贤还能以国事为重，不拘泥于党派意识形态，但是东林党不行，他们凡是不是自己派系的都极尽挖苦之能，丝毫不以国家为重，最终导致天启帝对东林党很失望，也给了魏忠贤灭掉东林党机会。东林党四处灭人的过程中，也迫使很多人自己建立起小团队对抗东林党，加剧了朝野对抗，纷纷以地域划分，宣党、浙党、楚党、齐党纷纷组织起来，联合起来对抗东林党,互相之间也顺便斗一下。<br>&emsp;&emsp;历朝历代，只要党争一出现，正事就别干了！现在其实也一样，看看现在的台湾，那个民主的地方，两个党把一个小小的台湾搞成了什么地步了。不是说民主不好，也不是说独裁就好，全球民主体系下出现过很多牛逼的国家，当然也出现过很多很破败的国家，很大程度上这还是两件事，独裁不是好体制，但是许多阿拉伯地区，也一样能享受很好的石油红利，过着还不错的生活，新加坡也从来不是民主国家，一样可以靠着马六甲过着不错的日子，严苛峻法下的新加坡，也没人拿他体制说事，本质而言，民主和经济发展这是两件事，不是有了民主发展就更好，也不是独裁一定导致发展不好。<br>&emsp;&emsp;明朝被党争搞得内忧外患，朱由校也就是天启帝，实在烦死了这帮人，就把魏忠贤给推出来灭了这些满口仁义道德不干事的文人。魏公公出政策收这些税吧，东林党不执行。魏忠贤这个人农民出身，反正阴谋诡计也不太会，就是简单粗暴的干干干，就基本上灭了这些人。然后自己派出太监去当税监，去全国收税。太监你能要求他们有多高的素质，肯定收税的时候中饱私囊，横征暴敛什么的免不了有一些。但是现实就是如果不是这几个太监收上了足够的税负，估计天启帝都撑不到崇祯当皇帝。后来好不容易崇祯当皇帝了，终于把魏忠贤干死了，东林党再次上位，结果上位后不吸取教训，第一件事情做啥呢，继续打压其他人，把不是东林党的人都称之为阉党，没小JJ的是阉党，有小JJ的也是阉党。这些人的德行就是说的都很好，做的都很差，所以崇祯皇帝也捉急，崇祯是明朝难得勤勉的一个皇帝，可能在勤劳上。除了朱元璋，朱棣就算他了。上台以后，在位十七年，换了五十个首辅。平均一年仨！一方面是崇祯皇帝多疑，另外一方面铁定也说明东林党的人没一个能用的，都是夸夸其谈的家伙。<br>&emsp;&emsp;后来李自成兵围北京的时候了，国库亏空，崇祯向朝臣们借钱，个个都没有了。这些朝臣平时激昂高亢爱国，到国家需要他们奉献了，个个都没钱，是他们真没钱吗？不是。李自成一进京，从他们身上就收刮到七千万。他们是宁可国破，也不肯出钱。还有莫名其妙的优越感，也不看看现状，在各地流民大规模动乱开始的情况下，有人提出跟后金议和，腾出手来解决国内问题，结果东林党人一个个都叫嚣着天朝怎么可以跟蛮夷谈和，于是内讧不止，崇祯在这些人的扶持下，能成功就是见鬼了。李自成攻入北京的时候，崇祯帝撞钟，文武百官无一觐见的，而唯一一个陪在崇祯帝身边的人，只有一个太监王承恩。<br>&emsp;&emsp;崇祯十七年三月十四日，也就是他煤山上吊自杀殉国前的第五天，崇祯在大势已去、大厦将倾的绝望中，在听到太监曹化淳说的那句“忠贤若在，时事必不至此”的话之后，终于领会到天启皇帝临终前，强调魏忠贤“恪谨忠贞，可计大事”的深意所在。幡然醒悟的同时，无力回天的崇祯在精神上彻底崩溃了，命人秘密将魏忠贤的遗骸收葬于香山碧云寺。收葬魏忠贤遗骸，既是他对魏忠贤价值和功绩的重新肯定，也是对自己17年执政生涯的全盘否定。<br>&emsp;&emsp;明朝的烟雨就这么过去了，虽然没有一个朝代能永远的存在下去，但是大明朝的灭亡，更加的有些值得当下借鉴。往往道貌盎然的人更加注重的不是整体性的利益而是自我的小群体利益在他们眼里，国家可以灭亡，朝代可以更替，但是他们的话语权和身份地位并不会消失，谁当皇帝都一样。<br>&emsp;&emsp;人的高尚和卑劣与文化程度无关，与受教育的程度也无关。从政治角度来看，其实高尚与卑劣没有什么根本的分别，只是在人们的一念之间。一位研究明史的学者，对这段历史有过一段很精辟的论说。他说：“把人分为君子小人本来是孔子一个不高明的发明，然而世界上的事就是这样奇妙，自从发明了君子小人的分野之后，士人果然就分成了君子与小人两个团体。儒学对士人的人格提出了不现实的要求。摆在士人面前的只有两条路：一条是极端道德主义，为了天理而活，灭绝人欲，整天把自己关在圣人之道的刻板模子里，活得战战兢兢，如履深渊，充满了悲壮；另一种则是极端现实主义，这种人承担不起崇高的生命目的，干脆就向身体里的自然欲望投降，既然没能力遵守过高的道德原则，干脆就不要任何原则，为了利益，不择任何手段。明朝士大夫争相标榜道德，崇尚气节，忠臣辈出，为历朝之最。然而，有明一代，士大夫中卸去所有道德负担，不要任何廉耻的人也比历朝为多。”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;最近房租事件和滴滴顺风车事件引发了社会关注，朋友圈也看了不少文章，不过大多都是情绪的发泄，于理性看待世界没有任何益处。我觉得任何朝代灭亡都是不可避免的，他们的本质其实都是一样，都是来自于既得利益者的无限利益膨胀，而挤压了其他几个阶层的利益，导致小部分
      
    
    </summary>
    
      <category term="历史" scheme="https://jinfei21.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    
      <category term="历史" scheme="https://jinfei21.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>为什么共产党能赢</title>
    <link href="https://jinfei21.github.io/2018/08/18/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%85%B1%E4%BA%A7%E5%85%9A%E8%83%BD%E8%B5%A2/"/>
    <id>https://jinfei21.github.io/2018/08/18/为什么共产党能赢/</id>
    <published>2018-08-18T06:59:11.000Z</published>
    <updated>2018-08-29T02:17:53.530Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近看了一些近代史方面的东西，琢磨着写点啥，偶然看到徐焰少将的著作《解放军为什么能赢》，顺便拜读了一下。关于党史无论是正史还是野史，我还是在大学入党时期系统学习过。不过那时阅历太浅，很容易被一些肤浅的民主自由的言论所蒙蔽，会遮蔽自己很多理性的判断。最近这些年在社会上打拼，才知道成功的不易。因此再反思中共党史，考虑到客观因素，共产党能取得现在的成绩真是不容易，今天就好好聊聊这一话题。<br>&emsp;&emsp;先回到1921年，这一年中国共产党成立。其实从根上说，中国共产党还真不是受苏联十月革命的启发而建立的。列宁通过暴力夺取政权以后，要在全世界各地建立共产国际分部，支持世界各地的工人阶级运动，建立世界社会主义帝国，这个是要出钱的。建一个党可不是随便玩的，是要真金白银投入的，所以实际情况是当时南北陈独秀和李大钊相约建党是接受共产国际领导的，某种程度上充当了苏联在中国的代言人。最后李大钊死的罪名是俄国间谍，被握有真凭实据的奉系军阀张作霖处以绞刑。<br>&emsp;&emsp;中国共产党的建立一波三折，本来在上海举行的中共一大被法租界巡捕搜查，会议被迫休会，最后不得不转到嘉兴的一个游船上举行。说起来很有意思，共产党的筹建者南陈北李都没有到会，而毛泽东却以最低资历的团员身份参与了共产党的成立，这届与会人员很多后来都叛变革命了，相反最低资历的毛泽东却开创共产党的腾飞，成为事实上中国共产党的缔造者。<br>&emsp;&emsp;中国共产党建立以后仅仅是发一些传单，宣传工人工会，并没有实际掌握政权的举动。这时候中国面临军阀割据，整天都在打战，国家完全在内耗中毫无发展可言。孙中山领导的国民党这时考虑到共产党是一支可以利用的力量，这时两党开始了第一次国共合作，同时接受苏联人的帮助，开始建立黄埔军校，筹建两党自己的军事力量。按说国民党和共产党一样，也是一对难兄难弟，早期孙中山闹革命就是筹钱，依靠各省当地的革命势力推翻清王朝，但是这有个问题，这些当地的力量接受钱，却往往不听指挥。当时国民党只是一个名义组织，毫无统治力。这个时候孙中山开始考虑建立自己的军事力量，所以在黄埔军校建立后，等到力量差不多了，国共开始北伐，像北伐军里面有很多共产党和国民党的将领。<br>&emsp;&emsp;在孙中山在世的时候，国共合作真的是一帮有理性有抱负的人想建立一个统一的现代化中国。谁知道孙中山一死，蒋介石通过非正常手段成为国民党的领导者。他去苏联一番考察发现列宁搞得那套完全有悖人伦，回国后开始筹划清党，导致了国共正式决裂。共产党秘密筹划在各地爆发起义，准备和国民党拼一把建立自己的红色政权。从这个时候开始，共产党被国民党逼着开始真正掌握自己的力量。<br>&emsp;&emsp;建立自己的力量是要养着一支受自己领导的军队，当时却面临着世俗的障碍。中国历史上长期实行兵民隔绝制度，当兵吃粮只是一小部分人的专门职业，在“好男不当兵，好铁不打钉”观念的影响下，民众很少接触军事技术和训练，毫无战斗素养，且行动散漫，仓促组织起来，看上去人山人海，气势壮观，但实际上毫无战斗力。面对纪律严格、训练良好的正规军，根本不是对手，只会一触即溃。所以南昌起义失败以后，其实真的没死多少人，数万人的部队，最后到井冈山的不到千人，大部分中途就退出了。<br>&emsp;&emsp;其实这个时候的国民党军队的情况也差不多，不过国民党的情况好点，国民党掌握政权，有自己的财政基础养自己的军队。共产党这时候不掌握政权，军队的军饷必须要自己想办法解决。秋收起义以后，毛泽东带领部队且战且退，士气低落，士兵不断逃亡。到了江西永新县，找到了一个群山环抱的小山沟，可以暂时摆脱敌人追击休息一下，这就是三湾村。在这里，毛泽东主持了军史上著名的“三湾改编”。这次的改编就是来解决这一个问题的。<br>&emsp;&emsp;三湾改编这次行动让共军和国军有了本质的区别，共军也从此开始了脱胎换骨的蜕变。毛泽东的这次改编就是取消军饷，改为供给制，不发钱只发基本的吃穿，每人每天只有5分钱的伙食费。这样做减少了军队对资金的依赖，相当于节流压缩开支。同时也带来了另一个问题，不发军饷会不会像历史上出现军队哗变和溃散？关于这点毛泽东也想了很好的办法，首先，党支部建在连上，强化政治领导。第二就是实现军内政治民主。建立士兵委员会，军官不允许打骂士兵。第三实行经济民主，虽然没有军饷，伙食也差，但是伙食账公开，士兵参与管理，军官不可能再像过去那样吃空饷、喝兵血、中饱私囊。也正是这些在当时看来微不足道的举动，甚至有点冒险，却空前激发了士兵的热情，让士兵对部队有了很强的责任感，让共军和国军有了本质的不同。<br>&emsp;&emsp;以上介绍了国民党逼着共产党完成了第一步组织上的创新。接下来等到日本人打进来，继续帮助共产党完成第二步蜕变。抗日战争开启了国共的第二次合作，虽然正面战场是国民党在抵抗，共军主要是敌后游击，但是真正有希望的是共军。为什么这么说呢？国军在抗日战争开始还没有完成事实上的统一，蒋介石的中央军只有江浙沪皖等数个省份，其它省份根本不受他控制。以前国军之间混战，都是散兵游勇式的群殴，根本不是正规军队之间的对抗。一支今天拥护中央，明天反对中央的军队，突然被组织起来，对抗一支强大的现代化军队。从来没见过这么多炮、从来没见过飞机坦克，而且从来没见过这么坚韧的对手。弟兄们想死守，不知道敌人从哪儿过来，弟兄们想防守，不知道怎么挖战壕（国内的战壕就是一条线），直到转进台湾，国军才知道，原来防线不是挖一条战壕就行，需要有纵深防御，要多条防线交替。在这种巨大的恐惧面前，当兵吃粮的人本能的开始想家了，在黑夜的撤退中，突然有军队冲过来，长官找不着，军队只好按照传统的内战模式，一哄而散。在这种情况，一个大队击溃一个师并不奇怪。所以我们可以看到，抗战胜利前夕的豫湘桂会战，国军丢失国土20多万平方公里，城池146座。日军缴获了大批美式机枪、火炮。这时起，国军的装备已经优于日军，但战术水平差的很远，战斗意志更糟。<br>&emsp;&emsp;共军这时候是有理想的，士兵明白为何而战，而且总是处于劣势，所以明白撤退的目的，士气不会受到巨大打击。反观国军敌后游击的50w人，要么崩溃，要么投降。八路军彻底放弃了决战，把大战细化为了一系列数不胜数的细小战斗。面对这一点，日本的装备优势和训练优势就SB掉了。越是现代化的军队，分工越细，后勤兵越多，土八路在山沟里蹦，日军的大炮和坦克都2B了，快速机动也2B了，可以说，需要中佐以上官员协调的事情统统2B了。<br>&emsp;&emsp;以时间、空间和人命做代价，八路军在与日本的战斗中锻炼起来了，低水平的战斗好像是高手在给低手喂招，八路军越打越好，虽然他们穷的没有子弹没有枪，他们的战术水平越来越高，唯一欠缺的是大兵团作战能力，他们还没这个资格，这一点是战术水平低下的国军帮八路成长起来。<br>&emsp;&emsp;在敌后游击区，共产党如同一块粘瓜糖，最大的一股力量也不过几百人，建国后的十大元帅都是带着几百人在山里转来转去，不投降，不消停。 你不能指责他们游而不击，他们只要活下去，让日本人不敢撤兵，就是在消耗敌人的实力。拿什么打？山东军区偶尔缴获了一门九二步兵炮，只有3发炮弹。日本人疯狂的追，共军只好把它埋到土里。日本人后来又派汉奸谈判，提出用三挺重机枪和子弹换，共产党就是不答应。无他，有了这门炮，所有的炮楼都紧张，以往几千人攻不下的炮楼，现在感受到威胁了。<br>&emsp;&emsp;河北的地雷战，鬼子踩上去，轰隆一声响，然后看到踩到地雷的鬼子哇哇大叫，全身漆黑——土法做 的黑火药太差了，唯一的办法是在地雷里放上狼毒和大粪，让他伤后感染而死！山东许世友的部队高级点，炸药还行，用的地雷是遥控引爆。也就是一个人藏在离道边 十米的距离，鬼子经过的时候，他手动拉线，一拉一炸，线露出来了。这个人就得赶快跑，那真是玩命。敢干两次的人，肯定记功提干。<br>&emsp;&emsp;日本的步兵连排战术给粗糙的苏联人留下了很深的印象。尽管诺门坎打败日本，可苏联动了倾国之力，日本人以灵活的连排战术创下了两次战术性胜利，这是在缺少反坦克武器的情况下取得的。世界唯一能够在连排战术上克制日本的，只有共军。这是在搏杀中锻炼出来的技巧。共军还有一点好处，由于打惯了败仗，习惯自身的劣势，没有面子问题，说走就走。可日本人不行，你和土八路过招，竟然撤退了，你无能！这方面的典型就是阿部规秀，雁宿崖下，黄土岭上，一心报复的阿部规秀最终把自己也给搭进去了。<br>&emsp;&emsp;1943年6月8日，习惯了东躲西藏的八路军在河北宋庄与日军遭遇，两个正规连对抗着二千五百拥有精良装备绝对优势的敌人。结果杀伤敌寇坂本旅团长以下官兵一千一百人之多，而自己只伤亡七十三人，战斗从白天到黑夜，整整坚持了十四个钟头，而最后胜利突围而出。网络上很多年轻的质疑者还在怀疑杀敌数字的准确性，尽管那个年代的八路很少有撒谎的习惯。放开数字不说，这场遭遇战说明了一个问题，八路军的连排战术，已经开始超越日军。其实，当时制约共军的因素已经不多了，共军正规军的战术水平可以进行一场野战了。从平型关的4:1到宋庄73：1000，这个变化是惊人的。共军被困扰的，一是缺少火炮以及压制敌方火炮的手段，导致部队的大规模机动受到限制，二是缺少组织大规模野战的能力，红军时代组织方面军作战的能力已经严重退化。这再次证明，能力不等同于知识和经验。同样，日军的野战能力也在没完没了的守炮楼的过程中退化掉了。步兵单兵战术是陆军的基础，是日本人最优秀的科目，日本人的精兵开始消磨殆尽，而中共已经在战火的磨砺中成长起来。步兵连排战术也是日本人的强项，可中共在这个科目上更加优秀，不优秀的已经死掉了。<br>&emsp;&emsp;在胜利之后的国共内战，阎锡山至少留了五万日军帮他打内战，但不过是给共军造成一些小的困扰而已，这些日军留下的痕迹，是共军战史上说某某山头或某碉堡防守的特别顽强 —— 但是，我们还是把它打掉了。没有一支日军在战术战役中给共军形成大的威胁。共军的缺陷，全被国军帮忙补上了。战术能力低下的国军为共军送来了火炮和炮手，宽容的和共军一起演练大兵团作战，给了对方犯错的空间 —— 你不给空间也不可能，共军的步兵战术太优良了。万家岭会战，国军歼灭不了106师团，主要就是对方步兵战术优秀，共军此时比日本人更狠。三年演练、一年休整，当共军出现在朝鲜战场的时候，步兵正处于鼎盛时期。<br>&emsp;&emsp;在新中国成立之时，因为国军的在抗战中的表现，世界几大国没人看得起中国军队。甚至连日本人也十分不服气，但是实际上这个时候共军的战斗力已经在日本之上了，共军经过八年抗战和内战的洗礼，已经完成了自身的蜕变。当志愿军出现在朝鲜战场的时候，美国都没有当一回事，因此在初期吃了大亏。这时开始了中美之间硬碰硬的对抗，共军开始向世界证明自己是一流军事强国。<br>&emsp;&emsp;实际上朝鲜战争，中美是互相学习。志愿军的连排战术优良，尤其擅长迂回包抄和穿插。崇尚技术的美国人认为，战斗就是火力的对比与叠加，对后勤看的极重，当后勤线被切断而又无力恢复时，突围就成为第一选择。后来，美国人也学会了穿插，五次战役时，他们的伞兵超低空跳伞，突然出现在志愿军身后的一个山头上，竖起了星条旗。志愿军回头看了看，派了两个岗哨，无动于衷。这让美国人束手无策，在他们的认知中，这一突然行动会让敌军大吃一惊，甚至崩溃。事实上，英军以此法“惊溃”过土耳其，德国人以此法“惊溃”法国人，可习惯了反扫荡的中国人无动于衷。最后，看看前后的红旗，美国伞兵趁夜又穿插了回去。这完全是两种作战思维的问题。砥平里战斗是一个重要的转折点，走投无路的美国人死守砥平里，结果守住了。美国人这才意识到，志愿军的攻坚能力太弱了。自此，美国人坚守，无隙可乘的志愿军也拉开了防线，战争回到了一战模式。<br>&emsp;&emsp;二次战役中攻击与撤退，让美国人刻骨铭心。志愿军拒绝正面进攻，“总是十几个人从出其不意的方面冲上来”，冒着严寒，美军开始了突围。即使在严寒的天气里，美军依旧是撤退而不是溃退，他们的殿后部队尽职尽责的挡住了志愿军的追兵，摧毁了自己认为重要的军事物资，他们的开路部队按照命令，对每一个阵地发起凶猛的冲锋 —— 其中就包括松骨峰。在一条河边，工兵架起了一座钢铁浮桥，这是从日本空运来的。没想，志愿军的敌后侦察兵在突袭中把该桥炸毁。美国空军立刻从美国本土把另一座浮桥的组件空运过来，一天以后，美国人继续撤退。然后，志愿军的敌后侦察兵（估计还是同一伙人），又伪装成韩国人，混上桥去，再次将桥炸毁。美国人艰难的把另一座同样的浮桥从欧洲运了过来。两天以后，志愿军的这支部队只能远远的在山上看着，打几下冷枪，美国人估计，他们的炸药用完了。中国人没有记录这是那一支部队。但美国人的记录展示了两支军队的可敬可畏之处。一支部队把人的能力发挥到了极致，另一支部队则展现了赤裸裸的工业暴力之美。在桥断的时候，美国人并没有溃逃，他们的后继部队继续死守，前面的部队在等待，通车之后，他们井然有序的逃走。所以，正在人们为胜利欢呼的时候，刘伯承惊叹，美军败而不乱，有章有法，果然是盖世强军。<br>&emsp;&emsp;两支军队在交手中互相学习，互相进步。美国人努力学习夜战防御，提高步兵近战火力和炮兵反应速度，中国人则练习在美式炮火下的生存技巧和短促突击。中国人把人的能力发挥到了极限，美国人把工业化能力发挥到了极限。美国人的战术战略源自欧洲，特别是英国给他们的影响巨大。美国军队是火力至上，一切手段都是为了更好的输出火力，训练的目的也是为了更好更快更准确的输出火力。中国军队从美国军队学到的专用战术术语就是“压制”和“盲射”，打那么多炮不是为了消灭敌人，而是让对方趴在地上别动弹。中国的战略观是你死我活的总体战，死一个人，消耗你一发子弹都是值得的。而工业化发达的美国，则认为坚持下去只是面对钢铁的洗礼，有什么意义？ 这两种思维方式造就了美国人觉得投降很正常，而中国人觉得投降可耻。因此朝鲜战争说美国人怕死容易投降，只在美国人觉得反击突围无望的情况下才可能发生，美国人并不是少爷兵的那种。二战的时候美国军方规定：只要飞行员完成25次出击任务，就可以休假半年。到战争结束，没有一个机组享受到这个福利 —— 全被击落了。美国人并不是像某些纪录片上说的那样贪生怕死的那种，美国人也是很顽强的。<br>&emsp;&emsp;1953年以后，战线依旧在缓慢而耐心的向南推进，之所以不打了，是因为苏联人不想打了，我们用士兵的鲜血，换来了苏联的援助，开始了人类历史上最剧烈的工业化进程。从1937年24支军队的集合体（共军只是其中一支），到1953年的强悍步兵，现在可以骄傲的说，中国人的步兵战斗力第一。所以说，无论是日本人的侵略，还是欧美人的铁甲，都不可能击败中国人。读史者看到日本人与美国人交战两年而显颓势，感觉日本军队是渣，进而推论中国人更渣，这完全是站着说话不腰疼。美国人的评判中，有评论日本人的战略失误，有强调日本人的战术得失，有夸大日本人的技术缺陷，却唯独没有贬低日本人战斗力的。<br>&emsp;&emsp;面对二战的王者之师，中国军队没有退缩。中国人经过近代一百多年的磨难，从小米加步枪开始起步，在新中国成立之时，中国军队竟然和世界一流强国的美军打平了，从此让世界开始正视中国力量。这里面不仅有战略战术，更有民族组织动员能力。共产党在付出了惨重代价后，终于带领中华民族开始了现代化历程。<br>&emsp;&emsp;最近中美的贸易对抗沸沸扬扬,我就听到过很多专家学者说要和美国和解，以为一味讨好美国，美国就会放中国一马，完全是幼稚。毛泽东早就说过以妥协求和平则和平亡，以斗争求和平则和平存。还有目前经济形势不好，部分媒体就大加渲染。其实我一直有个观点，好日子都是从苦日子熬过来的，哪可能天天都是好日子。我们的父辈总不是从缺衣少食的苦日子才熬到今天，凭什么今天的年轻人就得立马过上好日子？没有苦日子哪有好日子。这都是经济周期，是正常的现象，只要努力熬过苦日子，好日子总会到来。中美贸易战这场对抗，相比以往中美数次交锋，中国这次的条件更好，所以这次只要中国以破釜沉舟的勇气面对，胜利肯定属于中国，时间这次在中国这边，现在这个时候不比上次大使馆被炸了。虽然中国相比美国国力还相差很远，不仅是科技方面更有人员素质方面，举个很简单的例子，美国有几百万民间飞行爱好者，这在战时都是战斗机飞行员的后备力量，都不用培训直接上战场。日本在二战时因为空军损耗殆尽，导致散失制空权以后强大的陆军毫无作为。必须正确认识到和美国的差距，不能和美国硬碰硬，该合作还是得合作，实在合作不了，也要拿起武器斗争，时间拖得越久对中国越有利。像几次困难时期中共都度过去了，现在的问题比那时小的多，我的结论是共产党这次一定会赢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;最近看了一些近代史方面的东西，琢磨着写点啥，偶然看到徐焰少将的著作《解放军为什么能赢》，顺便拜读了一下。关于党史无论是正史还是野史，我还是在大学入党时期系统学习过。不过那时阅历太浅，很容易被一些肤浅的民主自由的言论所蒙蔽，会遮蔽自己很多理性的判断。最
      
    
    </summary>
    
      <category term="历史" scheme="https://jinfei21.github.io/categories/%E5%8E%86%E5%8F%B2/"/>
    
    
      <category term="历史" scheme="https://jinfei21.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>唯识学</title>
    <link href="https://jinfei21.github.io/2018/08/12/%E5%94%AF%E8%AF%86%E5%AD%A6/"/>
    <id>https://jinfei21.github.io/2018/08/12/唯识学/</id>
    <published>2018-08-12T06:09:29.000Z</published>
    <updated>2018-08-22T11:32:50.280Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;佛教哲学的一个体系大乘唯识哲学，在民间般若学是显学，读金刚经和心经的比较多，在学界唯识学从出现开始一直到今天都是佛教哲学的显学。按照思想体系来分，唯识学存在两种分类，一类是新旧分类法，另一类是古今分类法。下面就详细聊聊这两块内容。</p><p>&emsp;&emsp;唯识学的古今分类法，所谓唯识古学是以世亲大师为代表的，所谓唯识今学是以陈那大师为代表的。两人都是唯识学的宗师，他们学说的区别是古学是顺从旧说，今学则是推演衍新说。唯识学的基本命题是‘唯识无境’，所谓‘唯识无境’是我们如何去认识这个世界的方法问题，世界就是所谓的镜，它是从哪里来的？是从我们的识来的，是我们的识了知来的，所以唯识所以无镜，就是说世界不存在，只是我们识的反映。那我们的识存不存在呢？镜已经不存在了，那识呢？这就是唯识古学和唯识今学的分歧所在。也就是关于识的存在性上两者看法不同。世界已经不存在了，那你感知这个世界的能力到底存不存在？这是唯识无镜的第一个概念。唯识无镜的第二个概念就是识的三分法，识是由三部分组成的，分别是见分，相分，自证分。所谓见分就是我们摄取事物的能力，比如眼睛就是我们看见事物的能力。所谓相分就是世界上的事物反应给我们的形象。见分和相分是如何关联的呢？他们是通过阿赖耶识来相互作用的。见分和相分都是动作，最终我们摄取事物的形象反映在心识上是通过自证分。自证分就是识的本体，它具有认识能力，这个识是实在的。当我们看见一个东西的时候，用我们自己眼睛的见分去摄取物体形象的相分，然后阿赖耶识连接了这个见分和相分，在我们心识的自证分部分感知到了物体的实在性，只是感知了物体的实在性，不是说物体真的实在。这个物体的相分并不是物体自身的，通过我们眼睛的这种见分转化来的，也就是事物的实在性是依托于见分，自证分能感知到事物是依托于见分的，这就是唯识学的依他起性，所以在唯识古学里，这个自证分这个识的本体它必须是实在的。而陈那大师的唯识今学，不承认自证分的实在性。世界不存在，你感知世界的这个能力也不存在。唯识今学认为，所谓的相分并不是世界实体的性质，也并不是眼睛见分去摄取的，而是你眼睛派生出来的幻镜，也就是说你看见什么不是你眼睛的能力问题，是你眼睛的想法问题。当然你眼睛有想法也没用，因为最后真正具有实在性的也不是反映在自证分上的，是梦，也就是相梦。也就是你所看到的东西的形象实际是你先天的经验就知道的是啥东西的梦。这个相梦是实在的，自证分是不实在的。这个先天遗传的相梦说法和西方哲学家康德的先验论有点类似。陈那大师的这套唯识今学后来发展出了一套完整的因明学，也就是逻辑学。</p><p>&emsp;&emsp;唯识学的新旧分类法，作为瑜伽行派的中心学说，唯识哲学传入中国以后，它就分成了两套思想体系，一套是旧译的，叫九识说，也就是有九个识：眼、耳、鼻、舌、身、意、末那识、阿赖耶识、无垢净识。这套旧译唯识说也叫如来藏缘起说。还有一套新译的，叫八识说，也就是比旧译的唯识学少一个无垢净识，这个学说也叫阿赖耶识缘起说。在南北朝的晚期，佛教界内部最大的对峙，是北方地论师和南方摄论师之间。北部的学僧是世亲大师的十地经论为指导的，坚持阿赖耶识的八识说，认为末那识是妄识，而第八识阿赖耶识是真识。南方的学僧是以无著大师的摄大乘论为指导的，他们认为阿赖耶识是妄识，他们另立了一个第九识无垢净识为真识。世亲和无著是哥俩，世亲是哥哥，无著是弟弟。当时的时代背景，佛法到底是九识还是八识，一直没有权威来解读。后来玄奘大师为了求取真经，平息心中的疑惑，去印度求取真经来解决这个问题。玄奘大师到印度取的是唯识今学陈那大师的经。不过很遗憾，费尽千辛万苦取回来的经，中国人就读了一百多年，陈那大师的这套学说就没有往下传了。没有往下传的原因主要是印度的逻辑观和中国人有根本冲突，印度人有种姓制度，把人分等级，玄奘大师原汁原味的采取这套学说，中国人是王侯将相宁有种乎？不太认同印度这套说法，这也导致唯识法相宗没有传下去。后来唯识学成为中国佛教理论的武器库，博大精深，只要有需要都可以去拿一点。很快中国人发展出来了自己的一套唯识学体系。不管是新唯识还是旧唯识，他们在传入中国后，就和传入前的都变得不一样了。所以有时我们去看佛经，经常出现偏差，就是因为古人早就做了中国式的改造。改造就是把绝对真理的客体化改造绝对真理的本体化。</p><p>&emsp;&emsp;所谓绝对真理客体化就是绝对真理在你外面，是个客体。而绝对真理的本体化就是真理在你心里，在你身上。那唯识学中国化就是把绝对真理客体化转化为内在的本体化。那绝对真理是什么呢？就是真如，无上正等正觉，真谛等等。外域的佛学认为存在一个绝对真理的客体，这个客体不是众生性，也不是自性，是众性和自性以外的实体，这个需要我们去把握和认识。简单说就是真理在外就是客体说。而中国唯识学兴起的代表作是马鸣菩萨的大乘起信论。中国禅宗整整经历了十五代人的努力，用了华严宗的圆融观，用了禅宗的无心观，发挥了中国儒家以一贯百的传统，到了唐朝末期整整十五代人，禅宗五家中的第五家，法眼宗的高僧永明延寿终于用一个一心说统一了新旧唯识。这个概念一出，立刻横扫学界。</p><p>&emsp;&emsp;唯识学就介绍到这。我由此得到的启示是：我们总希望通过自己的努力改变外部世界来改变自己命运，但真正要做的是要改变我们自身实现改变自身的外部环境。也就是个人命运不在客体，在本体。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;佛教哲学的一个体系大乘唯识哲学，在民间般若学是显学，读金刚经和心经的比较多，在学界唯识学从出现开始一直到今天都是佛教哲学的显学。按照思想体系来分，唯识学存在两种分类，一类是新旧分类法，另一类是古今分类法。下面就详细聊聊这两块内容。&lt;/p&gt;
&lt;p&gt;&amp;e
      
    
    </summary>
    
      <category term="佛学" scheme="https://jinfei21.github.io/categories/%E4%BD%9B%E5%AD%A6/"/>
    
    
      <category term="佛学" scheme="https://jinfei21.github.io/tags/%E4%BD%9B%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>哥德尔不完全定理</title>
    <link href="https://jinfei21.github.io/2018/07/24/%E5%93%A5%E5%BE%B7%E5%B0%94%E4%B8%8D%E5%AE%8C%E5%85%A8%E5%AE%9A%E7%90%86/"/>
    <id>https://jinfei21.github.io/2018/07/24/哥德尔不完全定理/</id>
    <published>2018-07-24T11:28:20.000Z</published>
    <updated>2018-07-25T01:56:16.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;今天聊一个比较严肃的话题，和身边的人交流很多，听过很多关于哥德尔不完全定理的过度解读。学一个东西不会不要紧，最怕的就是一知半解，只学了前半段不了解后半段，所以有时候理解会和作者原意差很远。哥德尔是一个数学家，哥德尔不完全定理也是关于数学方面的定理，我要讲的不是数学，我是尽量给你一个未必准确但是简明的解释，让你通过这个定理对世界有一个深刻的理解。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&emsp;&emsp;数学家研究问题的方法是通过逻辑证明出来的，这个和科学家通过观察世界总结规律的方法有着本质的区别。什么意思？比如你考察几个直角三角形，发现他们的直角边的平方和都正好等于斜边的平方，那你能据此就认为这是直角三角形的普遍性吗？不能。你必须通过严格的数学推导证明这个性质，证明了，这个才能称为勾股定理。</p><p>&emsp;&emsp;问题来了，那证明这个定理的依据是什么呢？有的是已经被别人证明过的定理。那最初的定理是从哪里来的？最初的定理不叫定理，叫公理。公理就是逻辑极点，不需要证明的，是人们普遍认可的东西。比如常见的两点之间只能有一条直线，这就是一条公理。</p><p>&emsp;&emsp;数学家先认可几条公理，然后在公理的基础上证明各种定理，数学理论大厦就此建立起来。比如我们初中学的欧氏几何，总共才五条公理。决定整个几何学大厦的不是那些定理，而是这五条公理。在初中的时候，我们为了证明一个结论，往往会巧妙构思，而且有时候还比较难。</p><p>&emsp;&emsp;在20世纪初的时候，有一些数学家想找到一个机械的方法，从最基本的数学公理出发，自动证明所有的数学定理。当时的数学家主要考虑的是有关自然数的理论体系。数学家经过一番努力，貌似有了一些进展。但是在1931年的一个会议上，25岁的哥德尔做了一个报告，说他证明了一个有关自然数公理系统的定理。哥德尔证明了，在自然数的公理系统中，不但你想要的那种机械化的证明不存在，而且对有些命题来说，连证明本身都不存在。这个就是著名的哥德尔不完全定理。什么意思？用大白话说，只要自然数的公理系统只有有限条公理，那就一定存在一些命题，你既不能说它对，也不能说它错。也就是自然数的公理系统是不完全的。</p><p>&emsp;&emsp; <strong>请注意上面所说的哥德尔不完全定理是有条件的。很多人把哥德尔不完全定理做引申，认为哥德尔证明了一切有限的公理系统都是不完备的。这个就错了，哥德尔不完全定理只限于自然数系统。事实上，有一个数学家在1948年就证明了如果一个封闭的实数系统，那它就有可能是完备的和自洽的。比如欧氏几何就是一个关于实数的系统，塔斯基就已经证明欧氏几何系统是完备和自洽的。因此不要滥用哥德尔不完全定理。</strong></p><p>&emsp;&emsp; 哥德尔不完全定理的确说了，对自然数这个领域来说，你不能从有限的几个公理出发推导出整个自然数论系统大厦。自然数的世界里永远有新东西等着你。</p><h2 id="启示"><a href="#启示" class="headerlink" title="启示"></a>启示</h2><p>&emsp;&emsp;所有<strong>可数</strong>的系统都等价于自然数系统。那依照哥德尔不完全定理，一个可数的自己，是说明不了自己的。比如某些人迷信炒股宝典，总希望有一个方法，对照方法操作就能在股市上赚钱。宝典上说该做的你就做，不该做的你就不做。如果是哥德尔，他会说总有一些事情，是你的宝典里面没办法判断它对和错的。有时候你得跳出宝典之外，才能判断它对不对。</p><p>&emsp;&emsp;哥德尔不完全定理给学术界开了脑洞。后来有人证明了一个类似的理论，说任何一个可以写下来的语言系统，总会有些语句，你用这个语言本身无法判断对和错，你必须跳出这个语言才能判断。也就是说，如果你的全部思考被限制在一种语言里，有些事情对你来说永远不知道怎么做决定。你得跳出这个语言才行，得有一些在这个语言之外的意思才行。</p><p>&emsp;&emsp;从计算机的视角看，计算机系统本质上是一个可数的系统，符合哥德尔不完备定理的条件。依照哥德尔不完全定理，在这样的封闭系统内，总有一些语句是这个系统无法判断对错的。如果真实的世界是数字的，我们的大脑都是计算机，那迟早有一天，人类会对这个系统能想明白的全想明白了，剩下的都是永远不可能想明白的。从那天起，人类将浑浑噩噩的活着。</p><p>&emsp;&emsp;如果真实的世界不是可数的，是实数，人脑不是计算机，那我们就有可能随时跳出任何能写成文字的认知系统，我们永远都有一个只可意会不可言传的思路。人类可以不断跳出旧系统，探索新知识，发明新语言，建立新系统，科学家可以永远琢磨新的物理定律，艺术家可以永远创造新意境，工程师永远可以发明新模型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;今天聊一个比较严肃的话题，和身边的人交流很多，听过很多关于哥德尔不完全定理的过度解读。学一个东西不会不要紧，最怕的就
      
    
    </summary>
    
      <category term="哲学" scheme="https://jinfei21.github.io/categories/%E5%93%B2%E5%AD%A6/"/>
    
    
      <category term="哲学" scheme="https://jinfei21.github.io/tags/%E5%93%B2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>软件开发原则</title>
    <link href="https://jinfei21.github.io/2018/07/23/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E5%8E%9F%E5%88%99/"/>
    <id>https://jinfei21.github.io/2018/07/23/软件开发原则/</id>
    <published>2018-07-23T07:05:28.000Z</published>
    <updated>2018-07-26T09:04:48.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;我从事软件架构设计也有一些年了，以前在学校学习设计模式，当时学习只是当做一门技能，没有实际应用很难体会设计模式带给软件开发的真正好处。GoF传说中的四位大神搞出了23种经典的设计模式，我在实际工作中用到了其中一些，现在回过头来看这23种设计模式其实是遵循了一些原则，今天就聊聊这些原则。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-单一职责原则（Single-Responsibility-Principle-SRP）"><a href="#1-单一职责原则（Single-Responsibility-Principle-SRP）" class="headerlink" title="1. 单一职责原则（Single Responsibility Principle - SRP）"></a>1. 单一职责原则（Single Responsibility Principle - SRP）</h3><p>原文：There should never be more than one reason for a class to change.</p><p>译文：永远不应该有多于一个原因来改变某个类。</p><p>理解：对于一个类而言，应该仅有一个引起它变化的原因。说白了就是，不同的类具备不同的职责，各施其责。这就好比一个团队，大家分工协作，互不影响，各做各的事情。</p><p>应用：当我们做系统设计时，如果发现有一个类拥有了两种的职责，那就问自己一个问题：可以将这个类分成两个类吗？如果真的有必要，那就分吧。千万不要让一个类干的事情太多！</p><h3 id="2-开放封闭原则（Open-Closed-Principle-OCP）"><a href="#2-开放封闭原则（Open-Closed-Principle-OCP）" class="headerlink" title="2. 开放封闭原则（Open Closed Principle - OCP）"></a>2. 开放封闭原则（Open Closed Principle - OCP）</h3><p>原文：Software entities like classes, modules and functions should be open for extension but closed for modifications.</p><p>译文：软件实体，如：类、模块与函数，对于扩展应该是开放的，但对于修改应该是封闭的。</p><p>理解：简言之，对扩展开放，对修改封闭。换句话说，可以去扩展类，但不要去修改类。</p><p>应用：当需求有改动，要修改代码了，此时要做的是，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。当然，如果能够确保对整体架构不会产生任何影响，那么也没必要搞得那么复杂了，直接改这个类吧。</p><h3 id="3-里氏替换原则（Liskov-Substitution-Principle-LSP）"><a href="#3-里氏替换原则（Liskov-Substitution-Principle-LSP）" class="headerlink" title="3. 里氏替换原则（Liskov Substitution Principle - LSP）"></a>3. 里氏替换原则（Liskov Substitution Principle - LSP）</h3><p>原文：Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</p><p>译文：使用基类的指针或引用的函数，必须是在不知情的情况下，能够使用派生类的对象。</p><p>理解：父类能够替换子类，但子类不一定能替换父类。也就是说，在代码中可以将父类全部替换为子类，程序不会报错，也不会在运行时出现任何异常，但反过来却不一定成立。</p><p>应用：在继承类时，务必重写（Override）父类中所有的方法，尤其需要注意父类的 protected 方法（它们往往是让你重写的），子类尽量不要暴露自己的 public 方法供外界调用。</p><h3 id="4-最少知识原则（Least-Knowledge-Principle-LKP）"><a href="#4-最少知识原则（Least-Knowledge-Principle-LKP）" class="headerlink" title="4. 最少知识原则（Least Knowledge Principle - LKP）"></a>4. 最少知识原则（Least Knowledge Principle - LKP）</h3><p>原文：Only talk to you immediate friends.</p><p>译文：只与你最直接的朋友交流。</p><p>理解：尽量减少对象之间的交互，从而减小类之间的耦合。简言之，一定要做到：低耦合，高内聚。</p><p>应用：在做系统设计时，不要让一个类依赖于太多的其他类，需尽量减小依赖关系，否则，您死都不知道自己怎么死的。</p><h3 id="5-接口隔离原则（Interface-Segregation-Principle-ISP）"><a href="#5-接口隔离原则（Interface-Segregation-Principle-ISP）" class="headerlink" title="5. 接口隔离原则（Interface Segregation Principle - ISP）"></a>5. 接口隔离原则（Interface Segregation Principle - ISP）</h3><p>原文：The dependency of one class to another one should depend on the smallest possible interface.</p><p>译文：一个类与另一个类之间的依赖性，应该依赖于尽可能小的接口。</p><p>理解：不要对外暴露没有实际意义的接口。也就是说，接口是给别人调用的，那就不要去为难别人了，尽可能保证接口的实用性吧。她好，我也好。</p><p>应用：当需要对外暴露接口时，需要再三斟酌，如果真的没有必要对外提供的，就删了吧。一旦提供了，就意味着，将来要多做一件事情，何苦要给自己找事做呢。</p><h3 id="6-依赖倒置原则（Dependence-Inversion-Principle-DIP）"><a href="#6-依赖倒置原则（Dependence-Inversion-Principle-DIP）" class="headerlink" title="6. 依赖倒置原则（Dependence Inversion Principle - DIP）"></a>6. 依赖倒置原则（Dependence Inversion Principle - DIP）</h3><p>原文：High level modules should not depends upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</p><p>译文：高层模块不应该依赖于低层模块，它们应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</p><p>理解：应该面向接口编程，不应该面向实现类编程。面向实现类编程，相当于就是论事，那是正向依赖（正常人思维）；面向接口编程，相当于通过事物表象来看本质，那是反向依赖，即依赖倒置（程序员思维）。</p><p>应用：并不是说，所有的类都要有一个对应的接口，而是说，如果有接口，那就尽量使用接口来编程吧。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>&emsp;&emsp;将以上六大原则的英文首字母拼在一起就是 SOLID（稳定的），所以也称之为 SOLID 原则。只有满足了这六大原则，才能设计出稳定的软件架构！但它们毕竟只是原则，只是四人帮给我们的建议，有些时候我们还是要学会灵活应变，千万不要生搬硬套，否则只会把简单问题复杂化，切记！<br>&emsp;&emsp;除了以上一些原则，实际上还有其它一些原则：</p><h3 id="1-组合-聚合复用原则（Composition-Aggregation-Reuse-Principle-CARP）"><a href="#1-组合-聚合复用原则（Composition-Aggregation-Reuse-Principle-CARP）" class="headerlink" title="1. 组合/聚合复用原则（Composition/Aggregation Reuse Principle - CARP）"></a>1. 组合/聚合复用原则（Composition/Aggregation Reuse Principle - CARP）</h3><p>&emsp;&emsp;当要扩展类的功能时，优先考虑使用组合，而不是继承。这条原则在 23 种经典设计模式中频繁使用，如：代理模式、装饰模式、适配器模式等。可见江湖地位非常之高！</p><h3 id="2-无环依赖原则（Acyclic-Dependencies-Principle-ADP）"><a href="#2-无环依赖原则（Acyclic-Dependencies-Principle-ADP）" class="headerlink" title="2. 无环依赖原则（Acyclic Dependencies Principle - ADP）"></a>2. 无环依赖原则（Acyclic Dependencies Principle - ADP）</h3><p>&emsp;&emsp;当 A 模块依赖于 B 模块，B 模块依赖于 C 模块，C 依赖于 A 模块，此时将出现循环依赖。在设计中应该避免这个问题，可通过引入“中介者模式”解决该问题。</p><h3 id="3-共同封装原则（Common-Closure-Principle-CCP）"><a href="#3-共同封装原则（Common-Closure-Principle-CCP）" class="headerlink" title="3. 共同封装原则（Common Closure Principle - CCP）"></a>3. 共同封装原则（Common Closure Principle - CCP）</h3><p>&emsp;&emsp;应该将易变的类放在同一个包里，将变化隔离出来。该原则是“开放-封闭原则”的延生。</p><h3 id="4-共同重用原则（Common-Reuse-Principle-CRP）"><a href="#4-共同重用原则（Common-Reuse-Principle-CRP）" class="headerlink" title="4. 共同重用原则（Common Reuse Principle - CRP）"></a>4. 共同重用原则（Common Reuse Principle - CRP）</h3><p>&emsp;&emsp;如果重用了包中的一个类，那么也就相当于重用了包中的所有类，我们要尽可能减小包的大小。</p><h3 id="5-好莱坞原则（Hollywood-Principle-HP）"><a href="#5-好莱坞原则（Hollywood-Principle-HP）" class="headerlink" title="5. 好莱坞原则（Hollywood Principle - HP）"></a>5. 好莱坞原则（Hollywood Principle - HP）</h3><p>&emsp;&emsp;好莱坞明星的经纪人一般都很忙，他们不想被打扰，往往会说：Don’t call me, I’ll call you. 翻译为：不要联系我，我会联系你。对应于软件设计而言，最著名的就是“控制反转”（或称为“依赖注入”），我们不需要在代码中主动的创建对象，而是由容器帮我们来创建并管理这些对象。</p><h3 id="6-不要重复你自己（Don’t-repeat-yourself-DRY）"><a href="#6-不要重复你自己（Don’t-repeat-yourself-DRY）" class="headerlink" title="6. 不要重复你自己（Don’t repeat yourself - DRY）"></a>6. 不要重复你自己（Don’t repeat yourself - DRY）</h3><p>&emsp;&emsp;不要让重复的代码到处都是，要让它们足够的重用，所以要尽可能地封装。</p><h3 id="7-保持它简单与傻瓜（Keep-it-simple-and-stupid-KISS）"><a href="#7-保持它简单与傻瓜（Keep-it-simple-and-stupid-KISS）" class="headerlink" title="7. 保持它简单与傻瓜（Keep it simple and stupid - KISS）"></a>7. 保持它简单与傻瓜（Keep it simple and stupid - KISS）</h3><p>&emsp;&emsp;不要让系统变得复杂，界面简洁，功能实用，操作方便，要让它足够的简单，足够的傻瓜。</p><h3 id="8-高内聚与低耦合（High-Cohesion-and-Low-Coupling-HCLC）"><a href="#8-高内聚与低耦合（High-Cohesion-and-Low-Coupling-HCLC）" class="headerlink" title="8. 高内聚与低耦合（High Cohesion and Low Coupling - HCLC）"></a>8. 高内聚与低耦合（High Cohesion and Low Coupling - HCLC）</h3><p>&emsp;&emsp;模块内部需要做到内聚度高，模块之间需要做到耦合度低。</p><h3 id="9-惯例优于配置（Convention-over-Configuration-COC）"><a href="#9-惯例优于配置（Convention-over-Configuration-COC）" class="headerlink" title="9. 惯例优于配置（Convention over Configuration - COC）"></a>9. 惯例优于配置（Convention over Configuration - COC）</h3><p>&emsp;&emsp;尽量让惯例来减少配置，这样才能提高开发效率，尽量做到“零配置”。很多开发框架都是这样做的。</p><h3 id="10-命令查询分离（Command-Query-Separation-CQS）"><a href="#10-命令查询分离（Command-Query-Separation-CQS）" class="headerlink" title="10. 命令查询分离（Command Query Separation - CQS）"></a>10. 命令查询分离（Command Query Separation - CQS）</h3><p>&emsp;&emsp;在定义接口时，要做到哪些是命令，哪些是查询，要将它们分离，而不要揉到一起。</p><h3 id="11-关注点分离（Separation-of-Concerns-SOC）"><a href="#11-关注点分离（Separation-of-Concerns-SOC）" class="headerlink" title="11. 关注点分离（Separation of Concerns - SOC）"></a>11. 关注点分离（Separation of Concerns - SOC）</h3><p>&emsp;&emsp;将一个复杂的问题分离为多个简单的问题，然后逐个解决这些简单的问题，那么这个复杂的问题就解决了。难就难在如何进行分离。</p><h3 id="12-契约式设计（Design-by-Contract-DBC）"><a href="#12-契约式设计（Design-by-Contract-DBC）" class="headerlink" title="12. 契约式设计（Design by Contract - DBC）"></a>12. 契约式设计（Design by Contract - DBC）</h3><p>&emsp;&emsp;模块或系统之间的交互，都是基于契约（接口或抽象）的，而不要依赖于具体实现。该原则建议我们要面向契约编程。</p><h3 id="13-你不需要它（You-aren’t-gonna-need-it-YAGNI）"><a href="#13-你不需要它（You-aren’t-gonna-need-it-YAGNI）" class="headerlink" title="13. 你不需要它（You aren’t gonna need it - YAGNI）"></a>13. 你不需要它（You aren’t gonna need it - YAGNI）</h3><p>&emsp;&emsp;不要一开始就把系统设计得非常复杂，不要陷入“过度设计”的深渊。应该让系统足够的简单，而却又不失扩展性，这是其中的难点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我从事软件架构设计也有一些年了，以前在学校学习设计模式，当时学习只是当做一门技能，没有实际应用很难体会设计模式带给软
      
    
    </summary>
    
      <category term="技术" scheme="https://jinfei21.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://jinfei21.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>科学、宗教和信仰</title>
    <link href="https://jinfei21.github.io/2018/07/21/%E7%A7%91%E5%AD%A6%E3%80%81%E5%AE%97%E6%95%99%E5%92%8C%E4%BF%A1%E4%BB%B0/"/>
    <id>https://jinfei21.github.io/2018/07/21/科学、宗教和信仰/</id>
    <published>2018-07-21T04:08:02.000Z</published>
    <updated>2018-07-23T07:01:52.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;昨天下班和一拨同事吃了顿散伙饭，席间聊到了以前携程一个同事出家了，我虽然学佛久矣，但是极不赞成在没有安排好家人后代后半生物质生活时，男人抛家舍业去求心灵解脱修佛。今天我就借着这次契机，聊聊科学宗教信仰这个话题。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&emsp;&emsp;大体上人类思想经历了主要三个阶段：神学，哲学，科学阶段。这三个阶段我个人看法：人类的理性主观能动性到达极致的就是哲学，神学阶段是人类把生存危机的思考交给神，自己保留一份对大自然未知的敬畏，科学阶段则是对人类精神宁静的极大破坏。关于科学我极其赞成王东岳老师的看法，科学不是真理，它是人类生存能力弱化的代偿现象，科学只有工具性，没有真理性。但是国内的科普读物好像有点科学宗教主义了，人要相信科学，把科学当真理。</p><p>&emsp;&emsp;宗教来自于古人对世界的解读，在科学和知识不完备的时候，古人先哲们试图解释世界的缘由，并为苦难的人生带来慰藉，从某种意义来说，宗教本身就有安抚情绪和治疗抑郁的功效，从古至今，很多人在尘世中走投无路，或者感到疲惫和厌倦的时候，往往会选择宗教作为最后的情感庇护。</p><p>&emsp;&emsp;当然科学与宗教也并不一直是对立的，实际上相当多科学家，特别是国外的科学家，相当高的比例是虔诚的教徒。那么我的理解是，这个世界有太多无法解释的事情，有太多科学无法覆盖的领域，我觉得，能让科学解释的，用科学来解读，暂时无法用科学解释的，求助于宗教，也无可厚非，毕竟宗教本身也是无法证伪的，但科学找到正确解读后，还是应该相信工具性的科学。</p><p>&emsp;&emsp;现在有些国内的科学家也开始信奉宗教，我觉得信仰自由其实也可以宽容一些，信仰宗教与科学研究真的可以不冲突，但因宗教而拒绝科学，否定科学，是非常糟糕的。</p><p>&emsp;&emsp;很多西方人觉得没有宗教信仰是很可怕的事情，这和我们的思维完全不同，很多西方人认为无信仰者是不可以信任的，我不点评孰是孰非，但从他们的思考方式来说，没有信仰可能也就意味着缺乏敬畏，缺乏对行为的约束。我们古人说，头上三尺有神明；人在做，天在看；</p><p>&emsp;&emsp;宗教是一种信仰，但信仰不只是宗教，有坚定的信仰，可能意志力和精神力就会强大一点，而行为方式也会有所约束。</p><p>&emsp;&emsp;我觉得不信宗教没事，但是人应该有信仰。我曾经以为正常人都应该有最基本的行为底线和价值观认知，但这些年越来越觉得人性之恶，瞠目结舌。某些台上冠冕堂皇的成功商人和创业新贵，为了一己之私，真的是可以谎话连篇，真的是可以随意的出卖信用，真的是可以伤害无辜的人而毫无顾忌。以前某些人还都不显山不露水，躲在角落里偷偷搞搞黑产，开开赌场，卖点仿冒商品，或者微信上洗洗稿什么的，最近这两年一窝蜂扎到币圈来了。一些曾经还挺在意形象和口碑的大佬们也疯狂了，连吃相都不顾了。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>&emsp;&emsp;世界和社会有很多糟糕的地方，有很多糟糕的人，有很多糟糕的事情，有些东西会冲击你的价值观和信仰，要直面这样的事情，必要时甚至要学会委屈求全，但心底要保留光明的一面，留住自己的底线，维系自己的信用。要入世修行，行雷霆手段，施菩萨心肠。<br>&emsp;&emsp;心存善良，但不能说无节制的容忍和妥协，要有斩妖除魔的决心，才能拯救善良和无辜的人。对坏人善良，就是对好人造恶。<br>&emsp;&emsp;孔子曰：以德报怨，何以报德，以直报怨，以德报德。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;昨天下班和一拨同事吃了顿散伙饭，席间聊到了以前携程一个同事出家了，我虽然学佛久矣，但是极不赞成在没有安排好家人后代后
      
    
    </summary>
    
      <category term="杂说" scheme="https://jinfei21.github.io/categories/%E6%9D%82%E8%AF%B4/"/>
    
    
      <category term="杂说" scheme="https://jinfei21.github.io/tags/%E6%9D%82%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>网关系统</title>
    <link href="https://jinfei21.github.io/2018/07/16/%E7%BD%91%E5%85%B3%E7%B3%BB%E7%BB%9F/"/>
    <id>https://jinfei21.github.io/2018/07/16/网关系统/</id>
    <published>2018-07-16T03:11:39.000Z</published>
    <updated>2018-07-23T07:01:52.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;过去一年多时间，我负责公司目前三套网关（无线网关、H5网关、第三方网关）的架构研发工作。参考Netflix开源的zuul定制化了一套基于异步servlet机制的网关系统，经过一年多线上流量冲击的考验，目前这套机制运行比较稳定可靠。今天从个人角度聊聊对网关的理解，以及实践过程中所遇到的一些问题和解决方案。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&emsp;&emsp;在开始之前，先了解一下下面两个问题：</p><h3 id="什么是服务网关？"><a href="#什么是服务网关？" class="headerlink" title="什么是服务网关？"></a>什么是服务网关？</h3><p>服务网关 = 路由转发 + 过滤器</p><p>1、路由转发：接收一切外界请求，转发到后端的微服务上去；</p><p>2、过滤器：在服务网关中可以完成一系列的横切功能，例如权限校验、限流以及监控等，这些都可以通过过滤器完成（其实路由转发也是通过过滤器实现的）。</p><h3 id="为什么需要服务网关？"><a href="#为什么需要服务网关？" class="headerlink" title="为什么需要服务网关？"></a>为什么需要服务网关？</h3><p>上述所说的横切功能（以权限校验为例）可以写在三个位置：</p><p>1、每个服务自己实现一遍<br>2、写到一个公共的服务中，然后其他所有服务都依赖这个服务<br>3、写到服务网关的前置过滤器中，所有请求过来进行权限校验<br>&emsp;&emsp;显然第一种方式太过臃肿，并不符合工程化的架构理念。第二种相较于第一种就好很多，代码开发不会冗余，但是有两个缺点。由于每个服务引入了这个公共服务，那么相当于在每个服务中都引入了相同的权限校验的代码，使得每个服务的jar包大小无故增加了一些，尤其是对于使用docker镜像进行部署的场景，jar越小越好；由于每个服务都引入了这个公共服务，那么我们后续升级这个服务可能就比较困难，而且公共服务的功能越多，升级就越难，而且假设我们改变了公共服务中的权限校验的方式，想让所有的服务都去使用新的权限校验方式，我们就需要将之前所有的服务都重新引包，编译部署。<br>&emsp;&emsp;而服务网关恰好可以解决这样的问题。将权限校验的逻辑写在网关的过滤器中，后端服务不需要关注权限校验的代码，所以服务的jar包中也不会引入权限校验的逻辑，不会增加jar包大小；如果想修改权限校验的逻辑，只需要修改网关中的权限校验过滤器即可，而不需要升级所有已存在的微服务。<br>&emsp;&emsp;当然上面只是从横切面一个方面谈到了需要网关的必要性，实际上网关要做的事情远不止这一个，一个典型的网关系统必须包含以下几个基本功能：<br>智能路由：服务发现和路由寻址，将外部请求转发到后端服务。<br>权限校验：检验外部访问的合法性。<br>API监控：可以监控后端服务的一些性能指标和业务指标，比如响应时间，调用次数，出错比例等等。对异常服务提前做一些告警处理，比如熔断机制。<br>限流容错：与监控配合，进行限流和容错操作，保护后端服务不会受到异常飙升的流量崩溃。<br>A|B测试：A|B测试时一块比较大的东西，包含后台实验配置、数据埋点（看转化率）以及分流引擎，在服务网关中，可以实现分流引擎。<br>&emsp;&emsp;随着微服务成为业界互联网的趋势，网关已经成为重要的基础设施，它可以做到不将服务直接暴露给外部访问，屏蔽了一些安全和服务升级发布所带来的风险，这些也都是网关比较关键的核心功能。</p><h3 id="网关整体架构"><a href="#网关整体架构" class="headerlink" title="网关整体架构"></a>网关整体架构</h3><p>&emsp;&emsp;开源的zuul网关采用的是同步servlet机制，我们采用的是异步servlet机制，这种方式可以提高网关响应的请求数。这套机制在携程也运行良好，我们只不过是直接拿来，结合Cat做了一些监控告警定制，替换现有的.Net网关，比.Net网关多了熔断监控告警，而且zuul采用groovy脚本处理相关逻辑，可以做到动态修改和热部署，将变更风险降到了最低。架构图如下所示：<br><img src="/2018/07/16/网关系统/网关1.png" alt=""><br>&emsp;&emsp;整个架构还是比较清晰，流量从外网过来先经过软负载nginx，然后转发到网关集群，网关再根据一定的路由规则将流量转到特定的服务上。网关会对接配置中心，管理路由服务的动态配置信息，比如超时、并发量，连接池大小等相关信息，还会对接elk，把一些出错请求的header头写入日志系统，方便故障定位。</p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>&emsp;&emsp;这套网关系统现在线上也还是这样，没有出现重大问题。问题主要集中在测试和日常维护中，可以说占据了大量的精力，这些事情做了不算功劳，但是不做又会影响测试体验，经常会收到一些抱怨。</p><p>1、安装部署<br>&emsp;&emsp;目前我们将网关代码的打成一个war包部署在tomcat中，如果tomcat的版本不一致会带来jar冲突。前期没有考虑到会有多套网关问题，默认将脚本放在指定目录，如果安装多套网关会有脚本冲突问题，而且由于linux和Windows的目录规则还不一样，导致每次部署都要修改配置文件中的目录配置。实际上测试人员并不关心这些问题，他们需要的是网关服务。加上还要制定一些环境参数，比如网关名称，远程配置url地址等等。这些都会给测试人员带来麻烦。</p><p>2、配置问题<br>&emsp;&emsp;配置问题主要是两类配置：一个路由配置，一个是参数配置。路由配置主要是新服务上线，需要通过网关对外提供访问，根据路由规则配置路线信息，比如是否需要验证token或者验签。参数配置主要是配置一些连接池，并发超时等相关信息。两类配置会极大消耗网关维护人员的精力。而且这些配置还不能开放给测试人员，需要对网关机制有比较深入的了解。</p><p>3、测试问题<br>&emsp;&emsp;这类问题是比较多也比较头痛的。先看下面一张图的场景：<br><img src="/2018/07/16/网关系统/网关2.png" alt=""><br>&emsp;&emsp;网关定期拉取esb的路由配置信息实现服务发现，网关到后端的调用是通过域名的方式访问。由于只有生产环境做了域名解析，开发测试本地联调时会配置本地host，而且host配置还比较多，必须配置所有访问的域名host。如果两个测试人员都在测试，而且是测试同一个应用的不同版本，由于网关没有做版本路由，所以测试人员还不能使用同一个网关来测试，必须每个测试都搭建自己的网关，这样大家就可以独立的修改自己本地host，互不影响。这种host配置方式还会带来另一个问题，就是一旦服务地址发生变更迁移，还必须通知到所有的用户修改host配置。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>&emsp;&emsp;下图可以看出，我们整个架构理念是基于网关为中心架构的，而且配置比较分散。网关维护人员要操作三个系统，在esb系统中配置路由信息，在apollo中配置超时并发信息，在filter过滤器系统中修改过滤器状态。对网关维护者来说体验极差，定位问题必需具备一定的门槛。网关使用者很难有参与感，而且出了问题只能找网关开发者来定位问题。<br><img src="/2018/07/16/网关系统/网关4.png" alt=""><br>&emsp;&emsp;实际上刚开始来公司的时候，起初接到的任务是替换现有的.net网关，根本没有好好的设计。经过一年多的修改打磨，我提出了一个解决方案，请看下图：<br><img src="/2018/07/16/网关系统/网关3.png" alt=""><br>&emsp;&emsp;从上图中可知我们改变了以网关为中心的架构理念，变为以网关治理为中心的架构理念。将网关开发者和网关使用者平等对待，即使网关使用者不具备太多的网关上下文，也能通过治理中心解决以上所说的大部分问题。</p><p>以上架构的总体原则：<br>1、平台化（强调治理）<br>&emsp;&emsp;首先是将网关集群化，不同的集群使用不同的路由表，各个路由表之间不相互干扰。对网关集群实行治理，目前网关有多少测试人员用，我们是不知道的，所以经常修改host要通知到人非常麻烦。通过对网关集群实行治理，我们可以很清楚知道目前有哪些网关，哪些网关集群，是哪些测试人员在使用。</p><p>2、服务化（强调控制）<br>&emsp;&emsp;网关作为一种服务开放出去，避免重复造轮子。将配置路由信息也作为一种服务，开发测试可以直接操作治理中心实现日常的维护工作，这样可以极大的释放网关开发者的精力，不必为日常的一些维护耗费太多时间。</p><p>&emsp;&emsp;以网关治理为中心架构以后，整体流程调整为如下：<br><img src="/2018/07/16/网关系统/网关5.png" alt=""><br>&emsp;&emsp;首先治理中心只有两类用户，一类是管理员，一类是普通用户。管理员相当于超级用户，他负责维护网关模板和管理所有的网关集群，享有一切操作权。只有网关模板在治理中心注册以后，普通用户才能申请集群下载代码，启动网关集群。<br>&emsp;&emsp;对于聚合网关而言，可以通过接入注册中心，到时由同步协调器同步到kong内网网关，实现网关集群的动态扩容缩容。如果是开放平台网关，可能要通过f5配置域名解析等。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>&emsp;&emsp;目前参考开源的spring cloud zuul源码，我实现了一版基于异步servlet和groovy机制的简化版，使得网关不用在依赖tomcat，直接下载jar，指定启动参数启动即可。不仅解决了安装部署问题，也解决了日常维护配置工作，极大的提高app测试人员的测试效率，并提升了网关的使用体验。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;过去一年多时间，我负责公司目前三套网关（无线网关、H5网关、第三方网关）的架构研发工作。参考Netflix开源的zu
      
    
    </summary>
    
      <category term="技术" scheme="https://jinfei21.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="微服务" scheme="https://jinfei21.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="网关" scheme="https://jinfei21.github.io/tags/%E7%BD%91%E5%85%B3/"/>
    
  </entry>
  
  <entry>
    <title>战略思维</title>
    <link href="https://jinfei21.github.io/2018/07/14/%E6%88%98%E7%95%A5%E6%80%9D%E7%BB%B4/"/>
    <id>https://jinfei21.github.io/2018/07/14/战略思维/</id>
    <published>2018-07-14T05:18:03.000Z</published>
    <updated>2018-07-16T02:25:41.715Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;所谓战略，就是你决定做<em>什么</em>。战略是选择一个方向。战术就要低一级了，战术是方向已经确定了的情况下，你琢磨<em>怎么</em>做。攻略更低，是照着别人的经验把这事做下来。底层学习攻略，中层研究战术，高层选择战略。</p><p>&emsp;&emsp;战略的本质是取舍。在你自己看来，战略是对命运的主动选择。在你手下的人看来，战略也是利益分配，就是你得根据公司的未来发展，把钱投到最有前途的方向上去。</p><p>&emsp;&emsp;CEO 的最重要任务不是公司日常管理，而是战略。但是一般的CEO只有“内部视野”，平庸的公司，靠惯性运营。只听内部人怎么说，或者最多再盯着几个直接的竞争对手看的思维模式，叫做“内部视野”。内部视野带给公司的只有惯性。</p><p>&emsp;&emsp;战略的关键是选择做什么。做什么不能以自己过去为参考，也不能以公司内部人的意见为参考，而应该是往外看。往外看，你就会发现外面真实的世界绝对不是一个稳态的运行，最应该做的就是把资源迅速投入到一个快速增长的领域中去，而不是均分资源。</p><p>&emsp;&emsp;战略思维首先要往外看。当你往外看的时候，你发现世界上充满了不平等，平庸和成功的差距实在太大了。头部公司拿走了90%的利润；平庸公司的利润非常低；头部公司优势将来还可能还会进一步增大。选对了行业，你就选对了50%。所谓战略，就是你在利润分布图上是一个什么位置。真正的战略选择，就是决定你在利润争夺版图中的位置。</p><p>&emsp;&emsp;收获从来都不是由付出决定的。做什么，比怎么做，比做得努力不努力重要的多。</p><p>&emsp;&emsp;所谓战略意识就是时刻想想我是不是该调整发展方向。新趋势刚刚出来的时候，传统公司根本就感受不到任何影响；趋势清晰了，传统公司仍然傲慢，并不羡慕什么新行业；新模式已经被证明是更好的，转型要面临非常大的公司内部压力；旧模式已经不行了，转型已经来不及，直接退出是唯一的办法。</p><p>&emsp;&emsp;好战略应该走极端。战略不是做动作，而是做大动作，CEO们经常低估了什么叫大。市场竞争就是这样，跟上队伍不算厉害甚至都不算动作，你只有领先才能叫大动作。</p><p>&emsp;&emsp;做大动作是最安全，也是最有利的战略选择。并购、提高生产力和产品创新，都不但增加了公司在利润分布曲线上上行的概率，而且减少了下行概率。资源重组既增加了上行概率，也增加了下行概率，但是上行远远大于下行。资本支出使得上行和下行概率都增加了，而且幅度一样。</p><p>&emsp;&emsp;从战略的角度考虑，集中力量的本质是有选择的投入，也可以说是有选择放弃。在这个方向上集中力量，就意味着在那个方向上要放弃力量。要点在于第一，必须要有选择和放弃；第二，战略目标都是跟别人比出来的，不是算你投入多少绝对资源。</p><p>&emsp;&emsp;集中力量办大事的精髓就是选择一个战略方向，把有限的力量集中在这个方向上谋求突破。能选对方向，能调动资源，才叫有战略能力，否则四平八稳什么都做，那叫过日子。</p><p>&emsp;&emsp;所谓战略就是选择方向，集中力量，做几件能让你在利益分配曲线上有一个更好位置的大事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;所谓战略，就是你决定做&lt;em&gt;什么&lt;/em&gt;。战略是选择一个方向。战术就要低一级了，战术是方向已经确定了的情况下，你琢磨&lt;em&gt;怎么&lt;/em&gt;做。攻略更低，是照着别人的经验把这事做下来。底层学习攻略，中层研究战术，高层选择战略。&lt;/p&gt;
&lt;p&gt;&amp;em
      
    
    </summary>
    
      <category term="杂说" scheme="https://jinfei21.github.io/categories/%E6%9D%82%E8%AF%B4/"/>
    
    
      <category term="杂说" scheme="https://jinfei21.github.io/tags/%E6%9D%82%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>技术的悲哀</title>
    <link href="https://jinfei21.github.io/2018/07/07/%E6%8A%80%E6%9C%AF%E7%9A%84%E6%82%B2%E5%93%80/"/>
    <id>https://jinfei21.github.io/2018/07/07/技术的悲哀/</id>
    <published>2018-07-07T06:42:31.000Z</published>
    <updated>2018-08-28T01:58:59.929Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近徐峥主演的一部电影《我不是药神》，还没有正式上映，就已经在朋友圈成为热门话题。我虽然还没有去电影院看，但是从网上也搜集了一些相关剧情方面的东西。其实我个人觉得电影题材很好，是难得的反映现实主义题材的好的国产电影。医药技术的进步本是人类的福音，却成为某些利益集团谋利的工具。今天我就聊聊技术相关的话题。</p><p>&emsp;&emsp;以前听过很多大佬关于技术方面的演讲，比如京东老总就描绘过，未来技术进步以后，人只用工作2-3小时，其它的都给机器人来做，进入按需分配的共产主义社会并不遥远。总之这些大佬描绘的都是技术带给人类的都是美好。但是如果放大时间维度，人类从原始社会进入到现代社会，技术进步了多少，但是产生的社会问题一样不比以前的少。物质水平是进步很多，但是工作强度并没有因此减少，就是如此的工作强度，大部分都没有过上有尊严的生活。所以稍加推敲，技术并不能解决一切问题。</p><p>&emsp;&emsp;在美国1978年发生过邮件炸弹事件，就是美国哈佛大学一个数学天才，有感于技术带给人的奴役，给一些理工科的教授寄去了16封邮件炸弹，炸死了不少知名的教授学者。这件事很有名，事件的主导者甚至还威胁纽约时报，如果全文刊登他的文章，他就停止邮件炸弹袭击。大家有兴趣可以去看看卡辛斯基的警告，里面从哲学的角度论述了技术带给人类的负面影响。</p><p>&emsp;&emsp;目前全球的问题是阶层垄断，资源聚集，然后希望利用技术打破这种平衡，让人类变得更好，更和谐。任何一个人反抗垄断，权威，出发点都是朴素的，但是结果往往只是一个轮回游戏而已。技术从一千多年的历史来看，他并没有让社会变得更幸福，更美好，更和谐。从自杀率角度来看，反而提升更多。技术是解决不了人性的问题的，人不会因为技术而变得更加愿意付出，更加愿意珍惜，更加愿意宽容，却因为技术变得更容易盲从，贪婪，自私，他放大了人性恶的一面，更加激荡了人性。</p><p>&emsp;&emsp;比如我现在身处P2P行业，相关这个金融科技的负面报道也看了不少。比如我们公司的口号就是金融触手可及，信用改变中国，实现普惠金融，但是实际不是这样。我就问公司创始人一个很简单的问题，让你愿意放弃全部家产，投身到这个技术革命去，然后技术实现了，世界和平，人类富裕，但是你自己却一点好处也没有，你晚上睡觉的时候摸摸你的良心，你愿意么？其实，支撑那么多人前赴后继往前走的根本性目的，并不一定是理想，而是赚到足够多的钱，或者说一定是赚钱基础上的商业理想，但是一个阶层赚钱越多，必然别的阶层赚钱越少。这本质上一定是个悖论，你改变不了。</p><p>&emsp;&emsp;古人说过，民不患寡而患不公，也就是说如果社会很难实现所谓的公平正义，就很难会有所谓的幸福感。贫富分化差距的拉大，只会进一步降低幸福感，所以从这个角度来看，很多人都指望技术的发展来进一步限制贫富分化和差距的拉大，然后维护社会公正公平，本意都是好的。但是现实的结果就是我前面的结论所说的。</p><p>&emsp;&emsp;因为技术的存在，使得底层人民的质量是抬高的，但是生活差距其实是在拉大的，而且还在不断拉大，因为新技术带给强者的机会是更多的，强者有更多的资源、权利、去使用好技术维护自己的权利。技术只是解决便利性的问题，他或许可以提高整体民众的生活质量，但是很难解决社会幸福感的问题，而幸福感的背后其实很大程度上是来自社会公平问题。</p><p>&emsp;&emsp;我说技术带给人是负面的，并不是说技术本身是坏的。技术是中性的，中性的技术往往会被更有权利，或者是说更有钱的人使用，像打仗一样。有钱人可以买到更好的军火，用来灭掉没有钱的人，所以技术的结果是强者越强，弱者越弱，有一些技术可以用来维护社会公平和公正的时候，强者一定会把这个技术干掉，不让社会使用，为什么？</p><p>&emsp;&emsp;因为社会一旦公平公正就意味着他所占有的权益会被损害，原来他可以赚80块钱，一公平就只能赚40块钱了，公平意味着强者的利益损失和弱者利益提升，两者慢慢靠近中心点就是公平。</p><p>&emsp;&emsp;如果技术可以实现这个能力的话，有钱人会用这么好的技术来进行自我革命么，把自己给变得没钱么？换成你，你愿意么。现实的结果恰恰是相反的，许多有钱人反而利用技术更好的进行收割民众。</p><p>&emsp;&emsp;当一个技术如果会对他们的地位构成了威胁，他们第一想到的不是发展这个技术，而是垄断和搞死这个技术，这个就是社会现实，好的技术如果真能解决社会公平问题，一定意味着没有有钱人会去支持这种技术，限制发展，扼杀发展，都是常用套路。</p><p>&emsp;&emsp;在医疗领域其实是很明显的，其实有很多特效药的存在，但是他们都未被大规模普遍性应用，从而使得价格高昂的存在，甚至可能压根就没有投入市场，理由是还不完善，但是现实是真不完善么？对于一个面临绝症等死的人来说，还有什么可以不完善的么？不投放市场的原因就是因为很多药企的新药会对老药品的商业利润进行冲击，从而雪藏更好的新技术，直到老药品的利润被压榨倒极致在进行新药品的投放，这个也是为什么印度仿制特效药的空间的存在。</p><p>&emsp;&emsp;还有大量国外已经普遍存在的特效药，为什么国内企业不列入药品清单，那也是因为既得利益者的存在，这些药品的进入对国内药企的冲击会很大。这个就是社会现实。你也很难指责他们，因为换成你，或许你也一样选择，当然更残酷的事实是如果你不这么选择，你可能压根就无法获得足够的利润去支持新药的研发，赚取更多的利润，有时候讲商业是最大的慈善，在宏观和微观，群体和个体之间是悖论的存在。</p><p>&emsp;&emsp;过去五六年所谓新技术的使用背后都是阶层利益争夺的加剧。这是我对互联网提出的观点，互联网是什么，赢者通吃，基本上一家独大，金融是暴利，寡头垄断，暴利，也有是说两个合在一起的结果是赢者越来越暴利。</p><p>&emsp;&emsp;人类社会走到今天，10%的人会变得越来越强，90%的人变得越来越弱，估计再走下去还会更极端，2%的人越来越强，98%的人越来越底层。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;最近徐峥主演的一部电影《我不是药神》，还没有正式上映，就已经在朋友圈成为热门话题。我虽然还没有去电影院看，但是从网上也搜集了一些相关剧情方面的东西。其实我个人觉得电影题材很好，是难得的反映现实主义题材的好的国产电影。医药技术的进步本是人类的福音，却成
      
    
    </summary>
    
      <category term="杂说" scheme="https://jinfei21.github.io/categories/%E6%9D%82%E8%AF%B4/"/>
    
    
      <category term="杂说" scheme="https://jinfei21.github.io/tags/%E6%9D%82%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>基于Mesos的容器调度系统</title>
    <link href="https://jinfei21.github.io/2018/07/02/%E5%9F%BA%E4%BA%8EMesos%E7%9A%84%E5%AE%B9%E5%99%A8%E8%B0%83%E5%BA%A6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://jinfei21.github.io/2018/07/02/基于Mesos的容器调度系统/</id>
    <published>2018-07-02T08:30:19.000Z</published>
    <updated>2018-09-29T07:02:52.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;从去年下半年开始到今年上半年时间，我一直致力于容器云平台PaaS系统的建设。从概念设计到整体架构，我全程参与其中，期间经历过激烈的争吵讨论最终定型，上个月底已经上到生产环境接收第一个版本的流量冲击考验。<br>&emsp;&emsp;当时纠结于是否直连和代理两种方式实现微服务之间的调用。走直连模式会带来客户端升级的问题，比如版本冲突和兼容，走代理模式会带来性能损耗，但是微服务之间调用的客户端实现可以非常轻量，同时也给代理网关层提出了非常苛刻的要求。当时领导想的很简单，采用zuul网关去做这层代理，我很快实现出来，还发现了netflix的ribbon客户端的一些bug。下图是领导设计的第一版架构图：<br><img src="/2018/07/02/基于Mesos的容器调度系统/微服务架构1.png" alt=""></p><p>&emsp;&emsp;上图采用zuul做内网网关，服务之间调用使用服务名+http协议通过zuul网关发起调用，网关层面去做服务发现和负载均衡，这样服务之间调用的客户端就会很轻量，这和当下的service mesh的理念也比较契合。但是这里面最核心的问题，zuul采用的同步调用，意味着一个请求会占用一个线程，在极端情况下会导致线程数爆增。再有就是这套东西很难和目前公司的esb相兼容，这样导致这个新体系只能接受新项目，老项目还不能嵌入到我们的发布体系中。可能老大也是考虑这个原因，参考携程的基于nginx的slb来替换内网zuul网关。其实早在携程我就研读过nginx的源码，对第一版slb的源码也很熟悉，到平安以后研究过点评的slb方案camel源码。客观评价，携程slb源码的代码质量和组织架构不敢恭维，相对而言camel更优秀一些。其实私底下，我和团队成员说了，完全可以参考camel定制我们自己的slb。后来确实携程slb的代码没法进行下去，这么重要的东西，必须完全掌握才行，而且领导的这版本只是发包，还不是发的docker镜像。<br>&emsp;&emsp;后期架构就演变成nginx做内网网关，在nginx层上做负载均衡，流量切换和服务治理，发布系统改成基于mesos的调度方式，相对于上图，架构变化很大。我们加班加点确实做完了，代码质量确实不错，临到快要上线的时候，领导想法又变了，slb废弃掉，采用直连的模式。然后我跟领导说，我来重新设计整个体系，其实我是去携程交流以后有的一个大概想法，下面是我设计的架构图：<br><img src="/2018/07/02/基于Mesos的容器调度系统/微服务架构2.png" alt=""></p><p>&emsp;&emsp;可以从图中看到，虽然是直连，我还是把slb放到架构里面了，当时的一个想法是想和目前的esb体系兼容，这样用新框架的服务也能被老的服务调用，因为服务总得要有一个域名，不然这个新的服务框架很难被用起来。新服务之间的调用是很省事，通过服务名就可以了，然后服务框架提供客户端。其实我当时设计还有另一层考虑，我是负责无线网关和H5网关的，如果有域名，这样无线网关就能直接复用老的方式，不用从新做调整。而且前面也讨论过，直连和走代理的方式，直连还是存在一些问题，要不然service mesh现在也不会这么有市场。所以我的方案是取了个折中，直连和代理都走的通，方便后期切换，而且兄弟们开发了这么久的slb，好歹劳动成果不能浪费。源码我也看了还是比较靠谱，由于前期争论过多，小组成员还有点小矛盾了。后面和领导争取了，不知道他是故意的还是我没有表达清楚，把我的方案直接给否定了。下面是领导给的第二份架构：<br><img src="/2018/07/02/基于Mesos的容器调度系统/微服务架构3.png" alt=""></p><p>&emsp;&emsp;从上图中可以看到没有代理层了，服务之间调用是直连模式。如果是一家从零开始的公司，这套方案到没什么，但是彻底断绝了和现有服务框架兼容的可能性。新服务调用老的esb服务麻烦，老的服务调用新的框架服务也麻烦，更严重的是直连会带来治理的困难。我原先是做过分布式缓存，对客户端版本升级有过切肤之痛。好吧，领导说这么办就这么办，我虽然做的是容器调度，但是对微服务rpc框架也很有兴趣，以前也看过dubbo和motan的源码，我自己也按照这套方式写了一个RPC框架<a href="https://github.com/jinfei21/finix/" target="_blank" rel="noopener">finix</a>，有兴趣的可以看看代码。基于这种直连方式，我设计的发布流程如下：<br><img src="/2018/07/02/基于Mesos的容器调度系统/微服务架构6.png" alt=""></p><p>&emsp;&emsp;这段插曲还没完，做到年底快上线的时候，领导想法又变了，说直连不好要换代理模式。哥还是太单纯，和领导顶撞了一下，不是当面顶撞，只是在企业微信群里面就事论事，我说一个方案好不好不是我们闭门造车想一出是一出，应该先定一个设计目标，实现方式有很多种，如果是不确定，那能不能搞一个折中方案，方便切换。我知道变化是很正常的事情，但是都快上线了，中间实现的期间怎么没提出，快上线了提出，不是一次两次了。团队其它想做成事的人估计也有想法，只是经验老道不说，有的是老江湖了就迎合，其实我也是现在想通的。我原先在平安也和产品撕过逼，产品经理上周需求方案是一种，晚上回去我想实现，下周来上班发现需求全部变了，我是经历过这种情况的。但是中间件需求相对来说还是比较集中，这么来回的变就失去原则了。<br>&emsp;&emsp;好吧，经过数次的交锋，最终在集体智慧的努力下定型最终版本，连发布模型也变了，架构设计图如下：<br><img src="/2018/07/02/基于Mesos的容器调度系统/微服务架构4.png" alt=""></p><p>&emsp;&emsp;从上图中可以看出代理层从slb换成kong了，之所以换是因为nginx是单机版本的，不是集群版本，每次变更都得更新所有机器的配置文件。实现比较复杂，而且一致性还不一定能保证很好，而kong的配置采用的是数据库存储，天生就支持集群，而且kong从0.11版本以后，变成无状态的了，扩容缩容相当方便，并提供了插件机制可以方便做一些扩展。这块目前是我负责的，也没有做太多的改动，首先是把数据库替换了，换成了mysql，然后就是定制了一个kong的界面管理系统和同步协调器，同步注册中心的一些配置，比如域名集群和IP等信息，相对来说我定制的管理界面是直接操作数据库的，在事务性方面比开源产品直接调用kong admin api的要可靠很多。所以整个的发布流程就是如下的：<br><img src="/2018/07/02/基于Mesos的容器调度系统/微服务架构5.png" alt=""></p><p>&emsp;&emsp;首先用户参考我们提供的demo工程，在自己的项目工程pom文件中添加相应maven插件配置，执行相关命令把镜像推送到镜像治理中心。第二步，就是到我们的资产管理中心atlas去申请资源配额，资源配额是按照部门申请的，如果已经申请了就不用再申请，当然如果配额不够了可以申请扩容，这样既能保证资源治理比较合理，也能减少用户操作步骤。第三步，用户可以使用发布系统发布相应的镜像，在发布镜像之前，用户必须选择发布的规格，需要多少CPU和内存，发布系统会去altas去检查是否有剩余配额可以使用，如果不够就提示用户申请扩容，如果可以就进入第五步调用galaxy的api发布容器实例。到了第六步，galaxy通过向mesos发起调度task，这时mesos的执行器启动docker容器，docker engine会拉取镜像。docker镜像启动以后，会将appid，appname，cluster，ip等相关信息注册到radar注册中心。最终这些信息在第九步的时候同步到kong网关。发布系统可以根据发布类型，比如蓝绿部署，金丝雀部署修改注册中心的状态。</p><p>&emsp;&emsp;以上就是过去一年多经历的架构演进，走到今天相当不容易。我目前是负责基于mesos的容器调度系统，下面我就重点介绍这块内容。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>&emsp;&emsp;其实在做这个之前，我是毫无头绪的，以前做一个单一系统对我来说不是太难，一旦涉及到跨系统交互，确实有点难为我了。期间我调研了kubernetes，marathon，singularity等相关的东西，也看了docker和虚拟网络相关的东西。kubernetes对我们来说是黑盒子，而且整体架构又复杂，通过和饿了么的同事交流，kubernete他们试下来并不太稳定，所以最终我们决定是上mesos。基于mesos的容器调度，在携程和饿了么都已经经过生产级验证，稳定性和可靠性方面还是比较有保证。<br>&emsp;&emsp;我实现的基于mesos的容器调度系统主要是参考的singularity，因为singularity使用的是java开发的，不像marathon是scala开发的，只不过singularity搞的过于复杂，而且数据和状态全部存储在zookeeper里面，我自己正常测试和非正常测试下来，不太稳定，如果是zookeeper的数据模型被破坏，就有可能造成不可用，还有可能造成cpu和内存泄露。所以我只是参考它的源码，采用springboot+mysql的方式来重新定制调度逻辑，到现在为止，已经迭代了三个版本。</p><h3 id="Mesos原理"><a href="#Mesos原理" class="headerlink" title="Mesos原理"></a>Mesos原理</h3><p>&emsp;&emsp;在介绍调度系统之前，有必要先了解一下mesos的整体架构原理。同其他大部分分布式系统一样，Apache Mesos为了简化设计，也是采用了master/slave结构，为了解决master单点故障，将master做得尽可能地轻量级，其上面所有的元数据可以通过各个slave重新注册而进行重构，故很容易通过zookeeper解决该单点故障问题。其官网给出的架构如下图所示：<br><img src="/2018/07/02/基于Mesos的容器调度系统/mesos架构.png" alt=""><br>&emsp;&emsp;从图中可知Apache Mesos由四个组件组成，分别是Mesos-master，mesos-slave，framework和executor。<br>(1) Mesos-master：整个系统的核心，负责管理接入mesos的各个framework和slave，并将slave上的资源按照某种策略分配给framework。<br>(2) Mesos-slave：负责接收并执行来自mesos-master的命令、管理节点上的mesos-task，并为各个task分配资源。mesos-slave将自己的资源量发送给mesos-master，由mesos-master中的Allocator模块决定将资源分配给哪个framework，当前考虑的资源有CPU和内存两种，也就是说，mesos-slave会将CPU个数和内存量发送给mesos-master，而用户提交作业时，需要指定每个任务需要的CPU个数和内存量，这样，当任务运行时，mesos-slave会将任务放到包含固定资源的linux container中运行，以达到资源隔离的效果。<br>(3) Framework：是指外部的计算框架，如Hadoop，Mesos等，这些计算框架可通过注册的方式接入mesos，以便mesos进行统一管理和资源分配。Mesos要求可接入的框架必须有一个调度器模块，该调度器负责框架内部的任务调度。当一个framework想要接入mesos时，需要修改自己的调度器，以便向mesos注册，并获取mesos分配给自己的资源， 这样再由自己的调度器将这些资源分配给框架中的任务，也就是说，整个mesos系统采用了双层调度框架：第一层，由mesos将资源分配给框架；第二层，框架自己的调度器将资源分配给自己内部的任务。<br>(4) Executor：主要用于启动框架内部的task。由于不同的框架，启动task的接口或者方式不同，当一个新的框架要接入mesos时，需要编写一个executor，告诉mesos如何启动该框架中的task。当然也可以用mesos默认的执行器。</p><p>&emsp;&emsp;我实现的容器调度系统galaxy，就相当于是实现一个mesos的framework，负责接受来自mesos-master的资源，根据实际需要决定是否启动容器。整个过程如下图所示：<br><img src="/2018/07/02/基于Mesos的容器调度系统/framework架构.png" alt=""><br>&emsp;&emsp;第一步，调度器通过实现resourceOffers接口，接受来自mesos-master的空闲offer（包含目前空闲的cpu内存磁盘），第二步，调度器根据一定规则匹配，是否满足需求，如果满足就调用lanchTasks向mesos-master发起调用进入第三步，否则就直接拒绝offer。第三步，mesos-master向mesos-slave发指令启动task，这时mesos-slave收到指令后，开始向executor发起task调用，或是启动容器，或是启动jar包。启动完成之后，进入第四步，执行器会将task的状态上报给mesos-slave，mesos-slave再上报给mesos-master，最终由mesos-master告知调度器task的最终状态。注意mesos不保证消息的可靠性，也就是说有可能会丢失消息，但是mesos提供了确认机制，可以基于增量和全量的同步，这样保证了状态的最终一致性。</p><h3 id="容器调度系统Galaxy"><a href="#容器调度系统Galaxy" class="headerlink" title="容器调度系统Galaxy"></a>容器调度系统Galaxy</h3><h4 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h4><p>1、支持JOB、Service、Worker、One-Off<br>&emsp;&emsp;支持定时任务，也支持瞬时任务，同时也支持长期运行任务，service和worker都是长期任务，区别在于service要接入负载均衡，worker是后台进程不对外提供服务，也就是不用接入负载均衡。<br>2、支持发布镜像和jar包<br>&emsp;&emsp;支持两种方式，不仅能启动docker容器，也能直接启动springboot的jar包。<br>3、动态伸缩容器实例<br>&emsp;&emsp;能直接在线扩容缩容docker实例。<br>4、销毁容器<br>&emsp;&emsp;销毁容器实例。<br>5、IP资源池管理<br>&emsp;&emsp;由于我们生产目前采用的是macvlan的网络模型，所以为了解决ip冲突问题，添加了ip资源池的管理。我们不仅支持host，还支持bridge网络模式。<br>6、故障转移<br>&emsp;&emsp;故障转移就是当有容器实例挂掉以后，能自动的重启相应容器实例。<br>7、日志审计<br>&emsp;&emsp;我们提供了后台管理界面，提供日志审计方便日后的维护工作。<br>8、故障告警<br>&emsp;&emsp;当有容器或者机器挂掉以后，必需给出相应告警。<br>9、集群管理<br>&emsp;&emsp;我们对物理主机进行了逻辑隔离划分，能管理集群和机器的上下线，当然这部分目前没有使用。</p><h4 id="整体调度逻辑"><a href="#整体调度逻辑" class="headerlink" title="整体调度逻辑"></a>整体调度逻辑</h4><p>&emsp;&emsp;虽然整个调度逻辑不复杂，但是刚开始比较匆忙没有设计好，在实际开发测试过程中，经常因为状态不一致导致拆了东墙补西墙，而且前面两个版本对数据库冲击比较大，到目前第三个版本已经比较稳定了，各个模块之间都解耦了。调度逻辑如下图所示：<br><img src="/2018/07/02/基于Mesos的容器调度系统/galaxy调度.png" alt=""><br>&emsp;&emsp;首先是用户通过api或者界面添加相应的Deploy，我们定义一次发布单元叫Deploy，添加完Deploy之后，就等待mesos框架的调用，这时galaxy会根据一定规则先搜索Deploy库，找出active状态的Deploy，然后和mesos传过来的offer匹配，如果匹配上了就发起调用，否则拒绝offer。当发起完调用之后，galaxy就要等着更新task的状态，只有一个Deploy的所有task都启动完了，这个Deploy才算完成了调度，否则就算超时或失败。这里面涉及到几个状态的更新，还有事务。</p><h4 id="Galaxy界面"><a href="#Galaxy界面" class="headerlink" title="Galaxy界面"></a>Galaxy界面</h4><p>&emsp;&emsp;目前处于最小可用版本，优先保证稳定性。整个操作简单易用，界面风格如下：<br><img src="/2018/07/02/基于Mesos的容器调度系统/galaxy管理系统.png" alt=""><br>&emsp;&emsp;用户可以在主界面查看现有的Deploy列表和状态，也能激活和停止Deploy，还能扩容缩容Deploy。如果要添加Deploy，可以通过以下界面：<br><img src="/2018/07/02/基于Mesos的容器调度系统/deploy添加.png" alt=""><br>&emsp;&emsp;用户填好相关内容，选择启动的类型，jar包或者image，然后指定相应的网络模型，如果是bridge还要指定相应的端口映射。其它还有一些相关操作就不做具体介绍了，有兴趣的朋友可以留言给我。</p><h4 id="Galaxy-API"><a href="#Galaxy-API" class="headerlink" title="Galaxy API"></a>Galaxy API</h4><p>&emsp;&emsp;除了使用界面添加Deploy，我们也可以通过API来发起调用。以下是添加Deploy的API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">POST /api/deploy</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"appId"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="string">"appName"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="string">"appType"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="string">"cmd"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="string">"cpus"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"disk"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"dockerParametes"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"envMap"</span>: &#123;&#125;,</span><br><span class="line">  <span class="string">"forcePullImage"</span>: <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">"instances"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"keepAlive"</span>: <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">"memory"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"networkType"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="string">"packageId"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="string">"packageType"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="string">"packageUri"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="string">"portMappings"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"containerPort"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">"hostPortIndex"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">"protocol"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"ports"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"privileged"</span>: <span class="keyword">true</span>,</span><br><span class="line">  <span class="string">"tag"</span>: <span class="string">"string"</span>,</span><br><span class="line">  <span class="string">"volumes"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"containerPath"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="string">"hostPath"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="string">"mode"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;相关其它API还有很多，可以通过swagger ui查看，下图是通过swagger界面查看的相关Deploy的全部API：<br><img src="/2018/07/02/基于Mesos的容器调度系统/deployapi.png" alt=""></p><h4 id="容器监控"><a href="#容器监控" class="headerlink" title="容器监控"></a>容器监控</h4><p>&emsp;&emsp;容器监控有很多方案，我们采用的telegraf+grafana+karisdb做的，我也调研了Prometheus的相关方案。目前监控界面如下：<br><img src="/2018/07/02/基于Mesos的容器调度系统/容器监控.png" alt=""></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>&emsp;&emsp;Galaxy容器调度系统就介绍到这，从事情经过的来龙去脉到原理架构，以及Galaxy的相关设计，整体脉络我是介绍清楚了，里面的一些细节就不做过多阐述了。去年大半年的时间都在做这些事情，虽然是工作以来最累的，但是收获确实很大。不仅仅是扩展了技术视野和相关技能，也扩展了跨系统解耦相关的一些经验，如何确定系统边界，如何系统交互更好，第一次体会到这种挑战。同时也积累了一些问题，主要管理方面的问题，都强调领导力，其实有时候还真得靠原则强压，领导指望下面的人跳出来，下面的人又一个比一个牛逼，这个时候就需要领导协调，因为只有你看得更远，这样争论来争论去，中国人难免会有小疙瘩。我是见过了见怪不怪，后面发现太浪费时间了，我也就只有私下建议，不在争论了，因为有些事情不一定非得那样走不可，而有些人自己不承担责任非要别人按照他的意愿走。通过经历这些事情也识别了一些比较靠谱的同事，也识别了一些人不坏但是不切实际的同事，为以后转管理方向积累了不少经验值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;从去年下半年开始到今年上半年时间，我一直致力于容器云平台PaaS系统的建设。从概念设计到整体架构，我全程参与其中，期
      
    
    </summary>
    
      <category term="技术" scheme="https://jinfei21.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="容器云" scheme="https://jinfei21.github.io/tags/%E5%AE%B9%E5%99%A8%E4%BA%91/"/>
    
      <category term="Mesos" scheme="https://jinfei21.github.io/tags/Mesos/"/>
    
      <category term="Docker" scheme="https://jinfei21.github.io/tags/Docker/"/>
    
  </entry>
  
</feed>
